{"version":3,"sources":["utils/getTimePeriods.ts","views/Predictions/components/History/Header.tsx","state/predictions/hooks.ts","views/Predictions/hooks/useGetLatestOraclePrice.ts","views/Predictions/hooks/usePollOraclePrice.ts","views/Predictions/hooks/usePollPredictions.ts","views/Predictions/components/Container.tsx","views/Predictions/components/CollectWinningsPopup.tsx","views/Predictions/context/SwiperProvider.tsx","views/Predictions/components/TradingView.tsx","views/Predictions/components/Notification/Notification.tsx","views/Predictions/components/Notification/ErrorNotification.tsx","views/Predictions/components/Notification/PauseNotification.tsx","views/Predictions/components/History/helpers.ts","views/Predictions/components/CollectRoundWinningsModal.tsx","views/Predictions/components/CollectWinningsButton.tsx","views/Predictions/components/ReclaimPositionButton.tsx","views/Predictions/helpers.ts","views/Predictions/components/PositionTag.tsx","views/Predictions/components/RoundResult/styles.tsx","views/Predictions/components/RoundResult/RoundResult.tsx","views/Predictions/components/RoundResult/RoundResultHistory.tsx","views/Predictions/hooks/useIsRefundable.ts","views/Predictions/components/History/BetResult.tsx","views/Predictions/components/History/BetDetails.tsx","views/Predictions/components/History/HistoricalBet.tsx","views/Predictions/components/History/RoundsTab.tsx","views/Predictions/components/History/PnlTab/PnlChartStyles.tsx","views/Predictions/components/History/PnlTab/PnlChart.tsx","views/Predictions/components/History/PnlTab/SummaryRow.tsx","views/Predictions/components/History/PnlTab/PnlTab.tsx","views/Predictions/History.tsx","views/Predictions/RoundMultiplierArrows.tsx","views/Predictions/components/RoundCard/EnteredTag.tsx","views/Predictions/components/RoundCard/MultiplierArrow.tsx","views/Predictions/components/RoundCard/CardHeader.tsx","views/Predictions/components/RoundCard/CollectWinningsOverlay.tsx","views/Predictions/components/RoundCard/CanceledRoundCard.tsx","views/Predictions/components/RoundCard/CalculatingCard.tsx","views/Predictions/components/RoundCard/ExpiredRoundCard.tsx","components/RoundProgress.tsx","views/Predictions/components/RoundCard/LiveRoundCard.tsx","views/Predictions/components/CardFlip.tsx","views/Predictions/hooks/useSwiper.ts","views/Predictions/components/FlexRow.tsx","views/Predictions/components/RoundCard/SetPositionCard.tsx","views/Predictions/components/RoundCard/OpenRoundCard.tsx","views/Predictions/hooks/useCountdown.ts","views/Predictions/components/RoundCard/SoonRoundCard.tsx","views/Predictions/components/RoundCard/index.tsx","views/Predictions/components/Label.tsx","views/Predictions/components/PrevNextNav.tsx","views/Predictions/components/HistoryButton.tsx","views/Predictions/components/Menu.tsx","views/Predictions/hooks/useOnNextRound.ts","views/Predictions/hooks/useOnViewChange.ts","views/Predictions/Positions.tsx","views/Predictions/types.ts","views/Predictions/Desktop.tsx","views/Predictions/components/MobileMenu.tsx","views/Predictions/Chart.tsx","views/Predictions/Mobile.tsx","views/Predictions/components/RiskDisclaimer.tsx","views/Predictions/components/ChartDisclaimer.tsx","views/Predictions/index.tsx"],"names":["HOUR_IN_SECONDS","DAY_IN_SECONDS","MONTH_IN_SECONDS","YEAR_IN_SECONDS","getTimePeriods","seconds","delta","Math","abs","timeLeft","years","months","days","hours","minutes","floor","HistoryTabs","useGetRounds","rounds","useSelector","state","predictions","Object","keys","reduce","accum","epoch","parseBigNumberObj","useGetSortedRounds","roundData","orderBy","values","useGetBetByEpoch","account","bets","ledgers","useIsHistoryPaneOpen","isHistoryPaneOpen","useIsChartPaneOpen","isChartPaneOpen","useGetCurrentEpoch","currentEpoch","useGetIntervalSeconds","intervalSeconds","useGetPredictionsStatus","status","useGetHistoryFilter","historyFilter","useGetBufferSeconds","bufferSeconds","useGetIsFetchingHistory","isFetchingHistory","useGetHistoryByAccount","history","useGetLastOraclePrice","lastOraclePrice","useMemo","ethers","BigNumber","from","useGetCurrentRoundLockTimestamp","currentRound","useGetCurrentRound","lockTimestamp","startTimestamp","useGetLatestOraclePrice","useState","price","setPrice","useLastUpdated","lastUpdated","refresh","setLastUpdated","useEffect","a","contract","getChainlinkOracleContract","latestAnswer","response","fetchPrice","usePollOraclePrice","dispatch","useAppDispatch","timer","setInterval","clearInterval","setLastOraclePrice","toJSON","usePollPredictions","useRef","useWeb3React","earliestEpoch","earliestRound","minBy","current","PredictionStatus","INITIAL","liveCurrentAndRecent","fetchRounds","fetchMarketData","epochRange","range","fetchLedgerData","epochs","fetchClaimableStatuses","POLL_TIME_IN_SECONDS","Container","styled","div","theme","colors","gradients","violetAlt","bounceInKeyframe","keyframes","bounceOutKeyframe","bounceInAnimation","css","bounceOutAnimation","Wrapper","mediaQueries","md","Popup","secondary","CollectWinningsPopup","isOpen","setIsOpen","t","useTranslation","ref","predictionStatus","isCancelled","getBetHistory","user","toLowerCase","claimed","winnerBets","filter","bet","position","round","length","CSSTransition","in","unmountOnExit","nodeRef","timeout","classNames","width","style","flex","mr","onClick","setHistoryPaneState","variant","color","SwiperContext","createContext","undefined","SwiperProvider","children","swiper","setSwiper","Provider","value","destroySwiper","destroy","tradingViewListener","Promise","resolve","defineProperty","window","configurable","set","this","tv","initializeTradingView","TradingViewObj","localeCode","widget","autosize","height","symbol","interval","timezone","isDark","locale","toolbar_bg","enable_publishing","allow_symbol_change","container_id","TradingView","currentLanguage","useTheme","code","then","overflow","className","id","CardWrapper","BunnyDecoration","Notification","title","src","alt","mb","ErrorNotification","as","PauseNotification","formatUsd","usd","formatNumber","formatBnb","bnb","toLocaleString","minimumFractionDigits","maximumFractionDigits","getMultiplier","total","amount","getPayout","rewardRate","bullAmount","bearAmount","totalAmount","multiplier","BetPosition","BULL","getNetPayout","payout","Modal","ModalContainer","CollectRoundWinningsModal","betAmount","onDismiss","onSuccess","isPendingTx","setIsPendingTx","useToast","toastSuccess","toastError","callWithGasPrice","useCallWithGasPrice","predictionsContract","usePredictionsContract","bnbBusdPrice","usePriceBnbBusd","payoutAsFloat","parseFloat","betAmountAsFloat","handleClick","tx","wait","receipt","transactionHash","href","getBscScanLink","console","error","data","message","minWidth","mt","p","mx","alignItems","justifyContent","textAlign","toFixed","fontSize","times","toFormat","isLoading","endIcon","spin","CollectWinningsButton","hasClaimed","props","useModal","onPresentCollectWinningsModal","disabled","ReclaimPositionButton","handleReclaim","formatUsdv2","formatBigNumberToFixed","formatBnbv2","padTime","num","toString","padStart","formatRoundTime","secondsBetweenBlocks","minutesSeconds","getHasRoundFailed","buffer","closeTimestampMs","closeTimestamp","now","Date","oracleCalled","getMultiplierv2","FixedNumber","eq","rewardAmountFixed","multiplierAmountFixed","divUnsafe","getNetPayoutv2","ledger","rewardAmount","amountFixed","formatBigNumber","mulUnsafe","getPayoutv2","subUnsafe","getPriceDifference","lockPrice","sub","StyledTag","Flex","bg","Tag","startIcon","icon","borderRadius","py","px","cursor","textTransform","ml","PositionTag","betPosition","isUpPosition","getPrizePoolAmount","Row","PrizePoolRow","bold","PayoutRow","positionLabel","formattedMultiplier","lineHeight","LockPriceRow","Background","Box","isNext","isLive","hasEntered","success","BEAR","failure","cardBorder","StyledRoundResultBox","card","background","RoundResultBox","getPrizePoolAmountHistory","PrizePoolHistoryRow","LockPriceHistoryRow","RoundResult","hasFailed","closePrice","HOUSE","gt","getBetPosition","isPositionUp","priceDifference","my","failed","useIsRefundable","isRefundable","setIsRefundable","getPredictionsContract","refundable","fetchRefundableStatus","StyledBetResult","textDisabled","Divider","hr","BetResult","result","canClaim","useTooltip","fee","placement","targetRef","tooltip","tooltipVisible","isWinner","Result","WIN","REWARD_RATE","returned","getHeaderColor","LOSE","CANCELED","handleSuccess","markBetHistoryAsCollected","betId","getHeaderText","getHeaderIcon","claimedHash","getResultColor","toNumber","StyledBetDetails","dropdown","BetDetails","bullMultiplier","bearMultiplier","LIVE","RoundResultHistory","lockBlock","external","closeBlock","StyledBet","attrs","YourResult","HistoricalBet","roundResult","getRoundResult","resultTextColor","getRoundColor","resultTextPrefix","isOpenRound","isLiveRound","role","scale","Filter","label","StyledHeader","bubblegum","ButtonMenuContainer","getClaimParam","HistoryFilter","COLLECTED","UNCOLLECTED","ALL","Header","activeTab","setActiveTab","handleChange","newFilter","fetchHistory","setHistoryFilter","switchTab","tabIndex","size","activeIndex","onItemClick","ROUNDS","checked","onChange","RoundsTab","hasBetHistory","map","DrawAnimation","OffsetAnimation","offset","SVG","svg","DefaultSlice","circle","LostSlice","WonSlice","Info","CIRCUMFERENCE","PnlChart","lost","won","percentageWon","paintLost","paintWon","viewBox","r","cx","cy","small","summaryTypeColors","entered","summaryTypeSigns","SummaryRow","type","summary","roundsInPercents","typeTranslationKey","charAt","toUpperCase","slice","displayAmount","flexDirection","toLocaleLowerCase","backgroundDisabled","initialPnlSummary","bestRound","PnlTab","getPnlSummary","netResultAmount","netResultIsPositive","avgPositionEntered","avgBnbWonPerRound","avgBnbWonIsPositive","hasBestRound","pb","pl","roundId","StyledHistory","BetWrapper","SpinnerWrapper","History","results","getUnclaimedWinningBets","activeTabComponent","PNL","ConnectWalletButton","RoundMultiplierDownArrow","isActive","fill","d","x","y","filterUnits","colorInterpolationFilters","floodOpacity","mode","in2","stdDeviation","operator","k2","k3","RoundMultiplierUpArrow","EnteredTag","whiteSpace","fontWeight","outline","ArrowWrapper","Content","EnteredTagWrapper","getTextColor","fallback","isDisabled","MultiplierArrow","upColor","downColor","textColor","multiplierText","getEnteredTag","bottom","right","top","left","HEADER_HEIGHT","getBorderBackground","gradientStopPoint","cardHeader","warning","getTextColorByStatus","StyledCardHeader","getBackgroundColor","Round","CardHeader","isBottom","CollectWinningsOverlay","claimableStatuses","useGetIsClaimable","CanceledRoundCard","borderBackground","CalculatingCard","hasEnteredUp","hasEnteredDown","StyledExpiredRoundCard","Card","ExpiredRoundCard","hasClaimedUp","hasClaimedDown","formattedPayout","toUnsafeFloat","hasRoundFailed","RoundProgress","startMs","endMs","rawProgress","progress","primaryStep","LiveRoundCard","isBull","priceColor","priceAsNumber","useCountUp","start","end","duration","decimals","countUp","update","updateRef","minHeight","Front","Back","Inner","isFlipped","StyledCardFlip","CardFlip","Error","getComponents","front","back","useSwiper","swiperContext","useContext","FlexRow","dust","parseUnits","percentShortcuts","getValueAsEthersBn","valueAsFloat","Number","isNaN","SetPositionCard","togglePosition","onBack","setValue","isTxPending","setIsTxPending","errorMessage","setErrorMessage","percent","setPercent","bnbBalance","useGetBnbBalance","balance","minBetAmount","useGetMinBetAmount","bnbBalanceAsBn","maxBalance","balanceDisplay","valueAsBn","showFieldWarning","handlePercentChange","sliderPercent","maxValueAsFn","hundredAsFn","sliderPercentAsFn","balancePercentage","formatFixedNumber","minBetAmountBalance","lte","key","lt","getButtonProps","handleEnterPosition","betMethod","inputAmount","token","onMouseOver","keyboard","disable","mousewheel","detachEvents","onMouseOut","enable","attachEvents","onUserInput","input","inputAsBn","inputAsFn","percentageAsFloat","isWarning","inputProps","name","min","max","onValueChanged","valueLabel","step","percentShortcut","OpenRoundCard","isSettingPosition","setState","isBufferPhase","ROUND_BUFFER","positionDisplay","canEnterPosition","handleBack","prevState","handleSetPosition","newPosition","getNow","useCountdown","timestamp","secondsRemaining","setSecondsRemaining","isPaused","setIsPaused","isWindowVisible","useIsWindowVisible","pause","useCallback","unpause","setTimeout","prevSecondsRemaining","clearTimeout","SoonRoundCard","countdown","RoundCard","formattedBullMultiplier","isZero","formattedBearMultiplier","Token","lg","Title","Text","Price","Interval","Label","shadows","level1","dir","radii","PricePairLabel","display","TimerLabel","unit","currentRoundLockTimestamp","pr","StyledPrevNextNav","default","Icon","PrevNextNav","slidePrev","currentEpochIndex","findIndex","slideTo","slideNext","HistoryButton","SetCol","HelpButtonWrapper","TimerLabelWrapper","HistoryButtonWrapper","Menu","target","rel","useOnNextRound","previousEpoch","usePreviousValue","useOnViewChange","liveSwiperIndex","view","prevView","usePrevious","SwiperCore","use","Keyboard","Mousewheel","PageView","StyledSwiper","Positions","previousRound","find","swiperIndex","indexOf","initialSlide","onSwiper","spaceBetween","slidesPerView","freeMode","freeModeSticky","centeredSlides","freeModeMomentumRatio","freeModeMomentumVelocityRatio","resizeObserver","ExpandChartButton","Button","text","SplitWrapper","ChartPane","HistoryPane","StyledDesktop","PositionPane","Gutter","textSubtle","Desktop","splitWrapperRef","chartRef","gutterRef","handleDrag","debounce","getBoundingClientRect","setChartPaneState","split","Split","dragInterval","snapOffset","onDrag","rowGutters","track","element","newChartPaneState","transition","gridTemplateRows","delay","ERROR","PAUSED","ButtonNav","TabNav","StyledMobileMenu","MobileMenu","isHistoryOpen","isChartOpen","getActiveIndex","index","MenuWrapper","ChartWrapper","Chart","StyledMobile","xl","View","isVisible","Mobile","HISTORY","CHART","POSITIONS","getView","GradientModalHeader","ModalHeader","RiskDisclaimer","acknowledgeRisk","setAcknowledgeRisk","acknowledgeBeta","setAcknowledgeBeta","maxWidth","maxHeight","overflowY","htmlFor","marginBottom","CHART_LOCAL_STORAGE_KEY","Ul","ul","ChartDisclaimer","usePersistState","localStorageKey","doNotShow","setDoNowShow","Predictions","isDesktop","useMatchBreakpoints","hasAcceptedRisk","setHasAcceptedRisk","initialBlock","useInitialBlock","onPresentRiskDisclaimer","onPresentChartDisclaimer","onPresentRiskDisclaimerRef","onPresentChartDisclaimerRef","JSON","parse","localStorage","getItem","initializePredictions","PageLoader"],"mappings":"8HAAA,IACMA,EAAkB,KAClBC,EAAiB,MACjBC,EAAmB,QACnBC,EAAkB,SAgDTC,IAzCQ,SAACC,GACtB,IAAIC,EAAQC,KAAKC,IAAIH,GACfI,EAAW,CACfC,MAAO,EACPC,OAAQ,EACRC,KAAM,EACNC,MAAO,EACPC,QAAS,EACTT,QAAS,GA8BX,OA3BIC,GAASH,IACXM,EAASC,MAAQH,KAAKQ,MAAMT,EAAQH,GACpCG,GAASG,EAASC,MAAQP,GAGxBG,GAASJ,IACXO,EAASE,OAASJ,KAAKQ,MAAMT,EAAQJ,GACrCI,GAASG,EAASE,OAAST,GAGzBI,GAASL,IACXQ,EAASG,KAAOL,KAAKQ,MAAMT,EAAQL,GACnCK,GAASG,EAASG,KAAOX,GAGvBK,GAASN,IACXS,EAASI,MAAQN,KAAKQ,MAAMT,EAAQN,GACpCM,GAASG,EAASI,MAAQb,GAGxBM,GA1CoB,KA2CtBG,EAASK,QAAUP,KAAKQ,MAAMT,EA3CR,IA4CtBA,GA5CsB,GA4CbG,EAASK,SAGpBL,EAASJ,QAAUC,EAEZG,I,2FCYGO,E,+FCtDCC,EAAe,WAC1B,IAAMC,EAASC,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYH,UAC/D,OAAOI,OAAOC,KAAKL,GAAQM,QAAO,SAACC,EAAOC,GACxC,OAAO,2BACFD,GADL,kBAEGC,EAAQC,YAA6CT,EAAOQ,QAE9D,KAQQE,EAAqB,WAChC,IAAMC,EAAYZ,IAClB,OAAOa,kBAAQR,OAAOS,OAAOF,GAAY,CAAC,SAAU,CAAC,SAG1CG,EAAmB,SAACC,EAAiBP,GAChD,IAAMQ,EAAOf,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYc,WAE7D,OAAKD,EAAKD,IAILC,EAAKD,GAASP,GAIZC,YAA+CO,EAAKD,GAASP,IAP3D,MAyBEU,EAAuB,WAClC,OAAOjB,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYgB,sBAG5CC,EAAqB,WAChC,OAAOnB,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYkB,oBAG5CC,EAAqB,WAChC,OAAOrB,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYoB,iBAG5CC,EAAwB,WACnC,OAAOvB,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYsB,oBAS5CC,EAA0B,WACrC,OAAOzB,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYwB,WAG5CC,EAAsB,WACjC,OAAO3B,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAY0B,kBAQ5CC,EAAsB,WACjC,OAAO7B,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAY4B,kBAG5CC,EAA0B,WACrC,OAAO/B,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAY8B,sBAO5CC,EAAyB,SAACnB,GACrC,IAAMC,EAJCf,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYgC,WAKvD,OAAOnB,EAAOA,EAAKD,GAAW,IAGnBqB,EAAwB,WACnC,IAAMC,EAAkBpC,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAYkC,mBACxE,OAAOC,mBAAQ,WACb,OAAOC,IAAOC,UAAUC,KAAKJ,KAC5B,CAACA,KAMOK,EAAkC,WAC7C,IAAMC,EA/C0B,WAChC,IAAMpB,EAAeD,IAErB,OADevB,IACDwB,GA4COqB,GACfnB,EAAkBD,IAExB,OAAKmB,EAAaE,cAIXF,EAAaE,cAHXF,EAAaG,eAAiBrB,G,+FCrG1BsB,GAjBiB,WAC9B,MAA0BC,mBAAST,IAAOC,UAAUC,KAAK,IAAzD,mBAAOQ,EAAP,KAAcC,EAAd,KACA,EAAiDC,eAAzCC,EAAR,EAAQA,YAA6BC,EAArC,EAAqBC,eAYrB,OAVAC,qBAAU,YACQ,yCAAG,+BAAAC,EAAA,6DACXC,EAAWC,eADA,SAEMD,EAASE,eAFf,OAEXC,EAFW,OAGjBV,EAASU,GAHQ,2CAAH,qDAMhBC,KACC,CAACT,EAAaF,IAEV,CAAED,QAAOG,cAAaC,YCQhBS,GAtBY,WAAmB,IAAlB3E,EAAiB,uDAAP,GACpC,EAA2B4D,KAAnBE,EAAR,EAAQA,MAAOI,EAAf,EAAeA,QACTU,EAAWC,cAGjBT,qBAAU,WACRF,IACA,IAAMY,EAAQC,aAAY,WACxBb,MACW,IAAVlE,GAEH,OAAO,WACLgF,cAAcF,MAEf,CAAC9E,EAASkE,IAGbE,qBAAU,WACRQ,EAASK,aAAmBnB,EAAMoB,aACjC,CAACpB,EAAOc,KCuBEO,GArCY,WACzB,IAAML,EAAQM,iBAAuB,MAC/BR,EAAWC,cACTjD,EAAYyD,cAAZzD,QACFQ,EAAeD,IACfmD,EHmCCxE,aAAY,SAACC,GAClB,IAAMwE,EAAgBC,gBAAMvE,OAAOS,OAAOX,EAAMC,YAAYH,QAAS,SACrE,cAAO0E,QAAP,IAAOA,OAAP,EAAOA,EAAelE,SGpClBmB,EAASD,IAEf6B,qBAAU,WAqBR,OAnBIU,EAAMW,SACRT,cAAcF,EAAMW,SAGlBjD,IAAWkD,KAAiBC,UAC9Bb,EAAMW,QAAUV,YAAW,wBAAC,+BAAAV,EAAA,sDACpBuB,EAAuB,CAACxD,EAAcA,EAAe,EAAGA,EAAe,GAE7EwC,EAASiB,aAAYD,IACrBhB,EAASkB,gBAELlE,IACImE,EAAaC,gBAAMV,EAAelD,EAAe,GACvDwC,EAASqB,aAAgB,CAAErE,UAASsE,OAAQH,KAC5CnB,EAASuB,aAAuB,CAAEvE,UAASsE,OAAQH,MAT3B,2CAWzBK,MAGE,WACDtB,EAAMW,SACRT,cAAcF,EAAMW,YAGvB,CAACX,EAAOlD,EAASY,EAAQJ,EAAckD,EAAeV,K,iBClC5CyB,GARGC,KAAOC,IAAV,+JACC,qBAAGC,MAAkBC,OAAOC,UAAUC,a,4BCWhDC,GAAmBC,aAAH,ggBAgChBC,GAAoBD,aAAH,sRAiBjBE,GAAoBC,aAAH,kDACRJ,IAGTK,GAAqBD,aAAH,kDACTF,IAGTI,GAAUZ,KAAOC,IAAV,4iBAcPQ,GAYAE,IAGF,qBAAGT,MAAkBW,aAAaC,MAUhCC,GAAQf,KAAOC,IAAV,uLAEW,qBAAGC,MAAkBC,OAAOa,aA6EnCC,GArEc,WAC3B,MAA4B1D,oBAAS,GAArC,mBAAO2D,EAAP,KAAeC,EAAf,KACQC,EAAMC,eAAND,EACFE,EAAMxC,iBAAO,MACbN,EAAQM,iBAAO,MACbxD,EAAYyD,cAAZzD,QACFiG,EAAmBtF,IACnBP,EAAoBD,IACpB6C,EAAWC,cA4CjB,OAhCAT,qBAAU,WACR,IAAI0D,GAAc,EAkBlB,OAjBIlG,IACFkD,EAAMW,QAAUV,YAAW,wBAAC,+BAAAV,EAAA,sEACP0D,YAAc,CAAEC,KAAMpG,EAAQqG,cAAeC,SAAS,IAD/C,OACpBrG,EADoB,OAGrBiG,IAEGK,EAAatG,EAAKuG,QAAO,SAACC,GAC9B,OAAOA,EAAIC,WAAaD,EAAIE,MAAMD,YAG/BtG,GACHyF,EAAUU,EAAWK,OAAS,IAVR,2CAazB,MAGE,WACLxD,cAAcF,EAAMW,SACpBqC,GAAc,KAEf,CAAClG,EAASkD,EAAO+C,EAAkBJ,EAAWzF,IAGjDoC,qBAAU,WACJpC,GACFyF,GAAU,KAEX,CAACzF,EAAmByF,IAGrB,eAACgB,GAAA,EAAD,CAAeC,GAAIlB,EAAQmB,eAAa,EAACC,QAAShB,EAAKiB,QAAS,IAAMC,WAAW,QAAjF,SACE,eAAC5B,GAAD,CAASU,IAAKA,EAAd,SACE,gBAACP,GAAD,WACE,eAAC,KAAD,CAAgB0B,MAAM,OAAOC,MAAO,CAAEC,KAAM,QAAUC,GAAG,QACzD,eAAC,IAAD,CAAQF,MAAO,CAAEC,KAAM,GAAKE,QA/CV,WACxBvE,EAASwE,cAAoB,KA8CvB,SACG1B,EAAE,sBAEL,eAAC,KAAD,CAAY2B,QAAQ,OAAOF,QA9Cf,WAClB1B,GAAU,GACVzC,cAAcF,EAAMW,UA4Cd,SACE,eAAC,IAAD,CAAW6D,MAAM,UAAUP,MAAM,mBC5KhCQ,GAAgBC,6BAAuBC,GAerCC,GAbQ,SAAC,GAAkB,IAAhBC,EAAe,EAAfA,SACxB,EAA4B9F,mBAAqB,MAAjD,mBAAO+F,EAAP,KAAeC,EAAf,KASA,OAAO,eAACN,GAAcO,SAAf,CAAwBC,MAAO,CAAEH,SAAQC,YAAWG,cAPrC,WAChBJ,IACFA,EAAOK,UACPJ,EAAU,SAIP,SAAsEF,K,sDCZzEO,GAAmB,yCAAG,uBAAA7F,EAAA,+EAC1B,IAAI8F,SAAc,SAACC,GAAD,OAChBnJ,OAAOoJ,eAAeC,OAAQ,cAAe,CAC3CC,cAAc,EACdC,IAF2C,SAEvCT,GACFU,KAAKC,GAAKX,EACVK,EAAQL,UANY,2CAAH,qDAWnBY,GAAwB,SAACC,EAAqBpE,EAAqBqE,GAIvE,IAAID,EAAeE,OAAO,CACxBC,UAAU,EACVC,OAAQ,OACRC,OAAQ,kBACRC,SAAU,IACVC,SAAU,UACV3E,MAAOA,EAAM4E,OAAS,OAAS,QAC/BpC,MAAO,IACPqC,OAAQR,EACRS,WAAY,UACZC,mBAAmB,EACnBC,qBAAqB,EACrBC,aAAc,uBA2BHC,GAvBK,WAClB,IAAQC,EAAoBhE,eAApBgE,gBACFnF,EAAQoF,eAcd,OAZAxH,qBAAU,WAEJkG,OAAOoB,YAETf,GAAsBL,OAAOoB,YAAalF,EAAOmF,EAAgBE,MAEjE3B,KAAsB4B,MAAK,SAACpB,GAC1BC,GAAsBD,EAAIlE,EAAOmF,EAAgBE,WAGpD,CAACrF,EAAOmF,IAGT,eAAC,IAAD,CAAKI,SAAS,SAASC,UAAU,wBAAjC,SACE,sBAAKC,GAAG,yBC1CR/E,GAAUZ,KAAOC,IAAV,gIAQP2F,GAAc5F,KAAOC,IAAV,qEAKX4F,GAAkB7F,KAAOC,IAAV,wIA2BN6F,GAlBmC,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAO1C,EAAe,EAAfA,SAC1D,OACE,eAAC,GAAD,UACE,gBAACuC,GAAD,WACE,eAACC,GAAD,UACE,sBAAKG,IAAI,uCAAuCC,IAAI,mBAAmBvB,OAAO,QAAQjC,MAAM,YAE9F,eAAC,IAAD,UACE,gBAAC,IAAD,WACE,eAAC,IAAD,CAASyD,GAAG,OAAZ,SAAoBH,IACnB1C,aCtBE8C,GAnBW,WACxB,IAAQ/E,EAAMC,eAAND,EACF9C,EAAWC,cAKjB,OACE,gBAAC,GAAD,CAAcwH,MAAO3E,EAAE,SAAvB,UACE,eAAC,KAAD,CAAMgF,GAAG,IAAIF,GAAG,OAAhB,SACG9E,EAAE,0FAEL,eAAC,IAAD,CAAQ2B,QAAQ,UAAUN,MAAM,OAAOI,QARjB,WACxBvE,EAASwE,cAAoB,KAO3B,SACG1B,EAAE,sBCWIiF,GAxBW,WACxB,IAAQjF,EAAMC,eAAND,EACF9C,EAAWC,cAMjB,OACE,gBAAC,GAAD,CAAcwH,MAAO3E,EAAE,kBAAvB,UACE,gBAAC,IAAD,CAAK8E,GAAG,OAAR,UACE,eAAC,KAAD,CAAME,GAAG,IAAT,SAAchF,EAAE,0DAChB,eAAC,KAAD,CAAMgF,GAAG,IAAT,SAAchF,EAAE,4CAChB,eAAC,KAAD,CAAMgF,GAAG,IAAT,SACGhF,EAAE,oGAGP,eAAC,IAAD,CAAQ2B,QAAQ,UAAUN,MAAM,OAAOI,QAbjB,WACxBvE,EAASwE,cAAoB,KAY3B,SACG1B,EAAE,sB,6BCtBEkF,GAAY,SAACC,GACxB,MAAM,IAAN,OAAWC,aAAaD,GAAO,EAAG,EAAG,KAG1BE,GAAY,SAACC,GACxB,OAAOA,EAAMA,EAAIC,oBAAexD,EAAW,CAAEyD,sBAAuB,EAAGC,sBAAuB,IAAO,KAG1FC,GAAgB,SAACC,EAAeC,GAC3C,OAAc,IAAVD,GAA0B,IAAXC,EACV,EAGFD,EAAQC,GAMJC,GAAY,SAAClF,GAA8B,IAApBmF,EAAmB,uDAAN,EAC/C,IAAKnF,IAAQA,EAAIE,MACf,OAAO,EAGT,MAAgDF,EAAIE,MAA5CkF,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,YAC1BC,EAAaR,GAAcO,EAAatF,EAAIC,WAAauF,KAAYC,KAAOL,EAAaC,GAC/F,OAAOrF,EAAIiF,OAASM,EAAaJ,GAGtBO,GAAe,SAAC1F,GAAsC,IAA5BmF,EAA2B,uDAAd,EAClD,IAAKnF,IAAQA,EAAIE,MACf,OAAO,EAGT,IAAMyF,EAAST,GAAUlF,EAAKmF,GAC9B,OAAOQ,EAAS3F,EAAIiF,Q,yDCHhBW,GAAQ3H,aAAO4H,KAAP5H,CAAH,mDAIL6F,GAAkB7F,KAAOC,IAAV,kKA8GN4H,GAtG6D,SAAC,GAMtE,IALLH,EAKI,EALJA,OACAI,EAII,EAJJA,UACA/M,EAGI,EAHJA,MACAgN,EAEI,EAFJA,UACAC,EACI,EADJA,UAEA,EAAsCzK,oBAAS,GAA/C,mBAAO0K,EAAP,KAAoBC,EAApB,KACQ5M,EAAYyD,cAAZzD,QACA8F,EAAMC,eAAND,EACR,EAAqC+G,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WACdC,EAAqBC,eAArBD,iBACFE,EAAsBC,eACtBC,EAAeC,eACfrK,EAAWC,cAGXqK,EAAgBC,WAAWnB,GAC3BoB,EAAmBD,WAAWf,GAE9BiB,EAAW,yCAAG,iCAAAhL,EAAA,+EAECuK,EAAiBE,EAAqB,QAAS,CAAC,CAACzN,KAFlD,cAEViO,EAFU,OAGhBd,GAAe,GAHC,SAIMc,EAAGC,OAJT,UAIVC,EAJU,QAMZlB,EANY,kCAORA,IAPQ,yBAUV1J,EAASuB,aAAuB,CAAEvE,UAASsE,OAAQ,CAAC7E,MAV1C,QAWhBgN,IACAG,GAAe,GACfE,EACEhH,EAAE,uBACF,gBAAC,IAAD,WACE,eAAC,KAAD,CAAMgF,GAAG,IAAIF,GAAG,MAAhB,SACG9E,EAAE,+CAEJ8H,EAAQC,iBACP,eAAC,KAAD,CAAcC,KAAMC,aAAeH,EAAQC,gBAAiB,eAA5D,SACG/H,EAAE,yBArBK,kDA2BhBkI,QAAQC,MAAM,2BAAd,MACAlB,EACEjH,EAAE,UACF,2CAAOoI,YAAP,eAAaC,UAAWrI,EAAE,uFA9BZ,yBAiChB8G,GAAe,GAjCC,6EAAH,qDAqCjB,OACE,gBAACP,GAAD,CAAO+B,SAAS,QAAQ1H,SAAS,WAAW2H,GAAG,QAA/C,UACE,eAAC,GAAD,UACE,sBAAK3D,IAAI,sCAAsCC,IAAI,mBAAmBvB,OAAO,QAAQjC,MAAM,YAE7F,gBAAC,KAAD,WACE,eAAC,KAAD,UACE,eAAC,IAAD,UAAUrB,EAAE,wBAEd,eAAC,KAAD,CAAkB2G,UAAWA,OAE/B,gBAAC,KAAD,CAAW6B,EAAE,OAAb,UACE,eAAC,KAAD,CAAgBnH,MAAM,OAAOoH,GAAG,OAAO3D,GAAG,SAC1C,gBAAC,IAAD,CAAM4D,WAAW,QAAQC,eAAe,gBAAgB7D,GAAG,MAA3D,UACE,eAAC,KAAD,UAAO9E,EAAE,mBACT,gBAAC,IAAD,CAAKsB,MAAO,CAAEsH,UAAW,SAAzB,UACE,eAAC,KAAD,oBAAUlB,EAAiBmB,QAAQ,GAAnC,UACA,eAAC,KAAD,CAAMC,SAAS,OAAOlH,MAAM,aAA5B,qBACQ0F,EAAayB,MAAMrB,GAAkBsB,SAAS,YAI1D,gBAAC,IAAD,CAAMN,WAAW,QAAQC,eAAe,gBAAgB7D,GAAG,OAA3D,UACE,eAAC,KAAD,UAAO9E,EAAE,mBACT,gBAAC,IAAD,CAAKsB,MAAO,CAAEsH,UAAW,SAAzB,UACE,eAAC,KAAD,oBAAUtC,EAAV,UACA,eAAC,KAAD,CAAMwC,SAAS,OAAOlH,MAAM,aAA5B,qBACQ0F,EAAayB,MAAMvB,GAAewB,SAAS,YAIvD,eAAC,IAAD,CACE3H,MAAM,OACNyD,GAAG,MACHrD,QAASkG,EACTsB,UAAWpC,EACXqC,QAASrC,EAAc,eAAC,IAAD,CAAesC,MAAI,EAACvH,MAAM,iBAAoB,KALvE,SAOG5B,EAAE,oB,sEC7GEoJ,GArBqD,SAAC,GAQ9D,IAPL9C,EAOI,EAPJA,OACAI,EAMI,EANJA,UACA/M,EAKI,EALJA,MACA0P,EAII,EAJJA,WACAzC,EAGI,EAHJA,UACA3E,EAEI,EAFJA,SACGqH,EACC,mBACJ,EAAwCC,aACtC,eAAC,GAAD,CAA2BjD,OAAQA,EAAQI,UAAWA,EAAW/M,MAAOA,EAAOiN,UAAWA,KAC1F,GAFK4C,EAAP,oBAKA,OACE,eAAC,IAAD,yBAAQ/H,QAAS+H,EAA+BC,SAAUJ,GAAgBC,GAA1E,aACGrH,M,oCCqBQyH,GApCqD,SAAC,GAA8C,IAA5C/P,EAA2C,EAA3CA,MAAOiN,EAAoC,EAApCA,UAAW3E,EAAyB,EAAzBA,SAAaqH,EAAY,mBAChH,EAAsCnN,oBAAS,GAA/C,mBAAO0K,EAAP,KAAoBC,EAApB,KACQ9G,EAAMC,eAAND,EACFoH,EAAsBC,eACpBH,EAAqBC,eAArBD,iBACR,EAAqCH,eAA7BC,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,WAEhB0C,EAAa,yCAAG,6BAAAhN,EAAA,sEACHuK,EAAiBE,EAAqB,QAAS,CAAC,CAACzN,KAD9C,cACdiO,EADc,OAEpBd,GAAe,GAFK,SAIEc,EAAGC,OAJL,kBAKR/M,OALQ,qBAMd8L,EANc,kCAOVA,IAPU,QASlBE,GAAe,GACfE,EAAahH,EAAE,wBAVG,wBAYlB8G,GAAe,GACfG,EAAWjH,EAAE,SAAUA,EAAE,uFAbP,4CAAH,qDAiBnB,OACE,eAAC,IAAD,yBACEyB,QAASkI,EACTV,UAAWpC,EACXqC,QAASrC,EAAc,eAAC,IAAD,CAAesC,MAAI,EAACvH,MAAM,UAAa,MAC1D0H,GAJN,aAMGrH,GAAYjC,EAAE,wB,WCvCR4J,GAAc,SAACzE,GAC1B,MAAM,IAAN,OAAW0E,aAAuB1E,EAAK,EAAG,KAG/B2E,GAAc,SAACxE,GAC1B,IAAMjD,EAAQiD,GAAO5J,IAAOC,UAAUC,KAAK,GAC3C,OAAOiO,aAAuBxH,EAAO,IAG1B0H,GAAU,SAACC,GAAD,OAAiBA,EAAIC,WAAWC,SAAS,EAAG,MAEtDC,GAAkB,SAACC,GAC9B,MAAoC/R,aAAe+R,GAA3CtR,EAAR,EAAQA,MAAOC,EAAf,EAAeA,QAAST,EAAxB,EAAwBA,QAClB+R,EAAc,UAAMN,GAAQhR,GAAd,YAA0BgR,GAAQzR,IAEtD,OAAIQ,EAAQ,EACJ,GAAN,OAAUiR,GAAQjR,GAAlB,YAA4BuR,GAGvBA,GAGIC,GAAoB,SAACzJ,EAAkB0J,GAClD,IAAMC,EAAqD,KAAjC3J,EAAM4J,eAAiBF,GAC3CG,EAAMC,KAAKD,MAEjB,OAAyB,OAArBF,GAA6BE,EAAMF,IAAqB3J,EAAM+J,cAOvDC,GAAkB,SAAClF,EAAyBC,GACvD,IAAKD,EACH,OAAOjK,IAAOoP,YAAYlP,KAAK,GAGjC,GAAI+J,EAAMoF,GAAG,IAAMnF,EAAOmF,GAAG,GAC3B,OAAOrP,IAAOoP,YAAYlP,KAAK,GAGjC,IAAMoP,EAAoBtP,IAAOoP,YAAYlP,KAAK+J,GAC5CsF,EAAwBvP,IAAOoP,YAAYlP,KAAKgK,GAEtD,OAAOoF,EAAkBE,UAAUD,IAgBxBE,GAAiB,SAACC,EAAoBvK,GACjD,IAAKuK,IAAWvK,EACd,OAAOnF,IAAOoP,YAAYlP,KAAK,GAGjC,IAAM0K,EAlBmB,SAAC8E,EAAoBvK,GAC9C,IAAKuK,IAAWvK,EACd,OAAOnF,IAAOoP,YAAYlP,KAAK,GAGjC,IAAQmK,EAAyClF,EAAzCkF,WAAYC,EAA6BnF,EAA7BmF,WAAYqF,EAAiBxK,EAAjBwK,aACxBzF,EAAqBwF,EAArBxF,OAAQhF,EAAawK,EAAbxK,SAEV0K,EAAc5P,IAAOoP,YAAYlP,KAAK2P,aAAgB3F,IACtDM,EAAa2E,GAAgBQ,EAAczK,IAAauF,KAAYC,KAAOL,EAAaC,GAC9F,OAAOsF,EAAYE,UAAUtF,GAQduF,CAAYL,EAAQvK,GAC7B+E,EAASlK,IAAOoP,YAAYlP,KAAK2P,aAAgBH,EAAOxF,SAE9D,OAAOU,EAAOoF,UAAU9F,IAGb+F,GAAqB,SAACvP,EAAyBwP,GAC1D,OAAKxP,GAAUwP,EAIRxP,EAAMyP,IAAID,GAHRlQ,IAAOC,UAAUC,KAAK,I,yECrE3BkQ,GAAYlN,aAAOmN,IAAPnN,CAAH,gFACO,gBAAGoN,EAAH,EAAGA,GAAH,SAAOlN,MAAkBC,OAAOiN,MAIzCC,GAA0B,SAAC,GAAgE,IAAD,IAA7DD,UAA6D,MAAxD,UAAwD,EAA7CE,EAA6C,EAA7CA,UAAWjK,EAAkC,EAAlCA,SAAUR,EAAwB,EAAxBA,QAAY6H,EAAY,mBAC/F6C,EAAOD,GAAa,eAAC,IAAD,CAAatK,MAAM,UAE7C,OACE,gBAACkK,GAAD,yBACEpD,WAAW,SACXC,eAAe,SACfyD,aAAa,MACbJ,GAAIA,EACJK,GAAG,MACHC,GAAG,MACH7K,QAASA,EACTH,MAAO,CAAEiL,OAAQ9K,EAAU,UAAY,WACnC6H,GATN,cAWG6C,EACD,eAAC,KAAD,CAAMK,cAAc,YAAY5K,MAAM,QAAQ6K,GAAG,MAAjD,SACGxK,SAqBMyK,GAXiC,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,YAAa1K,EAAyB,EAAzBA,SAAaqH,EAAY,mBACjFsD,EAAeD,IAAgBxG,KAAYC,KAC3C+F,EAAOS,EAAe,eAAC,IAAD,CAAahL,MAAM,UAAa,eAAC,IAAD,CAAeA,MAAM,UAEjF,OACE,eAAC,GAAD,yBAAKoK,GAAIY,EAAe,UAAY,UAAWV,UAAWC,GAAU7C,GAApE,aACGrH,M,kLCnCD4K,GAAqB,SAAC5G,GAC1B,OAAKA,EAIE6D,GAAY7D,GAHV,KAML6G,GAAM,SAAC,GAA4B,IAA1B7K,EAAyB,EAAzBA,SAAaqH,EAAY,mBACtC,OACE,eAAC,IAAD,yBAAMZ,WAAW,SAASC,eAAe,iBAAoBW,GAA7D,aACGrH,MAKM8K,GAA4C,SAAC,GAA+B,IAA7B9G,EAA4B,EAA5BA,YAAgBqD,EAAY,mBAC9EtJ,EAAMC,eAAND,EAER,OACE,gBAAC,GAAD,2BAASsJ,GAAT,cACE,gBAAC,KAAD,CAAM0D,MAAI,EAAV,UAAYhN,EAAE,cAAd,OACA,eAAC,KAAD,CAAMgN,MAAI,EAAV,mBAAeH,GAAmB5G,GAAlC,eAYOgH,GAAsC,SAAC,GAAqD,IAAnDC,EAAkD,EAAlDA,cAAehH,EAAmC,EAAnCA,WAAYN,EAAuB,EAAvBA,OAAW0D,EAAY,mBAC9FtJ,EAAMC,eAAND,EACFmN,EAAmB,UAAMjH,EAAWX,oBAAexD,EAAW,CAAE0D,sBAAuB,IAApE,KAEzB,OACE,gBAAC,GAAD,yBAAKnC,OAAO,QAAWgG,GAAvB,cACE,gBAAC,KAAD,CAAMR,SAAS,OAAO0D,cAAc,YAApC,UACGU,EADH,OAGA,gBAAC,IAAD,CAAMxE,WAAW,SAAjB,UACE,eAAC,KAAD,CAAMI,SAAS,OAAOsE,WAAW,OAAOJ,MAAI,EAA5C,SACGhN,EAAE,sBAAuB,CAAEkG,WAAYiH,MAE1C,eAAC,KAAD,CAAM1E,GAAG,MAAT,eACA,eAAC,KAAD,CAAMK,SAAS,OAAOsE,WAAW,OAAjC,mBAA4C/H,GAAUO,GAAtD,kBAUKyH,GAA4C,SAAC,GAA6B,IAA3BzB,EAA0B,EAA1BA,UAActC,EAAY,mBAC5EtJ,EAAMC,eAAND,EAER,OACE,gBAAC,GAAD,2BAASsJ,GAAT,cACE,gBAAC,KAAD,CAAMR,SAAS,OAAf,UAAuB9I,EAAE,gBAAzB,OACA,eAAC,KAAD,CAAM8I,SAAS,OAAf,SAAuBc,GAAYgC,UAuCnC0B,GAAa1O,aAAO2O,IAAP3O,CAAH,0FA1BW,SAAC,GAM0B,IALpDE,EAKmD,EALnDA,MACA6N,EAImD,EAJnDA,YACAa,EAGmD,EAHnDA,OACAC,EAEmD,EAFnDA,OACAC,EACmD,EADnDA,WAEA,OAAIF,EACK,oDAGLE,GAAcD,EACT3O,EAAMC,OAAOa,UAGlB+M,IAAgBxG,KAAYC,KACvBtH,EAAMC,OAAO4O,QAGlBhB,IAAgBxG,KAAYyH,KACvB9O,EAAMC,OAAO8O,QAGf/O,EAAMC,OAAO+O,cAShBC,GAAuBnP,KAAOC,IAAV,2FACV,qBAAGC,MAAkBkP,KAAKC,cAK7BC,GAAgD,SAAC,GAMvD,IAAD,IALJV,cAKI,aAJJE,kBAII,aAHJD,cAGI,SAFJxL,EAEI,EAFJA,SACGqH,EACC,mBACJ,OACE,eAACgE,GAAD,yBAAYE,OAAQA,EAAQE,WAAYA,EAAYD,OAAQA,GAAYnE,GAAxE,aACE,eAACyE,GAAD,UAAuB9L,QAcvBkM,GAA4B,SAAClI,GACjC,OAAKA,EAIEZ,GAAUY,GAHR,KAMEmI,GAA0D,SAAC,GAA+B,IAA7BnI,EAA4B,EAA5BA,YAAgBqD,EAAY,mBAC5FtJ,EAAMC,eAAND,EAER,OACE,gBAAC,GAAD,2BAASsJ,GAAT,cACE,gBAAC,KAAD,CAAM0D,MAAI,EAAV,UAAYhN,EAAE,cAAd,OACA,eAAC,KAAD,CAAMgN,MAAI,EAAV,mBAAemB,GAA0BlI,GAAzC,eASOoI,GAA0D,SAAC,GAA6B,IAA3BzC,EAA0B,EAA1BA,UAActC,EAAY,mBAC1FtJ,EAAMC,eAAND,EAER,OACE,gBAAC,GAAD,2BAASsJ,GAAT,cACE,gBAAC,KAAD,CAAMR,SAAS,OAAf,UAAuB9I,EAAE,gBAAzB,OACA,eAAC,KAAD,CAAM8I,SAAS,OAAf,SAAuB5D,GAAU0G,U,oCCvHxB0C,GAnCiC,SAAC,GAAsD,IAApDzN,EAAmD,EAAnDA,MAAmD,IAA5C0N,iBAA4C,SAAzBtM,EAAyB,EAAzBA,SAAaqH,EAAY,mBAC5FsC,EAAuC/K,EAAvC+K,UAAW4C,EAA4B3N,EAA5B2N,WAAYvI,EAAgBpF,EAAhBoF,YACzB0G,EAde,SAAC6B,EAA8B5C,GACpD,OAAK4C,EAIDA,EAAWzD,GAAGa,GACTzF,KAAYsI,MAGdD,EAAWE,GAAG9C,GAAazF,KAAYC,KAAOD,KAAYyH,KAPxD,KAYWe,CAAeH,EAAY5C,GACzCgD,EAAejC,IAAgBxG,KAAYC,KACzCpG,EAAMC,eAAND,EACF6O,EAAkBlD,GAAmB6C,EAAY5C,GAEvD,OACE,gBAAC,GAAD,yBAAgBe,YAAaA,GAAiBrD,GAA9C,cACE,eAAC,KAAD,CAAM1H,MAAM,aAAakH,SAAS,OAAOkE,MAAI,EAACR,cAAc,YAAY1H,GAAG,MAA3E,SACG9E,EAAE,kBAEJuO,EACC,eAAC,KAAD,CAAMvB,MAAI,EAACR,cAAc,YAAY5K,MAAM,eAAekD,GAAG,OAAOgE,SAAS,OAA7E,SACG9I,EAAE,cAGL,gBAAC,IAAD,CAAM0I,WAAW,SAASC,eAAe,gBAAgB7D,GAAG,OAA5D,UACG0J,EACC,eAAC,KAAD,CAAM5M,MAAOgN,EAAe,UAAY,UAAW5B,MAAI,EAAClE,SAAS,OAAjE,SACGc,GAAY4E,KAGf,eAAC,KAAD,CAAUlL,OAAO,OAAOwL,GAAG,QAE7B,eAAC,GAAD,CAAanC,YAAaA,EAA1B,SAAwC/C,GAAYiF,QAGvDjD,GAAa,eAAC,GAAD,CAAcA,UAAWA,IACvC,eAAC,GAAD,CAAc3F,YAAaA,IAC1BhE,O,wBCbQqM,GA/BiC,SAAC,GAAmC,IAAjCzN,EAAgC,EAAhCA,MAAOoB,EAAyB,EAAzBA,SAAaqH,EAAY,mBACzEsC,EAAuC/K,EAAvC+K,UAAW4C,EAA4B3N,EAA5B2N,WAAYvI,EAAgBpF,EAAhBoF,YACzB0G,EAAc6B,EAAa5C,EAAYzF,KAAYC,KAAOD,KAAYyH,KACtEgB,EAAejC,IAAgBxG,KAAYC,KACzCpG,EAAMC,eAAND,EACF6O,EAAkBL,EAAa5C,EAErC,OACE,gBAAC,GAAD,yBAAgBe,YAAaA,GAAiBrD,GAA9C,cACE,eAAC,KAAD,CAAM1H,MAAM,aAAakH,SAAS,OAAOkE,MAAI,EAACR,cAAc,YAAY1H,GAAG,MAA3E,SACG9E,EAAE,kBAEJa,EAAMkO,OACL,eAAC,KAAD,CAAM/B,MAAI,EAACR,cAAc,YAAY5K,MAAM,eAAekD,GAAG,OAAOgE,SAAS,OAA7E,SACG9I,EAAE,cAGL,gBAAC,IAAD,CAAM0I,WAAW,SAASC,eAAe,gBAAgB7D,GAAG,OAA5D,UACE,eAAC,KAAD,CAAMlD,MAAOgN,EAAe,UAAY,UAAW5B,MAAI,EAAClE,SAAS,OAAjE,SACG5D,GAAUsJ,KAEb,eAAC,GAAD,CAAa7B,YAAaA,EAA1B,SAAwCzH,GAAU2J,QAGrDjD,GAAa,eAAC,GAAD,CAAqBA,UAAWA,IAC9C,eAAC,GAAD,CAAqB3F,YAAaA,IACjChE,OCRQ+M,GA1BS,SAACrV,GACvB,MAAwCwC,oBAAS,GAAjD,mBAAO8S,EAAP,KAAqBC,EAArB,KACQhV,EAAYyD,cAAZzD,QAqBR,OAnBAwC,qBAAU,WAcJxC,GAbuB,yCAAG,+BAAAyC,EAAA,6DACtByK,EAAsB+H,eADA,SAEH/H,EAAoBgI,WAAWzV,EAAOO,GAFnC,mDAMLkN,EAAoBgE,OAAOzR,EAAOO,GAN7B,OAMpBkR,EANoB,OAO1B8D,GAAmC,IAAnB9D,EAAO5K,SAPG,wBAS1B0O,GAAgB,GATU,4CAAH,oDAczBG,KAED,CAACnV,EAASP,EAAOuV,IAEb,CAAED,eAAcC,oBCJnBI,GAAkB1Q,aAAO2O,IAAP3O,CAAH,yHACC,qBAAGE,MAAkBC,OAAOwQ,gBAM5CC,GAAU5Q,KAAO6Q,GAAV,uDACS,qBAAG3Q,MAAkBC,OAAO+O,cAyJnC4B,GAtJ6B,SAAC,GAAqB,IAAnB/O,EAAkB,EAAlBA,IAAKgP,EAAa,EAAbA,OAC1C3P,EAAMC,eAAND,EACF9C,EAAWC,cACTjD,EAAYyD,cAAZzD,QACA+U,EAAiBD,GAAgBrO,EAAIE,MAAMlH,OAA3CsV,aACF3H,EAAeC,eACfqI,GAAYjP,EAAIH,SAAWG,EAAIC,WAAaD,EAAIE,MAAMD,SAC5D,EAA+CiP,aAC7C,eAAC,KAAD,CAAM7K,GAAG,IAAT,SAAchF,EAAE,0EAA2E,CAAE8P,IAAK,SAClG,CAAEC,UAAW,SAFPC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,eAKtBC,EAAWR,IAAWS,IAAOC,IAG7B/J,EAAS6J,EAAW9J,GAAa1F,EAAK2P,MAAe3P,EAAIiF,OACzD2K,EAAWjK,EAAS3F,EAAIiF,OAExB4K,EAAiB,WACrB,OAAQb,GACN,KAAKS,IAAOC,IACV,MAAO,UACT,KAAKD,IAAOK,KACV,MAAO,aACT,KAAKL,IAAOM,SACV,MAAO,eACT,QACE,MAAO,SAyCPC,EAAa,yCAAG,uBAAAhU,EAAA,sDAEpBO,EAAS0T,aAA0B,CAAE1W,UAAS2W,MAAOlQ,EAAI4D,MACzDrH,EAASqB,aAAgB,CAAErE,UAASsE,OAAQ,CAACmC,EAAIE,MAAMlH,UAHnC,2CAAH,qDAMnB,OACE,uCACE,gBAAC,IAAD,CAAM+O,WAAW,SAASC,eAAe,gBAAgB7D,GAAG,MAA5D,UACE,eAAC,IAAD,UAAU9E,EAAE,kBACZ,gBAAC,IAAD,CAAM0I,WAAW,SAAjB,UACE,eAAC,IAAD,CAAS1D,GAAG,KAAKpD,MAAO4O,IAAkBhE,cAAc,YAAYQ,MAAI,EAACxL,GAAG,MAA5E,SAhDc,WACpB,OAAQmO,GACN,KAAKS,IAAOC,IACV,OAAOrQ,EAAE,OACX,KAAKoQ,IAAOK,KACV,OAAOzQ,EAAE,QACX,KAAKoQ,IAAOM,SACV,OAAO1Q,EAAE,YACX,QACE,MAAO,IAwCF8Q,KApCW,WACpB,OAAQnB,GACN,KAAKS,IAAOC,IACV,OAAO,eAAC,KAAD,CAAWzO,MAAO4O,MAC3B,KAAKJ,IAAOK,KACZ,KAAKL,IAAOM,SACV,OAAO,eAAC,IAAD,CAAW9O,MAAO4O,MAC3B,QACE,OAAO,MA8BJO,SAGL,gBAACzB,GAAD,WACGK,IAAWS,IAAOC,MAAQT,GACzB,eAAC,GAAD,CACEtJ,OAAQjB,GAAUiB,GAClBI,UAAW/F,EAAIiF,OAAOqE,WACtBtQ,MAAOgH,EAAIE,MAAMlH,MACjB0P,YAAauG,EACbvO,MAAM,OACNyD,GAAG,OACH8B,UAAW+J,EAPb,SASGhQ,EAAIH,QAAUR,EAAE,qBAAuBA,EAAE,sBAG7CW,EAAIH,SACH,eAAC,IAAD,CAAMmI,eAAe,SAArB,SACE,eAAC,KAAD,CAAcX,KAAMC,aAAetH,EAAIqQ,YAAa,eAAgBlM,GAAG,OAAvE,SACG9E,EAAE,uBAIR2P,IAAWS,IAAOM,UAAYzB,GAC7B,eAAC,GAAD,CAAuBtV,MAAOgH,EAAIE,MAAMlH,MAAO0H,MAAM,OAAOyD,GAAG,SAEjE,gBAAC,IAAD,CAAM4D,WAAW,SAASC,eAAe,gBAAgB7D,GAAG,OAA5D,UACE,gBAAC,KAAD,WAAO9E,EAAE,kBAAT,OACA,eAAC,GAAD,CAAa2M,YAAahM,EAAIC,SAA9B,SACGD,EAAIC,WAAauF,KAAYC,KAAOpG,EAAE,MAAQA,EAAE,aAGrD,gBAAC,IAAD,CAAM0I,WAAW,SAASC,eAAe,gBAAgB7D,GAAG,OAA5D,UACE,eAAC,KAAD,UAAO9E,EAAE,mBACT,eAAC,KAAD,oBAAUqF,GAAU1E,EAAIiF,QAAxB,aAEF,gBAAC,IAAD,CAAM8C,WAAW,QAAQC,eAAe,gBAAxC,UACE,gBAAC,KAAD,CAAMqE,MAAI,EAAV,UAAuBhN,EAAXmQ,EAAa,gBAAqB,eAA9C,OACA,gBAAC,IAAD,CAAK7O,MAAO,CAAEsH,UAAW,SAAzB,UACE,eAAC,KAAD,CAAMoE,MAAI,EAACpL,MAlEE,WACrB,OAAQ+N,GACN,KAAKS,IAAOC,IACV,MAAO,UACT,KAAKD,IAAOK,KACV,MAAO,UACT,KAAKL,IAAOM,SACZ,QACE,MAAO,QA0DeO,GAAlB,mBAAwCd,EAAW,IAAM,KAAzD,OAA+D9K,GAAUiB,GAAzE,UACA,eAAC,KAAD,CAAMwC,SAAS,OAAOlH,MAAM,aAA5B,qBACQyD,GAAUiC,EAAayB,MAAMzC,GAAQ4K,qBAIhDf,GACC,uCACE,eAACX,GAAD,IACA,gBAAC,IAAD,CAAM9G,WAAW,QAAQC,eAAe,gBAAxC,UACE,gBAAC,KAAD,CAAMG,SAAS,OAAOlH,MAAM,aAA5B,UACG5B,EAAE,qBADL,OAGA,gBAAC,IAAD,CAAM2I,eAAe,MAArB,UACE,eAAC,KAAD,CAAMG,SAAS,OAAOlH,MAAM,aAA5B,mBAA6CyD,GAAUkL,GAAvD,UACA,uBAAMrQ,IAAK8P,EAAX,SACE,eAAC,KAAD,CAAUpO,MAAM,aAAa6K,GAAG,aAGnCyD,GAAkBD,eC/J3BkB,GAAmBvS,KAAOC,IAAV,0GACA,qBAAGC,MAAkBC,OAAOqS,YACrB,qBAAGtS,MAAkBC,OAAO+O,cAyC1CuD,GArC+B,SAAC,GAAqB,IAAnB1Q,EAAkB,EAAlBA,IAAKgP,EAAa,EAAbA,OAC5C3P,EAAMC,eAAND,EACR,EAAgDW,EAAIE,MAA5CoF,EAAR,EAAQA,YAAaF,EAArB,EAAqBA,WAAYC,EAAjC,EAAiCA,WAC3BsL,EAAiB5L,GAAcO,EAAaF,GAC5CwL,EAAiB7L,GAAcO,EAAaD,GAElD,OACE,gBAACmL,GAAD,WACGxB,IAAWS,IAAOM,UACjB,eAAC,KAAD,CAAM1L,GAAG,IAAIpD,MAAM,UAAUkD,GAAG,OAAhC,SACG9E,EACC,wHAIL2P,IAAWS,IAAOoB,MAAQ,eAAC,GAAD,CAAW7Q,IAAKA,EAAKgP,OAAQA,IACxD,eAAC,IAAD,CAAS7K,GAAG,MAAZ,SAAmB9E,EAAE,mBACrB,gBAACyR,GAAD,CAAoB5Q,MAAOF,EAAIE,MAAOiE,GAAG,OAAzC,UACE,eAAC,GAAD,CAAWoI,cAAelN,EAAE,MAAOkG,WAAYoL,EAAgB1L,OAAQG,IACvE,eAAC,GAAD,CAAWmH,cAAelN,EAAE,QAASkG,WAAYqL,EAAgB3L,OAAQI,OAE3E,gBAAC,IAAD,CAAM0C,WAAW,SAASC,eAAe,gBAAgB7D,GAAG,MAA5D,UACE,eAAC,KAAD,UAAO9E,EAAE,mBACT,eAAC,KAAD,CAAMgI,KAAMC,aAAetH,EAAIE,MAAM6Q,UAAW,SAAUC,UAAQ,EAAlE,SACGhR,EAAIE,MAAM6Q,eAGf,gBAAC,IAAD,CAAMhJ,WAAW,SAASC,eAAe,gBAAzC,UACE,eAAC,KAAD,UAAO3I,EAAE,mBACT,eAAC,KAAD,CAAMgI,KAAMC,aAAetH,EAAIE,MAAM+Q,WAAY,SAAUD,UAAQ,EAAnE,SACGhR,EAAIE,MAAM+Q,oBCvBfC,GAAYjT,aAAOmN,KAAM+F,MAAM,CAAEpJ,WAAY,SAAUF,EAAG,QAA9C5J,CAAH,4GACO,qBAAGE,MAAkBkP,KAAKC,cACnB,qBAAGnP,MAAkBC,OAAO+O,cAInDiE,GAAanT,aAAO2O,IAAP3O,CAAH,yCAuIDoT,GAnI2B,SAAC,GAAa,IAyB9BrC,EAzBmBhP,EAAU,EAAVA,IAC3C,EAA4BxE,oBAAS,GAArC,mBAAO2D,EAAP,KAAeC,EAAf,KACQ6F,EAAkBjF,EAAlBiF,OAAQ/E,EAAUF,EAAVE,MAERb,EAAMC,eAAND,EACFtF,EAAeD,IACfK,EAASD,IACTqC,EAAWC,cACTjD,EAAYyD,cAAZzD,QA6BF+X,EAAcC,YAAevR,EAAKjG,GAClCyX,EA1BgB,SAACxC,GACrB,OAAQA,GACN,KAAKS,IAAOC,IACV,MAAO,UACT,KAAKD,IAAOK,KACV,MAAO,UACT,KAAKL,IAAOM,SACV,MAAO,eACT,QACE,MAAO,QAiBW0B,CAAcH,GAChCI,GAdkB1C,EAcgBsC,KAbvB7B,IAAOK,KACb,IAGLd,IAAWS,IAAOC,IACb,IAGF,GAMHiC,EAAczR,EAAMlH,QAAUe,EAC9B6X,EAAczX,IAAWkD,KAAiBwT,MAAQ3Q,EAAMlH,QAAUe,EAAe,EACjFkV,GAAYjP,EAAIH,SAAWG,EAAIC,WAAaD,EAAIE,MAAMD,SAGtD0F,EAAS2L,IAAgB7B,IAAOC,IAAMhK,GAAa1F,EAAK2P,MAAe1K,EAqCvE+K,EAAa,yCAAG,uBAAAhU,EAAA,sDAEpBO,EAAS0T,aAA0B,CAAE1W,UAAS2W,MAAOlQ,EAAI4D,MACzDrH,EAASqB,aAAgB,CAAErE,UAASsE,OAAQ,CAACmC,EAAIE,MAAMlH,UAHnC,2CAAH,qDAMnB,OACE,uCACE,gBAACkY,GAAD,CAAWpQ,QAhFI,kBAAM1B,GAAWD,IAgFA0S,KAAK,SAArC,UACE,eAAC,IAAD,CAAKnR,MAAM,OAAX,SACE,gBAAC,KAAD,CAAMuH,UAAU,SAAhB,UACE,eAAC,KAAD,CAAME,SAAS,OAAOlH,MAAM,aAA5B,SACG5B,EAAE,WAEL,eAAC,KAAD,CAAMgN,MAAI,EAACI,WAAY,EAAvB,SACGvM,EAAMlH,MAAM4L,wBAInB,eAACwM,GAAD,CAAYzF,GAAG,OAAf,SArDAgG,EAEA,gBAAC,IAAD,CAAM5J,WAAW,SAAjB,UACE,eAAC,KAAD,CAAU9G,MAAM,UAAUJ,GAAG,MAAMH,MAAM,SACzC,eAAC,KAAD,CAAMO,MAAM,UAAUoL,MAAI,EAA1B,SACGhN,EAAE,sBAMPuS,EAEA,gBAAC,IAAD,CAAM7J,WAAW,SAAjB,UACE,eAAC,KAAD,CAAuB9G,MAAM,YAAYJ,GAAG,MAAMH,MAAM,SACxD,eAAC,KAAD,CAAMO,MAAM,YAAYoL,MAAI,EAA5B,SACGhN,EAAE,iBAOT,uCACE,eAAC,KAAD,CAAM8I,SAAS,OAAOlH,MAAM,aAA5B,SACG5B,EAAE,iBAEL,eAAC,KAAD,CAAMgN,MAAI,EAACpL,MAAOuQ,EAAiB/E,WAAY,EAA/C,SACG6E,IAAgB7B,IAAOM,SAAW1Q,EAAE,YAApC,UAAqDqS,GAArD,OAAwEhN,GAAUiB,WA0BpF2L,IAAgB7B,IAAOC,KAAOT,GAC7B,eAAC,GAAD,CACEvG,YAAauG,EACbjW,MAAOgH,EAAIE,MAAMlH,MACjB2M,OAAQjB,GAAUiB,GAClBM,UAAW+J,EACXjK,UAAW/F,EAAIiF,OAAOqE,WACtBwI,MAAM,KACNjR,GAAG,MAPL,SASGxB,EAAE,aAGNiS,IAAgB7B,IAAOM,UAAYd,GAClC,eAAC,GAAD,CAAuBjW,MAAOgH,EAAIE,MAAMlH,MAAO8Y,MAAM,KAAKjR,GAAG,MAA7D,SACGxB,EAAE,cAGLsS,IAAgBC,GAChB,eAAC,KAAD,CAAY5Q,QAAQ,OAAO8Q,MAAM,KAAjC,SACG3S,EAAS,eAAC,IAAD,IAAoB,eAAC,IAAD,SAInCA,GAAU,eAAC,GAAD,CAAYa,IAAKA,EAAKgP,OAAQuC,YAAevR,EAAKjG,SxBjJ7DgY,GAAS9T,KAAO+T,MAAV,yHAONC,GAAehU,aAAO2O,IAAP3O,CAAH,kFACF,qBAAGE,MAAkBC,OAAOC,UAAU6T,aAKhDC,GAAsBlU,KAAOC,IAAV,wHAWnBkU,GAAgB,SAAC/X,GACrB,OAAQA,GACN,KAAKgY,KAAcC,UACjB,OAAO,EACT,KAAKD,KAAcE,YACjB,OAAO,EACT,KAAKF,KAAcG,IACnB,QACE,U,SASMla,O,mBAAAA,I,cAAAA,M,KAKZ,I,4GA+Eema,GA/EuB,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aAC5CtY,EAAgBD,IAChBK,EAAoBD,IAClB6E,EAAMC,eAAND,EACF9C,EAAWC,cACTjD,EAAYyD,cAAZzD,QAMFqZ,EAAe,SAACC,GAAD,+BAA8B,uBAAA7W,EAAA,yDAC7C6W,IAAcxY,EAD+B,gCAEzCkC,EAASuW,aAAa,CAAEvZ,UAASsG,QAASuS,GAAcS,MAFf,OAG/CtW,EAASwW,aAAiBF,IAHqB,4CAO7CG,EAAS,yCAAG,WAAOC,GAAP,UAAAjX,EAAA,6DAChB2W,EAAaM,GADG,SAEVL,EAAaP,KAAcG,IAA3BI,GAFU,2CAAH,sDAKf,OACE,gBAACX,GAAD,WACE,gBAAC,IAAD,CAAMlK,WAAW,SAASC,eAAe,gBAAgB7D,GAAG,OAA5D,UACE,eAAC,IAAD,CAASE,GAAG,KAAK6O,KAAK,KAAtB,SACG7T,EAAE,aAEL,eAAC,IAAD,CAAQyB,QAtBM,WAClBvE,EAASwE,cAAoB,KAqBKC,QAAQ,OAAOuH,QAAS,eAAC,IAAD,CAAkBtH,MAAM,YAAc0K,GAAG,IAA/F,SACGtM,EAAE,cAGP,eAAC8S,GAAD,UACE,gBAAC,IAAD,CAAYgB,YAAaT,EAAWZ,MAAM,KAAK9Q,QAAQ,SAASoS,YAAaJ,EAA7E,UACE,eAAC,IAAD,UAAiB3T,EAAE,YACnB,eAAC,IAAD,UAAiBA,EAAE,cAGtBqT,IAAcpa,EAAY+a,QACzB,uCACE,eAAC,KAAD,CAAMpS,MAAM,aAAakH,SAAS,OAAOhE,GAAG,MAA5C,SACG9E,EAAE,YAEL,gBAAC,IAAD,CAAM0I,WAAW,SAAjB,UACE,gBAACgK,GAAD,WACE,eAAC,KAAD,CACED,MAAM,KACNwB,QAASjZ,IAAkBgY,KAAcG,IACzC1J,SAAUrO,IAAsBlB,EAChCga,SAAUX,EAAaP,KAAcG,OAEvC,eAAC,KAAD,CAAM1G,GAAG,MAAT,SAAgBzM,EAAE,YAEpB,gBAAC0S,GAAD,WACE,eAAC,KAAD,CACED,MAAM,KACNwB,QAASjZ,IAAkBgY,KAAcC,UACzCxJ,SAAUrO,IAAsBlB,EAChCga,SAAUX,EAAaP,KAAcC,aAEvC,eAAC,KAAD,CAAMxG,GAAG,MAAT,SAAgBzM,EAAE,kBAEpB,gBAAC0S,GAAD,WACE,eAAC,KAAD,CACED,MAAM,KACNwB,QAASjZ,IAAkBgY,KAAcE,YACzCzJ,SAAUrO,IAAsBlB,EAChCga,SAAUX,EAAaP,KAAcE,eAEvC,eAAC,KAAD,CAAMzG,GAAG,MAAT,SAAgBzM,EAAE,8ByBrGjBmU,GAvB6B,SAAC,GAA6B,IAA3BC,EAA0B,EAA1BA,cAAeja,EAAW,EAAXA,KACpD6F,EAAMC,eAAND,EAER,OAAOoU,EACL,qCACGra,kBAAQI,EAAM,CAAC,eAAgB,CAAC,SAASka,KAAI,SAAC1T,GAAD,OAC5C,eAAC,GAAD,CAA4BA,IAAKA,GAAbA,EAAI4D,SAI5B,gBAAC,IAAD,CAAKiE,EAAE,OAAP,UACE,eAAC,IAAD,CAASqL,KAAK,KAAKjL,UAAU,SAAS9D,GAAG,MAAzC,SACG9E,EAAE,qCAEL,eAAC,KAAD,CAAMgF,GAAG,IAAI4D,UAAU,SAAvB,SACG5I,EACC,2HCTGsU,GAAgBnV,aAAH,iIAKF,qBAAG2B,UAIdyT,GAAkBpV,aAAH,kHAKH,SAACmK,GAAD,OAAYA,EAAMkL,UAI9BC,GAAM7V,KAAO8V,IAAV,gGAMVC,GAAe/V,KAAOgW,OAAV,6FAGI,SAACtL,GAAD,gBAAcA,EAAMxI,OAApB,eAGT+T,GAAYjW,aAAO+V,GAAP/V,CAAH,6EAEP0V,IAGFQ,GAAWlW,aAAO+V,GAAP/V,CAAH,sHAEE,SAAC0K,GAAD,OAAYA,EAAMkL,SAC1BF,GAA0BC,IAG5B/U,GAAUZ,KAAOC,IAAV,yFAMPkW,GAAOnW,KAAOC,IAAV,yPClDXmW,GAAgB,QA4BPC,GA1B2B,SAAC,GAAmB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,IACzCnV,EAAMC,eAAND,EACFoV,GAAwB,IAAND,GAAcD,EAAOC,IAAMtM,QAAQ,GACrDwM,EAAaH,GAAQC,EAAMD,GAASF,GACpCM,EAAWN,GAAgBK,EACjC,OACE,gBAAC,GAAD,WACE,gBAACZ,GAAD,CAAKc,QAAQ,cAAb,UACE,eAACV,GAAD,CAAWW,EAAE,KAAKC,GAAG,KAAKC,GAAG,KAAK5U,OAAQuU,IAC1C,eAACP,GAAD,CAAUU,EAAE,KAAKC,GAAG,KAAKC,GAAG,KAAK5U,OAAQwU,EAAUd,OAAQa,OAE7D,gBAACN,GAAD,WACE,eAAC,KAAD,CAAMY,OAAK,EAACvI,WAAW,IAAvB,SACGpN,EAAE,SAEL,gBAAC,KAAD,CAAMgN,MAAI,EAAClE,SAAS,OAAOsE,WAAW,IAAtC,UACG+H,EADH,IACSA,EAAMD,KAEf,gBAAC,KAAD,CAAMS,OAAK,EAACvI,WAAW,IAAIxL,MAAM,aAAjC,UACGwT,EADH,cCtBFQ,GAAoB,CACxBT,IAAK,UACLD,KAAM,UACNW,QAAS,QAGLC,GAAmB,CACvBX,IAAK,IACLD,KAAM,IACNW,QAAS,IAwCIE,GArC+B,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,QAAS3O,EAAmB,EAAnBA,aACtDtH,EAAMC,eAAND,EAEF4B,EAAQgU,GAAkBI,GAChC,EAA2BC,EAAQD,GAA3B7c,EAAR,EAAQA,OAAQyM,EAAhB,EAAgBA,OAEVsQ,GAA8B,IAAT/c,EADP8c,EAAQJ,QAAQ1c,QACoB0P,QAAQ,GAC1DsN,EAAqBH,EAAKI,OAAO,GAAGC,cAAgBL,EAAKM,MAAM,GAC/DC,EAAyB,QAATP,EAAiBC,EAAQD,GAAM1P,OAASV,EAE9D,OACE,uCACE,eAAC,KAAD,CAAM2C,GAAG,OAAOyE,MAAI,EAACpL,MAAM,aAA3B,SACG5B,EAAEmW,KAEL,gBAAC,IAAD,WACE,gBAAC,IAAD,CAAM5U,KAAK,IAAIiV,cAAc,SAA7B,UACE,gBAAC,KAAD,CAAMxJ,MAAI,EAAClE,SAAS,OAAOlH,MAAOA,EAAlC,UACGzI,EADH,IACY6G,EAAE,UAAUyW,uBAExB,eAAC,KAAD,CAAM3N,SAAS,OAAOlH,MAAM,aAA5B,SACY,YAAToU,EAAqBhW,EAAE,SAASyW,oBAAhC,UAAyDP,EAAzD,UAGL,gBAAC,IAAD,CAAM3U,KAAK,IAAIiV,cAAc,SAA7B,UACE,eAAC,KAAD,CAAMxJ,MAAI,EAAClE,SAAS,OAAOlH,MAAOA,EAAlC,mBACMkU,GAAiBE,IADvB,OAC+B3Q,GAAUkR,GADzC,UAGA,eAAC,KAAD,CAAMzN,SAAS,OAAOlH,MAAM,aAA5B,qBACQyD,GAAUiC,EAAayB,MAAMwN,GAAerF,yBCxBxD1B,GAAU5Q,KAAOC,IAAV,+GACS,qBAAGC,MAAkBC,OAAO2X,sBAM5CC,GAAgC,CACpCxB,IAAK,CACHhc,OAAQ,EACRyM,OAAQ,EACRU,OAAQ,EACRsQ,UAAW,CACTrS,GAAI,IACJ+B,OAAQ,EACRJ,WAAY,IAGhBgP,KAAM,CACJ/b,OAAQ,EACRyM,OAAQ,GAEViQ,QAAS,CACP1c,OAAQ,EACRyM,OAAQ,IAoJGiR,GArGuB,SAAC,GAA6B,IAA3BzC,EAA0B,EAA1BA,cAAeja,EAAW,EAAXA,KAC9C6F,EAAMC,eAAND,EACA9F,EAAYyD,cAAZzD,QACFQ,EAAeD,IACf6M,EAAeC,eAEf0O,EAjDc,SAAC9b,EAAaO,GAClC,OAAOP,EAAKV,QAAO,SAACwc,EAAqBtV,GACvC,IAAMsR,EAAcC,YAAevR,EAAKjG,GACxC,GAAIuX,IAAgB7B,IAAOC,IAAK,CAC9B,IAAM/J,EAASD,GAAa1F,EAAK2P,MAC3BsG,EAAcX,EAAQd,IAAtByB,UACN,GAAItQ,EAASsQ,EAAUtQ,OAAQ,CAC7B,MAAgD3F,EAAIE,MAA5CkF,EAAR,EAAQA,WAAYC,EAApB,EAAoBA,WAAYC,EAAhC,EAAgCA,YAC1BC,EAAaR,GAAcO,EAAatF,EAAIC,WAAauF,KAAYC,KAAOL,EAAaC,GAC/F4Q,EAAY,CAAErS,GAAI5D,EAAIE,MAAM0D,GAAI+B,SAAQJ,cAE1C,MAAO,CACLiP,IAAK,CACHhc,OAAQ8c,EAAQd,IAAIhc,OAAS,EAC7ByM,OAAQqQ,EAAQd,IAAIvP,OAASjF,EAAIiF,OACjCU,OAAQ2P,EAAQd,IAAI7O,OAASA,EAC7BsQ,aAEFf,QAAS,CACP1c,OAAQ8c,EAAQJ,QAAQ1c,OAAS,EACjCyM,OAAQqQ,EAAQJ,QAAQjQ,OAASjF,EAAIiF,QAEvCsP,KAAMe,EAAQf,MAGlB,OAAIjD,IAAgB7B,IAAOK,KAClB,CACLyE,KAAM,CACJ/b,OAAQ8c,EAAQf,KAAK/b,OAAS,EAC9ByM,OAAQqQ,EAAQf,KAAKtP,OAASjF,EAAIiF,QAEpCiQ,QAAS,CACP1c,OAAQ8c,EAAQJ,QAAQ1c,OAAS,EACjCyM,OAAQqQ,EAAQJ,QAAQjQ,OAASjF,EAAIiF,QAEvCuP,IAAKc,EAAQd,KAIVc,IACNU,IASaG,CAAc3c,EAAMO,GAC9Bqc,EAAkBd,EAAQd,IAAI7O,OAAS2P,EAAQf,KAAKtP,OACpDoR,EAAsBD,EAAkB,EACxCE,EAAqBhB,EAAQJ,QAAQjQ,OAASqQ,EAAQJ,QAAQ1c,OAC9D+d,EAAoBH,EAAkBd,EAAQJ,QAAQ1c,OACtDge,EAAsBD,EAAoB,EAG1CE,EAAgD,IAAjCnB,EAAQd,IAAIyB,UAAUtQ,OAE3C,OAAO8N,EACL,gBAAC,IAAD,CAAK5L,EAAE,OAAP,UACE,eAAC,KAAD,CAAMwE,MAAI,EAAClE,SAAS,OAAOlH,MAAM,YAAYyV,GAAG,OAAhD,SACGrX,EAAE,kBAEL,gBAAC,IAAD,WACE,eAAC,GAAD,CAAUkV,KAAMe,EAAQf,KAAK/b,OAAQgc,IAAKc,EAAQd,IAAIhc,SACtD,gBAAC,IAAD,CAAMqd,cAAc,SAAS7N,eAAe,SAAS2O,GAAG,OAAxD,UACE,eAAC,KAAD,CAAMtK,MAAI,EAACpL,MAAM,aAAjB,SACG5B,EAAE,iBAEL,eAAC,KAAD,CAAMgN,MAAI,EAAClE,SAAS,OAAOsE,WAAW,IAAIxL,MAAOoV,EAAsB,UAAY,UAAnF,mBACMA,EAAsB,IAAM,IADlC,OACuC3R,GAAU0R,GADjD,UAGA,eAAC,KAAD,CAAMpB,OAAK,EAAC/T,MAAM,aAAlB,qBACQyD,GAAUiC,EAAayB,MAAMgO,GAAiB7F,qBAI1D,gBAAC,IAAD,CAAKoG,GAAG,MAAR,UACE,eAAC,KAAD,CAAM/O,GAAG,OAAOyE,MAAI,EAACpL,MAAM,aAA3B,SACG5B,EAAE,4BAEL,eAAC,KAAD,CAAMgN,MAAI,EAACpL,MAAOuV,EAAsB,UAAY,UAApD,mBACMA,EAAsB,IAAM,IADlC,OACuC9R,GAAU6R,GADjD,UAGA,eAAC,KAAD,CAAMvB,OAAK,EAAC/T,MAAM,aAAlB,qBACQyD,GAAUiC,EAAayB,MAAMmO,GAAmBhG,eAGvDkG,GACC,uCACE,eAAC,KAAD,CAAM7O,GAAG,OAAOyE,MAAI,EAACpL,MAAM,aAA3B,SACG5B,EAAE,yBAA0B,CAAEuX,QAAStB,EAAQd,IAAIyB,UAAUrS,OAEhE,gBAAC,IAAD,CAAMmE,WAAW,WAAjB,UACE,eAAC,KAAD,CAAMsE,MAAI,EAACpL,MAAM,UAAjB,oBAAgCyD,GAAU4Q,EAAQd,IAAIyB,UAAUtQ,QAAhE,UACA,gBAAC,KAAD,CAAMmG,GAAG,MAAMkJ,OAAK,EAAC/T,MAAM,aAA3B,cACIqU,EAAQd,IAAIyB,UAAU1Q,WAAW2C,QAAQ,GAD7C,WAIF,eAAC,KAAD,CAAM8M,OAAK,EAAC/T,MAAM,aAAlB,qBACQyD,GAAUiC,EAAayB,MAAMkN,EAAQd,IAAIyB,UAAUtQ,QAAQ4K,kBAKvE,eAAC,KAAD,CAAM3I,GAAG,OAAOyE,MAAI,EAACpL,MAAM,aAA3B,SACG5B,EAAE,sCAEL,eAAC,KAAD,CAAMgN,MAAI,EAAV,mBAAe3H,GAAU4R,GAAzB,UACA,eAAC,KAAD,CAAMtB,OAAK,EAAC/T,MAAM,aAAlB,qBACQyD,GAAUiC,EAAayB,MAAMkO,GAAoB/F,eAGzD,eAAC,GAAD,IAEA,eAAC,GAAD,CAAY8E,KAAK,MAAMC,QAASA,EAAS3O,aAAcA,IACvD,eAAC,GAAD,CAAY0O,KAAK,OAAOC,QAASA,EAAS3O,aAAcA,IACxD,eAAC,GAAD,CAAY0O,KAAK,UAAUC,QAASA,EAAS3O,aAAcA,IAE3D,eAAC,IAAD,CAAMqB,eAAe,SAASJ,GAAG,OAAjC,SACE,eAAC,KAAD,CAAMP,KAAI,UAAKC,aAAe/N,EAAS,WAA7B,eAAsD4K,GAAG,OAAO6M,UAAQ,EAAlF,SACE,gBAAC,IAAD,CAAQpJ,GAAG,MAAMlH,MAAM,OAAvB,UACGrB,EAAE,wBACH,eAAC,KAAD,CAAa4B,MAAM,QAAQ6K,GAAG,qBAOxC,gBAAC,IAAD,CAAKjE,EAAE,OAAP,UACE,eAAC,IAAD,CAASqL,KAAK,KAAKjL,UAAU,SAAS9D,GAAG,MAAzC,SACG9E,EAAE,qCAEL,eAAC,KAAD,CAAMgF,GAAG,IAAI4D,UAAU,SAAvB,SACG5I,EACC,2HC/KJwX,GAAgB5Y,KAAOC,IAAV,uHACG,qBAAGC,MAAkBkP,KAAKC,cAM1CwJ,GAAa7Y,KAAOC,IAAV,wGAOV6Y,GAAiB9Y,KAAOC,IAAV,8MAEE,qBAAGC,MAAkBkP,KAAKC,cAsEjC0J,GA5DC,WACd,IAAQzd,EAAYyD,cAAZzD,QACFgD,EAAWC,cACX7C,EAAoBD,IACpBe,EAAoBD,IACpBH,EAAgBD,IAChBL,EAAeD,IACbuF,EAAMC,eAAND,EACF7F,EAAOkB,EAAuBnB,GACpC,EAAkCiC,mBAASlD,EAAY+a,QAAvD,mBAAOX,EAAP,KAAkBC,EAAlB,KAEA5W,qBAAU,WACJxC,GAAWI,GACb4C,EAASuW,aAAa,CAAEvZ,eAEzB,CAACA,EAASQ,EAAcJ,EAAmB4C,IAI9C,IAAM0a,EAAU5c,IAAkBgY,KAAcE,YAAc2E,YAAwB1d,GAAQA,EAExFia,EAAgBwD,GAAWA,EAAQ9W,OAAS,EAE9CgX,EAAqB,KAEzB,OAAQzE,GACN,KAAKpa,EAAY8e,IACfD,EAAqB,eAAC,GAAD,CAAQ1D,cAAeA,EAAeja,KAAMyd,IACjE,MACF,KAAK3e,EAAY+a,OACjB,QACE8D,EAAqB,eAAC,GAAD,CAAW1D,cAAeA,EAAeja,KAAMyd,IAaxE,OATK1d,IACH4d,EACE,gBAAC,IAAD,CAAMnP,eAAe,SAASD,WAAW,SAAS8N,cAAc,SAASjO,GAAG,OAA5E,UACE,eAACyP,GAAA,EAAD,IACA,eAAC,KAAD,CAAMzP,GAAG,MAAT,SAAgBvI,EAAE,6DAMtB,gBAACwX,GAAD,WACE,eAAC,GAAD,CAAQnE,UAAWA,EAAWC,aAAcA,IAC5C,eAACmE,GAAD,UACGrc,EACC,eAACsc,GAAD,UACE,eAAC,KAAD,CAAS7D,KAAM,OAGjBiE,Q,2GC5FGG,GAAsD,SAAC,GAA4B,IAA1BC,EAAyB,EAAzBA,SAAa5O,EAAY,mBAEvF6O,EADQjU,eACKnF,OAAOmZ,EAAW,UAAY,YAEjD,OACE,gBAAC,KAAD,yBAAK5U,OAAO,OAAOjC,MAAM,QAAQkU,QAAQ,cAAiBjM,GAA1D,cACE,oBAAG5I,OAAO,kBAAV,SACE,uBACE0X,EAAE,yNACFD,KAAMA,MAGV,gCACE,0BACE5T,GAAG,YACH8T,EAAE,UACFC,EAAE,IACFjX,MAAM,MACNiC,OAAO,UACPiV,YAAY,iBACZC,0BAA0B,OAP5B,UASE,0BAASC,aAAa,IAAI9I,OAAO,uBACjC,0BAAS+I,KAAK,SAAS1X,GAAG,gBAAgB2X,IAAI,qBAAqBhJ,OAAO,UAC1E,gCACE3O,GAAG,cACHgV,KAAK,SACLhc,OAAO,4CACP2V,OAAO,cAET,8BACA,iCAAgBiJ,aAAa,MAC7B,8BAAaD,IAAI,YAAYE,SAAS,aAAaC,GAAG,KAAKC,GAAG,MAC9D,gCAAe/C,KAAK,SAAShc,OAAO,+CACpC,0BAAS0e,KAAK,SAASC,IAAI,QAAQhJ,OAAO,kCAOvCqJ,GAAoD,SAAC,GAA4B,IAA1Bd,EAAyB,EAAzBA,SAAa5O,EAAY,mBAErF6O,EADQjU,eACKnF,OAAOmZ,EAAW,UAAY,YAEjD,OACE,gBAAC,KAAD,yBAAK5U,OAAO,OAAOjC,MAAM,QAAQkU,QAAQ,cAAiBjM,GAA1D,cACE,oBAAG5I,OAAO,kBAAV,SACE,uBACE0X,EAAE,4NACFD,KAAMA,MAGV,gCACE,0BACE5T,GAAG,YACH8T,EAAE,UACFC,EAAE,UACFjX,MAAM,MACNiC,OAAO,UACPiV,YAAY,iBACZC,0BAA0B,OAP5B,UASE,0BAASC,aAAa,IAAI9I,OAAO,uBACjC,0BAAS+I,KAAK,SAAS1X,GAAG,gBAAgB2X,IAAI,qBAAqBhJ,OAAO,UAC1E,gCACE3O,GAAG,cACHgV,KAAK,SACLhc,OAAO,4CACP2V,OAAO,cAET,8BACA,iCAAgBiJ,aAAa,MAC7B,8BAAaD,IAAI,YAAYE,SAAS,aAAaC,GAAG,KAAKC,GAAG,MAC9D,gCAAe/C,KAAK,SAAShc,OAAO,+CACpC,0BAAS0e,KAAK,SAASC,IAAI,QAAQhJ,OAAO,kCC/CrCsJ,GAzB+B,SAAC,GAAoC,IAAlCrT,EAAiC,EAAjCA,OAAiC,IAAzByD,kBAAyB,SACxErJ,EAAMC,eAAND,EACR,EAA+C6P,aAC7C,sBAAKvO,MAAO,CAAE4X,WAAY,UAA1B,mBAA0CpP,GAAYlE,GAAtD,UACA,CAAEmK,UAAW,WAFPC,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,eAAgBD,EAAnC,EAAmCA,QAKnC,OACE,uCACE,wBAAM/P,IAAK8P,EAAX,UACE,eAAC,KAAD,CACErO,QAAQ,YACRwX,WAAW,OACX3M,cAAc,YACd4M,SAAU/P,EACV6C,UAAW7C,EAAa,eAAC,IAAD,CAAyBhI,MAAM,SAAY,eAAC,IAAD,CAAqBA,MAAM,SALhG,SAOgBrB,EAAbqJ,EAAe,UAAe,aAC1B,OACD,IACP6G,GAAkBD,MCZnBoJ,GAAeza,KAAOC,IAAV,oFAMZya,GAAU1a,KAAOC,IAAV,+MAYP0a,GAAoB3a,KAAOC,IAAV,sEAKjB2a,GACJ,eAACC,EAAD,uDAAY,aAAZ,OACA,SAACvB,EAAmBwB,GAClB,OAAIA,EACK,eAGLxB,EACK,QAGFuB,IA0EIE,GAvEyC,SAAC,GAQlD,IAPLjT,EAOI,EAPJA,UACAR,EAMI,EANJA,WAMI,IALJwH,kBAKI,aAJJrE,kBAII,aAHJsD,mBAGI,MAHUxG,KAAYC,KAGtB,MAFJsT,kBAEI,aADJxB,gBACI,SACIlY,EAAMC,eAAND,EACF4Z,EAAUJ,GAAa,UAAbA,CAAwBtB,EAAUwB,GAC5CG,EAAYL,GAAa,UAAbA,CAAwBtB,EAAUwB,GAC9CI,EAAYN,KAAetB,EAAUwB,GACrCK,EACJ,eAAC,IAAD,UACE,gBAAC,IAAD,CAAMpR,eAAe,SAASrF,OAAO,OAArC,UACE,eAAC,KAAD,CAAMwF,SAAS,OAAOlH,MAAOkY,EAAW9M,MAAI,EAACI,WAAW,MAAxD,cACkBrL,IAAfmE,EAAA,UAA8BA,EAA9B,KAA8C,MAEjD,eAAC,KAAD,CAAM4C,SAAS,OAAOlH,MAAOkY,EAAW1M,WAAW,MAAMX,GAAG,MAA5D,SACGzM,EAAE,iBAMLga,EAAgB,SAACpZ,GACrB,OAAK8M,EAKH,eAAC6L,GAAD,CAAmBjY,MAAOV,EAA1B,SACE,eAAC,GAAD,CAAYgF,OAAQc,EAAW2C,WAAYA,MALtC,MAUX,OAAIsD,IAAgBxG,KAAYyH,KAE5B,eAAC,IAAD,CAAKrF,GAAG,OAAO3H,SAAS,WAAxB,SACE,gBAACyY,GAAD,WACE,eAAC,GAAD,CAA0BnB,SAAUA,IACnC8B,EAAc,CAAEC,OAAQ,EAAGC,MAAO,IACnC,gBAACZ,GAAD,YACII,GAAcK,EAChB,eAAC,KAAD,CAAM/M,MAAI,EAAClE,SAAS,OAAOhE,GAAG,MAAMlD,MAAOiY,EAAWrN,cAAc,YAApE,SACGxM,EAAE,kBASb,eAAC,IAAD,CAAK8E,GAAG,OAAOlE,SAAS,WAAxB,SACE,gBAACyY,GAAD,WACE,eAAC,GAAD,CAAwBnB,SAAUA,IACjC8B,EAAc,CAAEG,IAAK,EAAGC,KAAM,IAC/B,gBAACd,GAAD,WACE,eAAC,KAAD,CAAMtM,MAAI,EAAClE,SAAS,OAAOsE,WAAW,OAAOxL,MAAOgY,EAASpN,cAAc,YAA3E,SACGxM,EAAE,SAEH0Z,GAAcK,WC3GpBM,GAAgB,OAKTC,GAAsB,SAACxb,EAAqBhE,GACvD,IAAMyf,EAAiB,eAAWF,GAAX,WACvB,OAAQvf,GACN,IAAK,cACH,MAAM,+BAAN,OAAsCyf,EAAtC,aAA4Dzb,EAAMC,OAAO+O,WAAzE,YAAuFyM,EAAvF,cAA8Gzb,EAAMC,OAAOC,UAAUwb,YACvI,IAAK,WACH,MAAM,mBAAN,OAA0B1b,EAAMC,OAAO0b,QAAvC,YAAkDF,EAAlD,aAAwEzb,EAAMC,OAAO+O,WAArF,YAAmGyM,EAAnG,KACF,IAAK,OACH,MAAM,mBAAN,OAA0Bzb,EAAMC,OAAOa,UAAvC,YAAoD2a,EAApD,aAA0Ezb,EAAMC,OAAO+O,WAAvF,YAAqGyM,EAArG,KACF,IAAK,UACL,IAAK,OACL,QACE,OAAOzb,EAAMC,OAAO+O,aAwBpB4M,GAAuB,SAAC5f,EAAgB2e,GAC5C,OAAQ3e,GACN,IAAK,UACH,MAAO,eACT,IAAK,OACH,MAAO,QACT,IAAK,OACH,MAAO,YACT,IAAK,WACL,IAAK,cACH,MAAO,OACT,QACE,OAAO2e,IAIPkB,GAAmB/b,KAAOC,IAAV,iKAEN,mBAtCW,SAACC,EAAqBhE,GAC/C,OAAQA,GACN,IAAK,cACH,OAAOgE,EAAMC,OAAOC,UAAUwb,WAChC,IAAK,OACH,MAAO,cACT,IAAK,WACH,OAAO1b,EAAMC,OAAO0b,QACtB,IAAK,OACH,OAAO3b,EAAMC,OAAOa,UACtB,IAAK,UACL,IAAK,OACL,QACE,OAAOd,EAAMC,OAAO+O,YAyBa8M,CAAvB,EAAG9b,MAAH,EAAUhE,UAGduf,IACC,kBAA4B,SAA5B,EAAGvf,OAAkC,OAAS,SAGrD+f,GAAQjc,KAAOC,IAAV,wDAyBIic,GArB+B,SAAC,GAAoC,IAAlChgB,EAAiC,EAAjCA,OAAQ6J,EAAyB,EAAzBA,MAAOhL,EAAkB,EAAlBA,MAAOwS,EAAW,EAAXA,KAC/D2N,EAAYY,GAAqB5f,EAAQ,QACzC2S,EAAoB,SAAX3S,EAEf,OACE,gBAAC6f,GAAD,CAAkB7f,OAAQA,EAA1B,UACE,gBAAC,IAAD,CAAM4N,WAAW,SAAjB,UACGyD,EACD,eAAC,KAAD,CAAMvK,MAAOkY,EAAW9M,KAAMS,EAAQjB,cAAeiB,EAAS,YAAc,aAAcL,WAAW,OAArG,SACGzI,OAGL,eAACkW,GAAD,UACE,eAAC,KAAD,CAAM/R,SAAU2E,EAAS,OAAS,OAAQ7L,MAAO8Y,GAAqB5f,EAAQ,cAAe8N,UAAU,SAAvG,oBACOjP,W,6CCnFT6F,GAAUZ,aAAOmN,IAAPnN,CAAH,qIACS,qBAAGE,MAAkBC,OAAOa,aAM9C,YACA,OADkB,EAAfmb,SACY,oHAmCJC,GAxBuD,SAAC,GAMhE,IALLrhB,EAKI,EALJA,MACA2M,EAII,EAJJA,OACAI,EAGI,EAHJA,UAGI,IAFJqU,gBAEI,SADDzR,EACC,mBACItJ,EAAMC,eAAND,EAGR,OlCF+B,SAACrG,GAEhC,OAD0BP,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAY2hB,qBACjDthB,KAAU,EkCFfuhB,CAAkBvhB,GAOpC,gBAAC,GAAD,yBAAS+O,WAAW,SAASF,EAAE,OAAOuS,SAAUA,GAAczR,GAA9D,cACE,eAAC,KAAD,CAAgBjI,MAAM,OAAOC,MAAO,CAAEC,KAAM,QAAUC,GAAG,QACzD,eAAC,GAAD,CAAuB8E,OAAQA,EAAQI,UAAWA,EAAW/M,MAAOA,EAAO0P,YAAY,EAAOhI,MAAM,OAApG,SACGrB,EAAE,0BAPA,MCQImb,GArC6C,SAAC,GAAe,IAAbta,EAAY,EAAZA,MACrDb,EAAMC,eAAND,EACAlB,EAAUoF,eAAVpF,MACR,EAA0CkQ,GAAgBnO,EAAMlH,OAAxDsV,EAAR,EAAQA,aAAcC,EAAtB,EAAsBA,gBACdvV,EAAUkH,EAAVlH,MAEFgX,EAAa,yCAAG,uBAAAhU,EAAA,sDACpBuS,GAAgB,GADI,2CAAH,qDAInB,OACE,gBAAC,IAAD,CAAMkM,iBAAkBd,GAAoBxb,EAAO,YAAnD,UACE,eAAC,GAAD,CACEhE,OAAO,WACPqR,KAAM,eAAC,IAAD,CAAW3K,GAAG,MAAMH,MAAM,SAChCsD,MAAO3E,EAAE,YACTrG,MAAOkH,EAAMlH,QAEf,gBAAC,IAAD,CAAU6O,EAAE,OAAZ,UACE,eAAC,GAAD,CAAiBkR,YAAU,IAC3B,eAAC,GAAD,UACE,gBAAC,IAAD,CAAMlD,cAAc,SAAS9N,WAAW,SAAxC,UACE,eAAC,KAAD,CAAMsE,MAAI,EAACpL,MAAOqN,EAAe,OAAS,eAA1C,SACGjP,EAAE,oBAEJiP,GAAgB,eAAC,GAAD,CAAuBtV,MAAOA,EAAOiN,UAAW+J,EAAetP,MAAM,OAAOyN,GAAG,QAChG,eAAC,KAAD,CAAc9G,KAAK,uDAAuD2J,UAAQ,EAAlF,SACG3R,EAAE,qBAIT,eAAC,GAAD,CAAiB2M,YAAaxG,KAAYyH,KAAM8L,YAAU,WCKnD2B,GApCyC,SAAC,GAA6C,IAA3Cxa,EAA0C,EAA1CA,MAAOya,EAAmC,EAAnCA,aAAcC,EAAqB,EAArBA,eACtEvb,EAAMC,eAAND,EACAlB,EAAUoF,eAAVpF,MACR,EAA+C+Q,aAC7C7P,EAAE,6GACF,CAAE+P,UAAW,WAFPC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,eAK5B,OACE,uCACE,gBAAC,IAAD,CAAMkL,iBAAkBd,GAAoBxb,EAAO,eAAnD,UACE,eAAC,GAAD,CACEhE,OAAO,cACPqR,KAAM,eAAC,KAAD,CAAU3K,GAAG,MAAMH,MAAM,SAC/BsD,MAAO3E,EAAE,eACTrG,MAAOkH,EAAMlH,QAEf,gBAAC,IAAD,CAAU6O,EAAE,OAAZ,UACE,eAAC,GAAD,CAAiBkR,YAAU,EAAChM,WAAY4N,IACxC,eAAC,GAAD,UACE,gBAAC,IAAD,CAAM5S,WAAW,SAASC,eAAe,SAAS6N,cAAc,SAAhE,UACE,eAAC,KAAD,CAAS3C,KAAM,KACf,gBAAC,IAAD,CAAMtL,GAAG,MAAMrI,IAAK8P,EAApB,UACE,eAAC,KAAD,UAAchQ,EAAE,iBAChB,eAAC,KAAD,CAAUyM,GAAG,gBAInB,eAAC,GAAD,CAAiBE,YAAaxG,KAAYyH,KAAM8L,YAAU,EAAChM,WAAY6N,UAG1ErL,GAAkBD,MClBnBuL,GAAyB5c,aAAO6c,IAAP7c,CAAH,mHA4Eb8c,GAnE2C,SAAC,GASpD,IARL7a,EAQI,EARJA,MACA6F,EAOI,EAPJA,UACA4U,EAMI,EANJA,aACAC,EAKI,EALJA,eACAI,EAII,EAJJA,aACAC,EAGI,EAHJA,eACAtK,EAEI,EAFJA,eACAC,EACI,EADJA,eAEQvR,EAAMC,eAAND,EACAlB,EAAUoF,eAAVpF,MACA5E,EAAYyD,cAAZzD,QACAP,EAAiCkH,EAAjClH,MAAOiS,EAA0B/K,EAA1B+K,UAAW4C,EAAe3N,EAAf2N,WACpB7B,EAAc6B,EAAa5C,EAAYzF,KAAYC,KAAOD,KAAYyH,KACtExC,EAASnR,EAAiBC,EAASP,GACnCuB,EAAgBD,IAEhB4gB,EADS1Q,GAAeC,EAAQvK,GACPib,gBAAgBjT,QAAQ,GACjDkT,EAAiBzR,GAAkBzJ,EAAO3F,GAEhD,OAAI6gB,EACK,eAAC,GAAD,CAAmBlb,MAAOA,IAG9B2N,EAKH,gBAAC,IAAD,CAAK5N,SAAS,WAAd,UACE,gBAAC4a,GAAD,CAAwBJ,iBAAkBd,GAAoBxb,EAAO,WAArE,UACE,eAAC,GAAD,CACEhE,OAAO,UACPqR,KAAM,eAAC,IAAD,CAAW3K,GAAG,MAAMH,MAAM,OAAOO,MAAM,iBAC7C+C,MAAO3E,EAAE,WACTrG,MAAOkH,EAAMlH,QAEf,gBAAC,IAAD,CAAU6O,EAAE,OAAOlH,MAAO,CAAEV,SAAU,YAAtC,UACE,eAAC,GAAD,CACE8F,UAAWA,EACXR,WAAYoL,EACZ4G,SAAUvL,IAAgBxG,KAAYC,KACtCsH,WAAY4N,EACZjS,WAAYsS,IAEd,eAAC,GAAD,CAAa9a,MAAOA,EAAO0N,UAAWwN,IACtC,eAAC,GAAD,CACErV,UAAWA,EACXR,WAAYqL,EACZ5E,YAAaxG,KAAYyH,KACzBsK,SAAUvL,IAAgBxG,KAAYyH,KACtCF,WAAY6N,EACZlS,WAAYuS,UAIlB,eAAC,GAAD,CACEjiB,MAAOA,EACP2M,OAAQuV,EACRnV,UAAWA,EAAYmD,aAAuBnD,EAAW,GAAK,IAC9DqU,SAAUQ,OAnCP,eAAC,GAAD,CAAiB1a,MAAOA,EAAO0a,eAAgBA,EAAgBD,aAAcA,K,iDC7CzEU,GAVqC,SAAC,GAAiD,IAA/ChgB,EAA8C,EAA9CA,cAAeyO,EAA+B,EAA/BA,eAAmBnB,EAAY,mBAC7F2S,EAA0B,IAAhBjgB,EACVkgB,EAAyB,IAAjBzR,EAER0R,GADMxR,KAAKD,MACWuR,IAAYC,EAAQD,GAAY,IACtDG,EAAWD,GAAe,IAAMA,EAAc,IAEpD,OAAO,eAAC,KAAD,aAAUE,YAAaD,GAAc9S,KCwG/BgT,GAtFqC,SAAC,GAO9C,IANLzb,EAMI,EANJA,MACA6F,EAKI,EALJA,UACA4U,EAII,EAJJA,aACAC,EAGI,EAHJA,eACAjK,EAEI,EAFJA,eACAC,EACI,EADJA,eAEQvR,EAAMC,eAAND,EACA4L,EAA0D/K,EAA1D+K,UAAW3F,EAA+CpF,EAA/CoF,YAAajK,EAAkC6E,EAAlC7E,cAAeyO,EAAmB5J,EAAnB4J,eACzCrO,EAAQb,IACRL,EAAgBD,IAEhBshB,EAAS3Q,GAAaxP,EAAMsS,GAAG9C,GAC/B4Q,EAAaD,EAAS,UAAY,UAElC1N,EAAkBlD,GAAmBvP,EAAOwP,GAC5C6Q,EAAgBhV,WAAWoC,aAAuBzN,EAAO,EAAG,IAC5D2f,EAAiBzR,GAAkBzJ,EAAO3F,GAEhD,EAA4BwhB,sBAAW,CACrCC,MAAO,EACPC,IAAKH,EACLI,SAAU,EACVC,SAAU,IAJJC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OAMjB,EAA+CnN,aAAW7P,EAAE,oCAAqC,CAC/F+P,UAAW,WADLC,EAAR,EAAQA,UAAWC,EAAnB,EAAmBA,QAASC,EAA5B,EAA4BA,eAItB+M,EAAYvf,iBAAOsf,GAMzB,OAJAtgB,qBAAU,WACRugB,EAAUlf,QAAQ0e,KACjB,CAACA,EAAeQ,IAEflB,EACK,eAAC,GAAD,CAAmBlb,MAAOA,IAIjC,gBAAC,IAAD,CAAMqX,UAAQ,EAAd,UACE,eAAC,GAAD,CACEpd,OAAO,OACPqR,KAAM,eAAC,KAAD,CAAuB3K,GAAG,MAAMH,MAAM,OAAOO,MAAM,cACzD+C,MAAO3E,EAAE,QACTrG,MAAOkH,EAAMlH,QAEf,eAAC,GAAD,CAAegI,QAAQ,OAAO8Q,MAAM,KAAKzW,cAAeA,EAAeyO,eAAgBA,IACvF,gBAAC,IAAD,CAAUjC,EAAE,OAAZ,UACE,eAAC,GAAD,CACE9B,UAAWA,EACXR,WAAYoL,EACZ5D,WAAY4N,EACZpD,SAAUqE,IAEZ,gBAAC,GAAD,CAAgB5P,YAAa4P,EAASpW,KAAYC,KAAOD,KAAYyH,KAArE,UACE,eAAC,KAAD,CAAMhM,MAAM,aAAakH,SAAS,OAAOkE,MAAI,EAACR,cAAc,YAAY1H,GAAG,MAA3E,SACG9E,EAAE,gBAEL,gBAAC,IAAD,CAAM0I,WAAW,SAASC,eAAe,gBAAgB7D,GAAG,OAAOxB,OAAO,OAA1E,UACE,sBAAKpD,IAAK8P,EAAV,SACE,eAAC,KAAD,CAAahD,MAAI,EAACpL,MAAO4a,EAAY1T,SAAS,OAAOxH,MAAO,CAAE4b,UAAW,QAAzE,SACG9gB,EAAMsS,GAAG,GAAT,WAAkBqO,GAAY,eAAC,KAAD,CAAUzZ,OAAO,OAAOjC,MAAM,aAGjE,eAAC,GAAD,CAAasL,YAAa4P,EAASpW,KAAYC,KAAOD,KAAYyH,KAAlE,SACGhE,GAAYiF,QAGhBjD,GAAa,eAAC,GAAD,CAAcA,UAAWA,IACvC,eAAC,GAAD,CAAc3F,YAAaA,OAE7B,eAAC,GAAD,CACES,UAAWA,EACXR,WAAYqL,EACZ5E,YAAaxG,KAAYyH,KACzBF,WAAY6N,EACZrD,UAAWqE,OAGdrM,GAAkBD,MCzGnBkN,GAAQve,KAAOC,IAAV,wPAgBLue,GAAOxe,aAAOue,GAAPve,CAAH,8DAIJye,GAAQze,KAAOC,IAAV,6OAGY,qBAAGye,UAA6B,IAAM,IAIzDH,IACW,qBAAGG,UAA6B,EAAI,KAG/CF,IACW,qBAAGE,UAA6B,GAAK,KAI9CC,GAAiB3e,KAAOC,IAAV,yEA0BL2e,GAb2B,SAAC,GAAqC,IAAnCF,EAAkC,EAAlCA,UAAWha,EAAuB,EAAvBA,OACtD,EAToB,SAACrB,GACrB,GAAwB,IAApBA,EAASnB,OACX,MAAM,IAAI2c,MAAM,uCAGlB,OAAOxb,EAIeyb,CADuD,EAAfzb,UAC9D,mBAAO0b,EAAP,KAAcC,EAAd,KAEA,OACE,eAACL,GAAD,CAAgBjc,MAAO,CAAEgC,UAAzB,SACE,gBAAC+Z,GAAD,CAAOC,UAAWA,EAAlB,UACE,eAACH,GAAD,UAAQQ,IACR,eAACP,GAAD,UAAOQ,U,mBCpDAC,GAVG,WAChB,IAAMC,EAAgBC,qBAAWlc,IAEjC,QAAsBE,IAAlB+b,EACF,MAAM,IAAIL,MAAM,oBAGlB,OAAOK,GCHME,GAJCpf,aAAOmN,KAAM+F,MAAM,CAAEpJ,WAAY,UAAjC9J,CAAH,2CCsCPqf,GAAOC,sBAAW,OAAQ,IAC1BC,GAAmB,CAAC,GAAI,GAAI,GAAI,IAyBhCC,GAAqB,SAAC/b,GAC1B,IAAMgc,EAAe5W,WAAWpF,GAChC,OAAOic,OAAOC,MAAMF,GAAgB3iB,IAAOC,UAAUC,KAAK,GAAKsiB,sBAAW7b,IA0N7Dmc,GAvNyC,SAAC,GAA4D,IAA1D5d,EAAyD,EAAzDA,SAAU6d,EAA+C,EAA/CA,eAAgB9kB,EAA+B,EAA/BA,MAAO+kB,EAAwB,EAAxBA,OAAQ9X,EAAgB,EAAhBA,UAClG,EAA0BzK,mBAAS,IAAnC,mBAAOkG,EAAP,KAAcsc,EAAd,KACA,EAAsCxiB,oBAAS,GAA/C,mBAAOyiB,EAAP,KAAoBC,EAApB,KACA,EAAwC1iB,mBAAS,MAAjD,mBAAO2iB,EAAP,KAAqBC,EAArB,KACA,EAA8B5iB,mBAAS,GAAvC,mBAAO6iB,EAAP,KAAgBC,EAAhB,KAEQ/kB,EAAYyD,cAAZzD,QACAgI,EAAW2b,KAAX3b,OACSgd,EAAeC,eAAxBC,QACFC,E3CK0B,WAChC,IAAMA,EAAejmB,aAAY,SAACC,GAAD,OAAkBA,EAAMC,YAAY+lB,gBACrE,OAAO5jB,mBAAQ,kBAAMC,IAAOC,UAAUC,KAAKyjB,KAAe,CAACA,I2CPtCC,GACbtf,EAAMC,eAAND,EACAiH,EAAeF,eAAfE,WACAC,EAAqBC,eAArBD,iBACFE,EAAsBC,eAGtBkY,EAAiB9jB,mBAAQ,WAC7B,OAAOC,IAAOC,UAAUC,KAAKsjB,EAAWjV,cACvC,CAACiV,IACEM,EAAa/jB,mBAAQ,WACzB,OAAO8jB,EAAe7Q,GAAGuP,IAAQsB,EAAe1T,IAAIoS,IAAQA,KAC3D,CAACsB,IACEE,EAAiBlU,aAAgBgU,GAEjCG,EAAYtB,GAAmB/b,GAC/Bsd,EAAmBzlB,GAAWwlB,EAAUhR,GAAG,IAAuB,OAAjBoQ,EAmBjDc,EAAsB,SAACC,GAC3B,GAAIA,EAAgB,EAAG,CACrB,IAAMC,EAAepkB,IAAOoP,YAAYlP,KAAK4jB,GACvCO,EAAcrkB,IAAOoP,YAAYlP,KAAK,KACtCokB,EAAoBtkB,IAAOoP,YAAYlP,KAAKikB,EAAchX,QAAQ,KAAKqC,UAAU6U,GACjFE,EAAoBH,EAAatU,UAAUwU,GACjDrB,EAASuB,aAAkBD,SAE3BtB,EAAS,IAEXM,EAAWY,IAuBb,EAzGqB,SACrBxd,EACA6c,EACAiB,GASA,OANM9d,EAAMqM,GAAG,GACJrM,EAAM+d,IAAIlB,GAEZA,EAAWxQ,GAAG,IAOnBrM,EAAM0I,GAAG,GACJ,CAAEsV,IAAK,kBAAmB5W,UAAU,GAGtC,CAAE4W,IAAK,UAAW5W,SAAUpH,EAAMie,GAAGH,IAPnC,CAAEE,IAAK,2BAA4B5W,UAAU,GA4F5B8W,CAAeb,EAAWF,EAAYH,GAAxDgB,EAAR,EAAQA,IAAK5W,EAAb,EAAaA,SAEP+W,EAAmB,yCAAG,iCAAA7jB,EAAA,6DACpB8jB,EAAY7f,IAAauF,KAAYC,KAAO,UAAY,UADpC,kBAIPc,EAAiBE,EAAqBqZ,EAAW,CAAC9mB,GAAQ,CAAE0I,MAAOqd,EAAUzV,aAJtE,cAIlBrC,EAJkB,OAKxBiX,GAAe,GALS,SAMFjX,EAAGC,OAND,OAMlBC,EANkB,OAOxBlB,EAAU8Y,EAAUzV,WAAYnC,EAAQC,iBAPhB,kDASxBd,EAAWjH,EAAE,SAAUA,EAAE,uFATD,yBAWxB6e,GAAe,GAXS,6EAAH,qDAgCzB,OAhBAniB,qBAAU,WACR,IAAMgkB,EAActC,GAAmB/b,GACVqe,EAAYhS,GAAG,IAAMgS,EAAYN,IAAIZ,GAIvDkB,EAAYhS,GAAG,IAAMgS,EAAYJ,GAAGjB,GAC7CN,EAAgB,CACdsB,IAAK,gDACLjY,KAAM,CAAE4B,IAAKuB,aAAgB8T,GAAesB,MAAO,SAGrD5B,EAAgB,MAPhBA,EAAgB,CAAEsB,IAAK,+BASxB,CAAChe,EAAOmd,EAAYH,EAAcN,IAGnC,gBAAC,IAAD,CAAM6B,YA/CgB,WACtB1e,EAAO2e,SAASC,UAChB5e,EAAO6e,WAAWD,UAClB5e,EAAO8e,gBA4C6BC,WAzCf,WACrB/e,EAAO2e,SAASK,SAChBhf,EAAO6e,WAAWG,SAClBhf,EAAOif,gBAsCP,UACE,eAAC,IAAD,CAAY3Y,EAAE,OAAd,SACE,gBAAC,IAAD,CAAME,WAAW,SAAjB,UACE,eAAC,KAAD,CAAY/G,QAAQ,OAAO8Q,MAAM,KAAKhR,QAzDzB,WACnBkd,EAAS,IACTM,EAAW,GACXP,KAsDmEld,GAAG,MAAhE,SACE,eAAC,IAAD,CAAeH,MAAM,WAEvB,eAAC,GAAD,UACE,eAAC,IAAD,CAASoR,MAAM,KAAf,SAAqBzS,EAAE,oBAEzB,eAAC,GAAD,CAAa2M,YAAa/L,EAAUa,QAASgd,EAA7C,SACG7d,IAAauF,KAAYC,KAAOpG,EAAE,MAAQA,EAAE,eAInD,gBAAC,IAAD,CAAUqM,GAAG,OAAb,UACE,gBAAC,IAAD,CAAM3D,WAAW,SAASC,eAAe,gBAAgB7D,GAAG,MAA5D,UACE,gBAAC,KAAD,CAAM8D,UAAU,QAAQhH,MAAM,aAA9B,UACG5B,EAAE,UADL,OAGA,gBAAC,IAAD,CAAM0I,WAAW,SAAjB,UACE,eAAC,IAAD,CAAalH,GAAG,UAChB,eAAC,KAAD,CAAMwL,MAAI,EAACR,cAAc,YAAzB,uBAKJ,eAAC,IAAD,CACEnK,MAAOA,EACP+e,YAjHkB,SAACC,GACzB,IAAMC,EAAYlD,GAAmBiD,GAErC,GAAIC,EAAUvW,GAAG,GACfkU,EAAW,OACN,CACL,IAAMsC,EAAY7lB,IAAOoP,YAAYlP,KAAK0lB,GACpCxB,EAAepkB,IAAOoP,YAAYlP,KAAK4jB,GACvCO,EAAcrkB,IAAOoP,YAAYlP,KAAK,KAEtC4lB,EADaD,EAAUrW,UAAU4U,GAActU,UAAUuU,GAC1BjE,gBAErCmD,EAAWuC,EAAoB,IAAM,IAAMA,GAE7C7C,EAAS0C,IAoGHI,UAAW9B,EACX+B,WAAY,CAAEjY,UAAWvP,GAAW0kB,KAErCe,GACC,eAAC,KAAD,CAAM/d,MAAM,UAAUkH,SAAS,OAAOP,GAAG,MAAMK,UAAU,QAAzD,SACG5I,EAAE8e,EAAauB,IAAKvB,EAAa1W,QAGtC,eAAC,KAAD,CAAMQ,UAAU,QAAQ9D,GAAG,OAAOlD,MAAM,aAAakH,SAAS,OAAOxH,MAAO,CAAEgC,OAAQ,QAAtF,SACGpJ,GAAW8F,EAAE,qBAAsB,CAAEof,QAASK,MAEjD,eAAC,KAAD,CACEkC,KAAK,UACLC,IAAK,EACLC,IAAK,IACLxf,MAAO2c,EACP8C,eAAgBlC,EAChBmC,WAAY7nB,EAAO,UAAM8kB,EAAQnW,QAAQmW,EAAU,EAAI,EAAI,GAAxC,KAAgD,GACnEgD,KAAM,IACNvY,UAAWvP,GAAW0kB,EACtB9Z,GAAG,MACHR,WAAYpK,GAAW0kB,EAAc,GAAK,sBAE5C,gBAAC,IAAD,CAAMlW,WAAW,SAASC,eAAe,gBAAgB7D,GAAG,OAA5D,UACGqZ,GAAiB9J,KAAI,SAAC4N,GAKrB,OACE,eAAC,IAAD,CAEExP,MAAM,KACN9Q,QAAQ,WACRF,QATgB,WAClBme,EAAoBqC,IASlBxY,UAAWvP,GAAW0kB,EACtBtd,MAAO,CAAEC,KAAM,GANjB,mBAQM0gB,EARN,MACOA,MAWX,eAAC,IAAD,CACExP,MAAM,KACN9Q,QAAQ,WACRF,QAAS,kBAAMme,EAAoB,MACnCnW,UAAWvP,GAAW0kB,EAJxB,SAMG5e,EAAE,YAGP,eAAC,IAAD,CAAK8E,GAAG,MAAR,SACG5K,EACC,eAAC,IAAD,CACEmH,MAAM,OACNoI,UAAWvP,GAAWuP,EACtBhI,QAAS+e,EACTvX,UAAW2V,EACX1V,QAAS0V,EAAc,eAAC,IAAD,CAAehd,MAAM,eAAeuH,MAAI,IAAM,KALvE,SAOGnJ,EAAEqgB,KAGL,eAACrI,GAAA,EAAD,CAAqB3W,MAAM,WAG/B,eAAC,KAAD,CAAM2D,GAAG,IAAI8D,SAAS,OAAOsE,WAAY,EAAGxL,MAAM,aAAlD,SACG5B,EAAE,wFCpGEkiB,GA7IqC,SAAC,GAO9C,IANLrhB,EAMI,EANJA,MACA6F,EAKI,EALJA,UACA4U,EAII,EAJJA,aACAC,EAGI,EAHJA,eACAjK,EAEI,EAFJA,eACAC,EACI,EADJA,eAEA,EAA0BpV,mBAAgB,CACxCgmB,mBAAmB,EACnBvhB,SAAUuF,KAAYC,OAFxB,mBAAO/M,EAAP,KAAc+oB,EAAd,KAIQpiB,EAAMC,eAAND,EACAlB,EAAUoF,eAAVpF,MACAkI,EAAiBD,eAAjBC,aACA9M,EAAYyD,cAAZzD,QACFgD,EAAWC,cACTglB,EAAgC9oB,EAAhC8oB,kBAAmBvhB,EAAavH,EAAbuH,SACrByhB,EAAgB1X,KAAKD,MAA+C,KAAtC7J,EAAM7E,cAAgBsmB,MACpDC,EAAkB3hB,IAAauF,KAAYC,KAAOpG,EAAE,MAAMqW,cAAgBrW,EAAE,QAAQqW,cAC1F,EAA+CxG,aAC7C,sBAAKvO,MAAO,CAAE4X,WAAY,UAA1B,mBAA0CpP,GAAYpD,GAAtD,UACA,CAAEqJ,UAAW,QAFPC,EAAR,EAAQA,UAAWE,EAAnB,EAAmBA,eAAgBD,EAAnC,EAAmCA,QAiB7BuS,GAXAlH,IAAgBC,GAII,OAApB1a,EAAM+K,UASN6W,EAAa,kBACjBL,GAAS,SAACM,GAAD,mBAAC,eACLA,GADI,IAEPP,mBAAmB,QAGjBQ,EAAoB,SAACC,GACzBR,GAAS,SAACM,GAAD,mBAAC,eACLA,GADI,IAEPP,mBAAmB,EACnBvhB,SAAUgiB,QAWRjS,EAAa,yCAAG,uBAAAhU,EAAA,sEACdO,EAASqB,aAAgB,CAAErE,UAASsE,OAAQ,CAACqC,EAAMlH,UADrC,OAGpB8oB,IAEAzb,EACEhH,EAAE,YACFA,EAAE,8BAA+B,CAC/BY,SAAU2hB,KARM,2CAAH,qDAiBnB,OACE,gBAAC,GAAD,CAAUjF,UAAW6E,EAAmB7e,OAAO,QAA/C,UACE,gBAAC,IAAD,CAAM8X,iBAAkBd,GAAoBxb,EAAO,QAAnD,UACE,eAAC,GAAD,CACEhE,OAAO,OACPnB,MAAOkH,EAAMlH,MACbwS,KAAM,eAAC,KAAD,CAAuBvK,MAAM,QAAQJ,GAAG,MAAMH,MAAM,SAC1DsD,MAAO3E,EAAE,UAEX,gBAAC,IAAD,CAAUwI,EAAE,OAAZ,UACE,eAAC,GAAD,CAAiB9B,UAAWA,EAAWR,WAAYoL,EAAgB5D,WAAY4N,IAC/E,eAAC,GAAD,CAAgB9N,OAAQgV,EAAkB/U,QAAS+U,EAAnD,SACGA,EACC,uCACE,eAAC,GAAD,CAAcvc,YAAapF,EAAMoF,YAAanB,GAAG,QACjD,eAAC,IAAD,CACEnD,QAAQ,UACRN,MAAM,OACNI,QAAS,kBAAMkhB,EAAkBxc,KAAYC,OAC7CtB,GAAG,MACH2E,UAAW+Y,GAAoBH,EALjC,SAOGriB,EAAE,cAEL,eAAC,IAAD,CACE2B,QAAQ,SACRN,MAAM,OACNI,QAAS,kBAAMkhB,EAAkBxc,KAAYyH,OAC7CnE,UAAW+Y,GAAoBH,EAJjC,SAMGriB,EAAE,mBAIP,uCACE,sBAAKE,IAAK8P,EAAV,SACE,eAAC,IAAD,CAAQvG,UAAQ,EAACyC,UAvCxBtL,IAAauF,KAAYC,KAAO,eAAC,IAAD,CAAaxE,MAAM,iBAAoB,eAAC,IAAD,CAAeA,MAAM,iBAuC/BP,MAAM,OAAOyD,GAAG,MAAtE,SACG9E,EAAE,qBAAsB,CAAEY,SAAU2hB,QAGzC,eAAC,GAAD,CAActc,YAAapF,EAAMoF,cAChCiK,GAAkBD,OAIzB,eAAC,GAAD,CACEvJ,UAAWA,EACXR,WAAYqL,EACZ5E,YAAaxG,KAAYyH,KACzBF,WAAY6N,UAIlB,eAAC,GAAD,CACEmD,OAAQ+D,EACR7b,UAAW+J,EACX/P,SAAUA,EACV6d,eAjFiB,WACrB2D,GAAS,SAACM,GAAD,mBAAC,eACLA,GADI,IAEP9hB,SAAU8hB,EAAU9hB,WAAauF,KAAYC,KAAOD,KAAYyH,KAAOzH,KAAYC,WA+EjFzM,MAAOkH,EAAMlH,Y,UC3KfkpB,GAAS,kBAAMrqB,KAAKQ,MAAM2R,KAAKD,MAAQ,MA8C9BoY,GAzCM,SAACC,GACpB,MAAgD5mB,oBAAS,WACvD,OAAO4mB,EAAYF,QADrB,mBAAOG,EAAP,KAAyBC,EAAzB,KAGA,EAAgC9mB,oBAAS,GAAzC,mBAAO+mB,EAAP,KAAiBC,EAAjB,KACMC,EAAkBC,eAElBC,EAAQC,uBAAY,kBAAMJ,GAAY,KAAO,CAACA,IAC9CK,EAAUD,uBAAY,kBAAMJ,GAAY,KAAQ,CAACA,IA8BvD,OA5BAzmB,qBAAU,WACR,IAAIU,EAQJ,OANK8lB,GAAYF,EAAmB,IAClC5lB,EAAQqmB,YAAW,WACjBR,GAAoB,SAACS,GAAD,OAA0BA,EAAuB,OACpE,MAGE,WACLC,aAAavmB,MAEd,CAAC4lB,EAAkBE,EAAUD,IAEhCvmB,qBAAU,WACRumB,EAAoBF,EAAYF,QAC/B,CAACE,EAAWE,IAGfvmB,qBAAU,WACJ0mB,GACFH,EAAoBF,EAAYF,MAChCW,KAEAF,MAED,CAACA,EAAOE,EAAST,EAAWE,EAAqBG,IAE7C,CAAEJ,mBAAkBM,QAAOE,YCHrBI,GA1BqC,SAAC,GAAe,IAAb/iB,EAAY,EAAZA,MAC/CjG,EAAkBD,IAChBqoB,EAAqBF,GAAajiB,EAAM5E,eAAiBrB,EAAkB0nB,MAA3EU,iBACFa,EAAY1Z,GAAgB6Y,GAC1BhjB,EAAMC,eAAND,EACAlB,EAAUoF,eAAVpF,MAER,OACE,gBAAC,IAAD,CAAMsc,iBAAkBd,GAAoBxb,EAAO,QAAnD,UACE,eAAC,GAAD,CAAYhE,OAAO,OAAOqR,KAAM,eAAC,KAAD,CAAU3K,GAAG,MAAMH,MAAM,SAAWsD,MAAO3E,EAAE,SAAUrG,MAAOkH,EAAMlH,QACpG,gBAAC,IAAD,CAAU6O,EAAE,OAAZ,UACE,eAAC,GAAD,CAAiBkR,YAAU,IAC3B,eAAC,GAAD,UACE,gBAAC,KAAD,CAAM9Q,UAAU,SAAhB,UACE,eAAC,KAAD,CAAMoE,MAAI,EAAV,SAAYhN,EAAE,kBACd,eAAC,KAAD,CAAM8I,SAAS,OAAOkE,MAAI,EAA1B,oBACO6W,UAIX,eAAC,GAAD,CAAiBlX,YAAaxG,KAAYyH,KAAM8L,YAAU,WC0CnDoK,GAjE6B,SAAC,GAAe,IAAbjjB,EAAY,EAAZA,MACrClH,EAAsEkH,EAAtElH,MAAOiS,EAA+D/K,EAA/D+K,UAAW4C,EAAoD3N,EAApD2N,WAAYvI,EAAwCpF,EAAxCoF,YAAaF,EAA2BlF,EAA3BkF,WAAYC,EAAenF,EAAfmF,WACzDtL,EAAeD,IACbP,EAAYyD,cAAZzD,QACFkR,EAASnR,EAAiBC,EAASP,GACnC+T,IAAatC,GAASA,EAAOxF,OAAO8I,GAAG,GACvC4M,EAAe5N,GAActC,EAAOxK,WAAauF,KAAYC,KAC7DmV,EAAiB7N,GAActC,EAAOxK,WAAauF,KAAYyH,KAC/D+N,EAAejO,GAActC,EAAO5K,SAAW4K,EAAOxK,WAAauF,KAAYC,KAC/EwV,EAAiBlO,GAActC,EAAO5K,SAAW4K,EAAOxK,WAAauF,KAAYyH,KAEjF0D,EAAiBzG,GAAgB5E,EAAaF,GAC9CwL,EAAiB1G,GAAgB5E,EAAaD,GAE9C+d,EAA0BzS,EAAewK,gBAAgBjT,QAAQyI,EAAe0S,SAAW,EAAI,GAC/FC,EAA0B1S,EAAeuK,gBAAgBjT,QAAQ0I,EAAeyS,SAAW,EAAI,GAGrG,OAAIrqB,IAAUe,GAA8B,OAAdkR,EAE1B,eAAC,GAAD,CACE/K,MAAOA,EACP0a,eAAgBA,EAChBD,aAAcA,EACd5U,UAAS,OAAE0E,QAAF,IAAEA,OAAF,EAAEA,EAAQxF,OACnB0L,eAAgByS,EAChBxS,eAAgB0S,IAMH,OAAfzV,GAAuB7U,IAAUe,EAAe,EAEhD,eAAC,GAAD,CACEgM,UAAS,OAAE0E,QAAF,IAAEA,OAAF,EAAEA,EAAQxF,OACnB2V,eAAgBA,EAChBD,aAAcA,EACdza,MAAOA,EACPyQ,eAAgByS,EAChBxS,eAAgB0S,IAMlBtqB,EAAQe,EACH,eAAC,GAAD,CAAemG,MAAOA,IAK7B,eAAC,GAAD,CACEA,MAAOA,EACP0a,eAAgBA,EAChBD,aAAcA,EACdM,eAAgBA,EAChBD,aAAcA,EACdjV,UAAS,OAAE0E,QAAF,IAAEA,OAAF,EAAEA,EAAQxF,OACnB0L,eAAgByS,EAChBxS,eAAgB0S,KC/DhBC,GAAQtlB,aAAO2O,IAAP3O,CAAH,2QAWP,qBAAGE,MAAkBW,aAAa0kB,MAUhCC,GAAQxlB,aAAOylB,KAAPzlB,CAAH,uIAIP,qBAAGE,MAAkBW,aAAa0kB,MAMhCG,GAAQ1lB,aAAOylB,KAAPzlB,CAAH,iIAKP,qBAAGE,MAAkBW,aAAa0kB,MAKhCI,GAAW3lB,aAAOylB,KAAPzlB,CAAH,wFACV,qBAAGE,MAAkBW,aAAa0kB,MAMhCK,GAAQ5lB,aAAOmN,IAAPnN,CAAH,2SACW,qBAAGE,MAAkBkP,KAAKC,cAChC,qBAAGnP,MAAkB2lB,QAAQC,UAC5B,kBAAsB,UAAtB,EAAGC,IAA6B,WAAa,gBAC3C,kBAAsB,UAAtB,EAAGA,IAA6B,mBAAqB,sBAG3D,kBAAsB,UAAtB,EAAGA,IAA6B,eAAiB,kBAE1D,qBAAG7lB,MAAkBW,aAAa0kB,MAEjB,qBAAGrlB,MAAkB8lB,MAAM5W,QAEjC,kBAAsB,UAAtB,EAAG2W,IAA6B,mBAAqB,sBAIvDE,GAA2B,WACtC,IAAMzoB,EAAQb,IACRkhB,EAAgBhV,WAAWoC,aAAuBzN,EAAO,EAAG,IAClE,EAA4BsgB,sBAAW,CACrCC,MAAO,EACPC,IAAKH,EACLI,SAAU,EACVC,SAAU,IAJJC,EAAR,EAAQA,QAASC,EAAjB,EAAiBA,OAOXC,EAAYvf,iBAAOsf,GAMzB,OAJAtgB,qBAAU,WACRugB,EAAUlf,QAAQ0e,KACjB,CAACA,EAAeQ,IAGjB,gBAAC,IAAD,CAAK3F,GAAG,OAAO1W,SAAS,WAAWkkB,QAAQ,eAA3C,UACE,eAACZ,GAAD,CAAO9J,KAAM,EAAb,SACE,eAAC,IAAD,MAEF,gBAACoK,GAAD,CAAOG,IAAI,OAAX,UACE,eAACP,GAAD,CAAOpX,MAAI,EAACR,cAAc,YAA1B,qBAGA,eAAC8X,GAAD,CAAOxb,SAAS,OAAhB,oBAA4BiU,YAWvBgI,GAAwC,SAAC,GAAwB,IAAtBvhB,EAAqB,EAArBA,SAAUwhB,EAAW,EAAXA,KAC1DC,EAA4BppB,IAC1BmnB,EAAqBF,GAAamC,EAA4B3C,MAA9DU,iBACFa,EAAY1Z,GAAgB6Y,GAC1BhjB,EAAMC,eAAND,EAER,OACE,gBAAC,IAAD,CAAKklB,GAAG,OAAOtkB,SAAS,WAAxB,UACE,gBAAC4jB,GAAD,CAAOG,IAAI,QAAX,UACE,eAACP,GAAD,CAAOpX,MAAI,EAACpL,MAAM,YAAlB,SACwB,IAArBohB,EAAyBhjB,EAAE,WAAa6jB,IAE3C,eAACU,GAAD,CAAUzb,SAAS,OAAnB,mBAA8BtF,GAA9B,OAAyCxD,EAAEglB,SAE7C,eAACd,GAAD,CAAOhK,MAAO,EAAd,SACE,eAAC,KAAD,UCzHFiL,GAAoBvmB,aAAOmN,IAAPnN,CAAH,qRAQP,qBAAGE,MAAkB2lB,QAAQC,UAC1B,qBAAG5lB,MAAkB8lB,MAAMQ,WACxB,qBAAGtmB,MAAkBkP,KAAKC,cAE5C,qBAAGnP,MAAkBW,aAAa0kB,MAKhCkB,GAAOzmB,KAAOC,IAAV,+GA0CKymB,GAnCK,WAClB,IAAQpjB,EAAW2b,KAAX3b,OACFxH,EAAeD,IACftB,EAASU,IAiBf,OACE,gBAACsrB,GAAD,WACE,eAAC,KAAD,CAAYxjB,QAAQ,OAAO8Q,MAAM,KAAKhR,QAjBlB,WACtBS,EAAOqjB,aAgBL,SACE,eAAC,IAAD,CAAe3jB,MAAM,UAAUP,MAAM,WAEvC,eAACgkB,GAAD,CAAM5jB,QAZgB,WACxB,IAAM+jB,EAAoBrsB,EAAOssB,WAAU,SAAC5kB,GAAD,OAAWA,EAAMlH,QAAUe,KAEtEwH,EAAOwjB,QAAQF,EAAoB,GACnCtjB,EAAO8a,UAQL,SACE,eAAC,IAAD,CAAgB3b,MAAM,WAExB,eAAC,KAAD,CAAYM,QAAQ,OAAO8Q,MAAM,KAAKhR,QAnBlB,WACtBS,EAAOyjB,aAkBL,SACE,eAAC,IAAD,CAAkB/jB,MAAM,UAAUP,MAAM,eCpCjCukB,GAhBO,WACpB,IAAMxqB,EAAoBD,IACpB+B,EAAWC,cACTjD,EAAYyD,cAAZzD,QAMR,OACE,eAAC,KAAD,CAAYyH,QAAQ,SAAS8K,GAAG,MAAMhL,QALpB,WAClBvE,EAASwE,cAAoB,KAI+BuH,UAAW7N,EAAmBqO,UAAWvP,EAArG,SACGkB,EAAoB,eAAC,IAAD,CAAe+N,MAAI,EAACvH,MAAM,UAAa,eAAC,IAAD,CAAaP,MAAM,OAAOO,MAAM,aCV5FikB,GAASjnB,KAAOC,IAAV,iGAIR,qBAAGC,MAAkBW,aAAa0kB,MAKhC2B,GAAoBlnB,KAAOC,IAAV,yHAInB,qBAAGC,MAAkBW,aAAa0kB,MAMhC4B,GAAoBnnB,KAAOC,IAAV,2EAGnB,qBAAGC,MAAkBW,aAAa0kB,MAKhC6B,GAAuBpnB,KAAOC,IAAV,qGAItB,qBAAGC,MAAkBW,aAAa0kB,MAuCvB8B,GAlCF,WACX,OACE,gBAAC,GAAD,CAASvd,WAAW,SAASF,EAAE,OAA/B,UACE,eAACqd,GAAD,UACE,eAAC,GAAD,MAEF,eAAC,GAAD,CAASld,eAAe,SAAxB,SACE,eAAC,GAAD,MAEF,eAACkd,GAAD,UACE,gBAAC,IAAD,CAAMnd,WAAW,SAASC,eAAe,WAAzC,UACE,eAACod,GAAD,UACE,eAAC,GAAD,CAAYviB,SAAS,IAAIwhB,KAAK,QAEhC,eAACc,GAAD,UACE,eAAC,KAAD,CACEnkB,QAAQ,SACRqD,GAAG,IACHgD,KAAK,uDACLke,OAAO,SACPC,IAAI,sBALN,SAOE,eAAC,IAAD,CAAU9kB,MAAM,OAAOO,MAAM,cAGjC,eAACokB,GAAD,UACE,eAAC,GAAD,e,UCzCGI,GAnBQ,WACrB,IAAM1rB,EAAeD,IACftB,EAASU,IACPK,EAAYyD,cAAZzD,QACFmsB,EAAgBC,aAAiB5rB,GAC/BwH,EAAW2b,KAAX3b,OACFhF,EAAWC,cAEjBT,qBAAU,WACR,GAAIwF,QAA2BH,IAAjBrH,QAAgDqH,IAAlBskB,GAA+B3rB,IAAiB2rB,EAAe,CACzG,IAAMb,EAAoBrsB,EAAOssB,WAAU,SAAC5kB,GAAD,OAAWA,EAAMlH,QAAUe,KAGtEwH,EAAOwjB,QAAQF,EAAoB,GACnCtjB,EAAO8a,YAER,CAACqJ,EAAe3rB,EAAcvB,EAAQ+I,EAAQhI,EAASgD,KCP7CqpB,GAXS,SAACC,EAAyBC,GAChD,IAAQvkB,EAAW2b,KAAX3b,OACFwkB,EAAWC,aAAYF,GAE7B/pB,qBAAU,WACJwF,GAAUukB,IAASC,GAAYxkB,EAAO4R,cAAgB0S,GACxDtkB,EAAOwjB,QAAQc,EAAiB,MAEjC,CAACtkB,EAAQwkB,EAAUD,EAAMD,KCF9BI,KAAWC,IAAI,CAACC,KAAUC,OAE1B,I,oCChBYC,G,MDgBNC,GAAeroB,KAAOC,IAAV,oJAkDHqoB,GAxCkC,SAAC,GAAc,IAAZT,EAAW,EAAXA,KAC1CtkB,EAAc0b,KAAd1b,UACFhJ,EAASU,IACTa,EAAeD,IACf4rB,EAAgB3rB,EAAe,EAAIA,EAAe,EAAIA,EACtDysB,EAAgBhuB,EAAOiuB,MAAK,SAACvmB,GAAD,OAAWA,EAAMlH,QAAU0sB,KACvDgB,EAAcluB,EAAOmuB,QAAQH,GAKnC,OAHAf,KACAG,GAAgBc,EAAaZ,GAG3B,gBAAC,IAAD,CAAKpiB,SAAS,SAAd,UACE,eAAC,GAAD,IACA,eAAC4iB,GAAD,UACE,eAAC,KAAD,CACEM,aAAcF,EACdG,SAAUrlB,EACVslB,aAAc,GACdC,cAAc,OACdC,UAAQ,EACRC,gBAAc,EACdC,gBAAc,EACdC,sBAAuB,IACvBC,8BAA+B,GAC/BhH,YAAU,EACVF,UAAQ,EACRmH,gBAAc,EAZhB,SAcG7uB,EAAOkb,KAAI,SAACxT,GAAD,OACV,eAAC,KAAD,UACE,eAAC,GAAD,CAAWA,MAAOA,KADFA,EAAMlH,kBErC9BsuB,GAAoBrpB,aAAOspB,IAAPtpB,CAAH,0aACD,qBAAGE,MAAkBkP,KAAKC,cAIrC,qBAAGnP,MAAkBC,OAAOopB,QAOf,qBAAGrpB,MAAkBkP,KAAKC,cAI9C,qBAAGnP,MAAkBW,aAAa0kB,MAKhCiE,GAAexpB,KAAOC,IAAV,oJAQZwpB,GAAYzpB,KAAOC,IAAV,2EAKTypB,GAAc1pB,KAAOC,IAAV,0HAIN,qBAAGvE,kBAA6C,QAAU,KAG/DiuB,GAAgB3pB,KAAOC,IAAV,wGAGf,qBAAGC,MAAkBW,aAAa0kB,MAMhCqE,GAAe5pB,KAAOC,IAAV,kMAaZ4pB,GAAS7pB,KAAOC,IAAV,mUACI,qBAAGC,MAAkBC,OAAOqS,YAMpB,qBAAGtS,MAAkBC,OAAO2pB,cAiGrCC,GArFW,WACxB,IAAMC,EAAkBlrB,mBAClBmrB,EAAWnrB,mBACXorB,EAAYprB,mBACZpD,EAAoBD,IACpBG,EAAkBD,IAClB2C,EAAWC,cACT6C,EAAMC,eAAND,EACFlF,EAASD,IA6Cf,OA1BA6B,qBAAU,WACR,IACMqsB,EAAaC,MAAS,WAC1B,IAAQ1lB,EAAWulB,EAAS9qB,QAAQkrB,wBAA5B3lB,OAGRpG,EAASgsB,aAAkB5lB,EALX,QAMf,IAEG6lB,EAAQC,aAAM,CAClBC,aAAc,EACdC,WAVgB,IAWhBC,OAAQR,EACRS,WAAY,CACV,CACEC,MAAO,EACPC,QAASZ,EAAU/qB,YAKzB,OAAO,WACLorB,EAAM5mB,aAEP,CAACumB,EAAWD,EAAU3rB,IAGvB,wCACI1C,GACA,eAACytB,GAAD,CACEtmB,QAAQ,WACR8Q,MAAM,KACNvG,UAAW1R,EAAkB,eAAC,IAAD,IAAoB,eAAC,IAAD,IACjDiH,QAlDgB,WACtB,IAAMkoB,GAAqBnvB,EAEvBmvB,IACFf,EAAgB7qB,QAAQuD,MAAMsoB,WAAa,2BAC3ChB,EAAgB7qB,QAAQuD,MAAMuoB,iBAnGV,kBAuGpBC,MAAM,WACJlB,EAAgB7qB,QAAQuD,MAAMsoB,WAAa,KAC1C,MAGL1sB,EAASgsB,aAAkBS,KAgCvB,SAMqB3pB,EAAlBxF,EAAoB,QAAa,YAGtC,gBAAC+tB,GAAD,WACE,gBAACH,GAAD,CAAcloB,IAAK0oB,EAAnB,UACE,gBAACJ,GAAD,WACG1tB,IAAWkD,KAAiB+rB,OAAS,eAAC,GAAD,IACrCjvB,IAAWkD,KAAiBgsB,QAAU,eAAC,GAAD,IACtClvB,IAAWkD,KAAiBwT,MAAQ,eAAC,GAAD,OAEvC,eAACiX,GAAD,CAAQvoB,IAAK4oB,IACb,eAACT,GAAD,CAAWnoB,IAAK2oB,EAAhB,SACE,eAAC,GAAD,SAGJ,eAACP,GAAD,CAAahuB,kBAAmBA,EAAhC,SACE,eAAC,GAAD,aChKJ2vB,GAAYrrB,KAAOC,IAAV,8CAITqrB,GAAStrB,KAAOC,IAAV,kEAKNsrB,GAAmBvrB,KAAOC,IAAV,uKAEA,qBAAGC,MAAkBkP,KAAKC,cAK5C,qBAAGnP,MAAkBW,aAAa0kB,MAuEvBiG,GAtDI,WACjB,IAAQloB,EAAW2b,KAAX3b,OACFmoB,EAAgBhwB,IAChBiwB,EAAc/vB,IACdO,EAASD,IACTiZ,EAjBe,SAACuW,EAAwBC,GAC9C,OAAID,EACK,EAGLC,EACK,EAGF,EAQaC,CAAeF,EAAeC,GAC5CptB,EAAWC,cACTjD,EAAYyD,cAAZzD,QAkBR,OACE,gBAACiwB,GAAD,WACE,eAACF,GAAD,UACE,eAAC,KAAD,CAAYtoB,QAAQ,OAAOF,QAAS,kBAAMS,EAAOqjB,aAAa9b,SAAU3O,IAAWkD,KAAiBwT,KAApG,SACE,eAAC,IAAD,CAAenQ,MAAM,OAAOO,MAAM,gBAGtC,eAACsoB,GAAD,UACE,gBAAC,IAAD,CAAYpW,YAAaA,EAAarB,MAAM,KAAK9Q,QAAQ,SAASoS,YAxBhD,SAACyW,GACvB,OAAQA,GACN,KAAK,EACHttB,EAASwE,cAAoB,IAC7B,MACF,KAAK,EACHxE,EAASgsB,cAAkB,IAC3BhsB,EAASwE,cAAoB,IAC7B,MACF,KAAK,EACL,QACExE,EAASwE,cAAoB,IAC7BxE,EAASgsB,cAAkB,MAY3B,UACE,eAAC,IAAD,UACE,eAAC,IAAD,CAAOtnB,MAAM,mBAEf,eAAC,IAAD,UACE,eAAC,IAAD,CAAWA,MAAM,mBAEnB,eAAC,IAAD,CAAgB6H,UAAWvP,EAA3B,SACE,eAAC,IAAD,CAAa0H,MAAM,wBAIzB,eAACqoB,GAAD,UACE,eAAC,KAAD,CAAYtoB,QAAQ,OAAOF,QAAS,kBAAMS,EAAOyjB,aAAalc,SAAU3O,IAAWkD,KAAiBwT,KAApG,SACE,eAAC,IAAD,CAAkBnQ,MAAM,OAAOO,MAAM,oBC7FzC6oB,GAAc7rB,KAAOC,IAAV,8CAIX6rB,GAAe9rB,KAAOC,IAAV,4DAkBH8rB,GAbD,WACZ,OACE,gBAAC,IAAD,CAAMnU,cAAc,SAASlT,OAAO,OAApC,UACE,eAACmnB,GAAD,UACE,eAAC,GAAD,MAEF,eAACC,GAAD,UACE,eAAC,GAAD,W,SHtBI1D,K,sBAAAA,E,kBAAAA,E,eAAAA,Q,KIYZ,I,MAAM4D,GAAehsB,KAAOC,IAAV,sJAMd,qBAAGC,MAAkBW,aAAaorB,MAKhCC,GAAOlsB,KAAOC,IAAV,kIAMM,qBAAGksB,UAA6B,UAAY,YA2C7CC,GA5BU,WACvB,IAEMvE,EAfQ,SAACnsB,EAA4BE,GAC3C,OAAIF,EACK0sB,GAASiE,QAGdzwB,EACKwsB,GAASkE,MAGXlE,GAASmE,UAMHC,CAFa/wB,IACFE,KAElBO,EAASD,IAEf,OACE,gBAAC+vB,GAAD,WACE,gBAAC,IAAD,CAAKtnB,OAAO,OAAOe,SAAS,SAASzD,SAAS,WAA9C,UACE,eAACkqB,GAAD,CAAMC,UAAWtE,IAASO,GAASmE,UAAnC,SACE,gBAAC,IAAD,CAAMziB,WAAW,SAASpF,OAAO,OAAjC,UACGxI,IAAWkD,KAAiB+rB,OAAS,eAAC,GAAD,IACrCjvB,IAAWkD,KAAiBgsB,QAAU,eAAC,GAAD,IACtClvB,IAAWkD,KAAiBwT,MAAQ,eAAC,GAAD,CAAWiV,KAAMA,SAG1D,eAACqE,GAAD,CAAMC,UAAWtE,IAASO,GAASkE,MAAnC,SACE,eAAC,GAAD,MAEF,eAACJ,GAAD,CAAMC,UAAWtE,IAASO,GAASiE,QAAnC,SACE,eAAC,GAAD,SAGJ,eAAC,GAAD,QC9CAI,GAAsBzsB,aAAO0sB,KAAP1sB,CAAH,kGACT,qBAAGE,MAAkBC,OAAOC,UAAU6T,aAuEvC0Y,GAlEuC,SAAC,GAA8B,IAA5B3kB,EAA2B,EAA3BA,UAAWD,EAAgB,EAAhBA,UAClE,EAA8CxK,oBAAS,GAAvD,mBAAOqvB,EAAP,KAAwBC,EAAxB,KACA,EAA8CtvB,oBAAS,GAAvD,mBAAOuvB,EAAP,KAAwBC,EAAxB,KACQ3rB,EAAMC,eAAND,EAeR,OACE,gBAAC,KAAD,CAAgB2E,MAAO3E,EAAE,YAAasI,SAAS,QAA/C,UACE,eAAC+iB,GAAD,UACE,eAAC,KAAD,UACE,eAAC,IAAD,CAAS5Y,MAAM,KAAf,SAAqBzS,EAAE,kBAG3B,gBAAC,KAAD,CAAWwI,EAAE,OAAOojB,SAAS,QAA7B,UACE,gBAAC,IAAD,CAAKC,UAAU,QAAQC,UAAU,OAAjC,UACE,eAAC,IAAD,CAAS9mB,GAAG,KAAKF,GAAG,OAApB,SACG9E,EAAE,8BAGL,eAAC,KAAD,CAAMgF,GAAG,IAAIpD,MAAM,aAAakD,GAAG,OAAnC,SACG9E,EAAE,gEAGL,wBAAO+rB,QAAQ,WAAWzqB,MAAO,CAAEwjB,QAAS,QAASvY,OAAQ,UAAWyf,aAAc,QAAtF,SACE,gBAAC,IAAD,CAAMtjB,WAAW,SAAjB,UACE,sBAAKpH,MAAO,CAAEC,KAAM,QAApB,SACE,eAAC,IAAD,CAAUgD,GAAG,WAAWkO,MAAM,KAAKwB,QAASuX,EAAiBtX,SAjC1C,WAC/BuX,GAAoBD,QAkCV,eAAC,KAAD,CAAM/e,GAAG,MAAT,SACGzM,EACC,qIAKR,wBAAO+rB,QAAQ,YAAYzqB,MAAO,CAAEwjB,QAAS,QAASvY,OAAQ,UAAWyf,aAAc,QAAvF,SACE,gBAAC,IAAD,CAAMtjB,WAAW,SAAjB,UACE,sBAAKpH,MAAO,CAAEC,KAAM,QAApB,SACE,eAAC,IAAD,CAAUgD,GAAG,YAAYkO,MAAM,KAAKwB,QAASyX,EAAiBxX,SAzC3C,WAC/ByX,GAAoBD,QA0CV,eAAC,KAAD,CAAMjf,GAAG,MAAT,SACGzM,EAAE,gGAKX,eAAC,IAAD,CAAQqB,MAAM,OAAOI,QA7CL,WACpBmF,IACAD,KA2CiD8C,UAAW+hB,IAAoBE,EAA5E,SACG1rB,EAAE,qBCpEAisB,GAA0B,wBAEjCC,GAAKttB,KAAOutB,GAAV,qKACG,qBAAGrtB,MAAkBC,OAAO2pB,cAiExB0D,GAvDuC,SAAC,GAAmB,IAAjBzlB,EAAgB,EAAhBA,UACvD,EAAkC0lB,cAAgB,EAAO,CAAEC,gBAAiBL,KAA5E,mBAAOM,EAAP,KAAkBC,EAAlB,KACQxsB,EAAMC,eAAND,EAMR,OACE,eAAC,KAAD,CAAgBsI,SAAS,QAAzB,SACE,gBAAC,KAAD,CAAWE,EAAE,OAAOojB,SAAS,QAA7B,UACE,eAAC,IAAD,CAAMjjB,eAAe,SAAS7D,GAAG,OAAjC,SACE,eAAC,KAAD,CAAOF,IAAI,2BAA2BvD,MAAO,IAAKiC,OAAQ,QAE5D,gBAAC,IAAD,CAAS0B,GAAG,KAAK6O,KAAK,KAAtB,UACG7T,EAAE,WADL,OAGA,gBAAC,IAAD,CAASgF,GAAG,KAAK6O,KAAK,KAAK/O,GAAG,OAA9B,UACG9E,EAAE,kDADL,OAGA,gBAAC,KAAD,CAAMgF,GAAG,IAAI8D,SAAS,OAAOlH,MAAM,aAAnC,UACG5B,EAAE,iDADL,OAGA,gBAACksB,GAAD,WACE,8BAAKlsB,EAAE,yEACP,8BAAKA,EAAE,8FAET,eAAC,KAAD,CAAMgF,GAAG,IAAIF,GAAG,OAAOgE,SAAS,OAAOlH,MAAM,aAA7C,SACG5B,EAAE,uFAEL,eAAC,KAAD,CACEgI,KAAK,6GACL2J,UAAQ,EACR7M,GAAG,OAHL,SAKG9E,EAAE,gBAEL,eAAC,IAAD,UACE,eAAC,IAAD,CAAQqB,MAAM,OAAOI,QAlCP,WACpBkF,KAiCmD7B,GAAG,OAAhD,SACG9E,EAAE,oBAGP,wBAAO+rB,QAAQ,WAAWzqB,MAAO,CAAEwjB,QAAS,QAASvY,OAAQ,UAAWyf,aAAc,QAAtF,SACE,gBAAC,IAAD,CAAMtjB,WAAW,SAAjB,UACE,sBAAKpH,MAAO,CAAEC,KAAM,QAApB,SACE,eAAC,IAAD,CAAUgD,GAAG,WAAWkO,MAAM,KAAKwB,QAASsY,EAAWrY,SAAU,kBAAMsY,GAAcD,QAEvF,eAAC,KAAD,CAAM9f,GAAG,MAAT,SAAgBzM,EAAE,sCCQfysB,UAjEK,WAClB,IAAQC,EAAcC,eAAdD,UACR,EAA8CL,cAAgB,EAAO,CACnEC,gBAAiB,wCADnB,mBAAOM,EAAP,KAAwBC,EAAxB,KAGQ3yB,EAAYyD,cAAZzD,QACFY,EAASD,IACTL,EAAkBD,IAClB2C,EAAWC,cACX2vB,EAAeC,cAErB,EAAkCxjB,aAAS,eAAC,GAAD,CAAgB3C,UAD3B,kBAAMimB,GAAmB,OAC0C,GAA5FG,EAAP,oBACA,EAAmCzjB,aAAS,eAAC,GAAD,KAAqB,GAA1D0jB,EAAP,oBAGMC,EAA6BxvB,iBAAOsvB,GACpCG,EAA8BzvB,iBAAOuvB,GA8B3C,OA3BAvwB,qBAAU,WACHkwB,GACHM,EAA2BnvB,YAE5B,CAAC6uB,EAAiBM,IAGrBxwB,qBAAU,WACJlC,KAG0B,IAFA4yB,KAAKC,MAAMC,aAAaC,QAAQtB,MAG1DkB,EAA4BpvB,aAG/B,CAACovB,EAA6B3yB,IAEjCkC,qBAAU,WACJowB,EAAe,GAEjB5vB,EAASswB,aAAsBtzB,MAEhC,CAAC4yB,EAAc5vB,EAAUhD,IAE5BuD,KACAR,KAEInC,IAAWkD,KAAiBC,QACvB,eAACwvB,GAAA,EAAD,IAIP,uCACE,eAAC,IAAD,UACE,yBAAQ7oB,IAAI,mCAAmCoR,KAAK,kBAAkBzR,GAAG,wBAE3E,eAAC,GAAD,UACE,gBAAC,GAAD,WACGmoB,EAAY,eAAC,GAAD,IAAc,eAAC,GAAD,IAC3B,eAAC,GAAD","file":"static/js/25.8d293a8e.chunk.js","sourcesContent":["const MINUTE_IN_SECONDS = 60\r\nconst HOUR_IN_SECONDS = 3600\r\nconst DAY_IN_SECONDS = 86400\r\nconst MONTH_IN_SECONDS = 2629800\r\nconst YEAR_IN_SECONDS = 31557600\r\n\r\n/**\r\n * Format number of seconds into year, month, day, hour, minute, seconds\r\n *\r\n * @param seconds\r\n */\r\nconst getTimePeriods = (seconds: number) => {\r\n  let delta = Math.abs(seconds)\r\n  const timeLeft = {\r\n    years: 0,\r\n    months: 0,\r\n    days: 0,\r\n    hours: 0,\r\n    minutes: 0,\r\n    seconds: 0,\r\n  }\r\n\r\n  if (delta >= YEAR_IN_SECONDS) {\r\n    timeLeft.years = Math.floor(delta / YEAR_IN_SECONDS)\r\n    delta -= timeLeft.years * YEAR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MONTH_IN_SECONDS) {\r\n    timeLeft.months = Math.floor(delta / MONTH_IN_SECONDS)\r\n    delta -= timeLeft.months * MONTH_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= DAY_IN_SECONDS) {\r\n    timeLeft.days = Math.floor(delta / DAY_IN_SECONDS)\r\n    delta -= timeLeft.days * DAY_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= HOUR_IN_SECONDS) {\r\n    timeLeft.hours = Math.floor(delta / HOUR_IN_SECONDS)\r\n    delta -= timeLeft.hours * HOUR_IN_SECONDS\r\n  }\r\n\r\n  if (delta >= MINUTE_IN_SECONDS) {\r\n    timeLeft.minutes = Math.floor(delta / MINUTE_IN_SECONDS)\r\n    delta -= timeLeft.minutes * MINUTE_IN_SECONDS\r\n  }\r\n\r\n  timeLeft.seconds = delta\r\n\r\n  return timeLeft\r\n}\r\n\r\nexport default getTimePeriods\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowForwardIcon,\r\n  Box,\r\n  Button,\r\n  Radio,\r\n  Flex,\r\n  Heading,\r\n  Text,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { setHistoryFilter, setHistoryPaneState, fetchHistory } from 'state/predictions'\r\nimport { useGetHistoryFilter, useGetIsFetchingHistory } from 'state/predictions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\nconst Filter = styled.label`\r\n  align-items: center;\r\n  cursor: pointer;\r\n  display: inline-flex;\r\n  margin-right: 16px;\r\n`\r\n\r\nconst StyledHeader = styled(Box)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  flex: none;\r\n  padding: 16px;\r\n`\r\n\r\nconst ButtonMenuContainer = styled.div`\r\n  width: 100%;\r\n  & > div {\r\n    width: 100%;\r\n  }\r\n\r\n  & button {\r\n    width: 100%;\r\n  }\r\n`\r\n\r\nconst getClaimParam = (historyFilter: HistoryFilter) => {\r\n  switch (historyFilter) {\r\n    case HistoryFilter.COLLECTED:\r\n      return true\r\n    case HistoryFilter.UNCOLLECTED:\r\n      return false\r\n    case HistoryFilter.ALL:\r\n    default:\r\n      return undefined\r\n  }\r\n}\r\n\r\ninterface HeaderProps {\r\n  activeTab: HistoryTabs\r\n  setActiveTab: (value: HistoryTabs) => void\r\n}\r\n\r\nexport enum HistoryTabs {\r\n  ROUNDS,\r\n  PNL,\r\n}\r\n\r\nconst Header: React.FC<HeaderProps> = ({ activeTab, setActiveTab }) => {\r\n  const historyFilter = useGetHistoryFilter()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(false))\r\n  }\r\n\r\n  const handleChange = (newFilter: HistoryFilter) => async () => {\r\n    if (newFilter !== historyFilter) {\r\n      await dispatch(fetchHistory({ account, claimed: getClaimParam(newFilter) }))\r\n      dispatch(setHistoryFilter(newFilter))\r\n    }\r\n  }\r\n\r\n  const switchTab = async (tabIndex: number) => {\r\n    setActiveTab(tabIndex)\r\n    await handleChange(HistoryFilter.ALL)()\r\n  }\r\n\r\n  return (\r\n    <StyledHeader>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n        <Heading as=\"h3\" size=\"md\">\r\n          {t('History')}\r\n        </Heading>\r\n        <Button onClick={handleClick} variant=\"text\" endIcon={<ArrowForwardIcon color=\"primary\" />} px=\"0\">\r\n          {t('Close')}\r\n        </Button>\r\n      </Flex>\r\n      <ButtonMenuContainer>\r\n        <ButtonMenu activeIndex={activeTab} scale=\"sm\" variant=\"subtle\" onItemClick={switchTab}>\r\n          <ButtonMenuItem>{t('Rounds')}</ButtonMenuItem>\r\n          <ButtonMenuItem>{t('PNL')}</ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </ButtonMenuContainer>\r\n      {activeTab === HistoryTabs.ROUNDS && (\r\n        <>\r\n          <Text color=\"textSubtle\" fontSize=\"12px\" mb=\"8px\">\r\n            {t('Filter')}\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.ALL}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.ALL)}\r\n              />\r\n              <Text ml=\"4px\">{t('All')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.COLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.COLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Collected')}</Text>\r\n            </Filter>\r\n            <Filter>\r\n              <Radio\r\n                scale=\"sm\"\r\n                checked={historyFilter === HistoryFilter.UNCOLLECTED}\r\n                disabled={isFetchingHistory || !account}\r\n                onChange={handleChange(HistoryFilter.UNCOLLECTED)}\r\n              />\r\n              <Text ml=\"4px\">{t('Uncollected')}</Text>\r\n            </Filter>\r\n          </Flex>\r\n        </>\r\n      )}\r\n    </StyledHeader>\r\n  )\r\n}\r\n\r\nexport default Header\r\n","import { useMemo } from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport { ethers } from 'ethers'\r\nimport { minBy, orderBy } from 'lodash'\r\nimport { State, NodeRound, ReduxNodeLedger, NodeLedger, ReduxNodeRound } from '../types'\r\nimport { parseBigNumberObj } from './helpers'\r\n\r\nexport const useGetRounds = () => {\r\n  const rounds = useSelector((state: State) => state.predictions.rounds)\r\n  return Object.keys(rounds).reduce((accum, epoch) => {\r\n    return {\r\n      ...accum,\r\n      [epoch]: parseBigNumberObj<ReduxNodeRound, NodeRound>(rounds[epoch]),\r\n    }\r\n  }, {}) as { [key: string]: NodeRound }\r\n}\r\n\r\nexport const useGetRound = (epoch: number) => {\r\n  const round = useSelector((state: State) => state.predictions.rounds[epoch])\r\n  return parseBigNumberObj<ReduxNodeRound, NodeRound>(round)\r\n}\r\n\r\nexport const useGetSortedRounds = () => {\r\n  const roundData = useGetRounds()\r\n  return orderBy(Object.values(roundData), ['epoch'], ['asc'])\r\n}\r\n\r\nexport const useGetBetByEpoch = (account: string, epoch: number) => {\r\n  const bets = useSelector((state: State) => state.predictions.ledgers)\r\n\r\n  if (!bets[account]) {\r\n    return null\r\n  }\r\n\r\n  if (!bets[account][epoch]) {\r\n    return null\r\n  }\r\n\r\n  return parseBigNumberObj<ReduxNodeLedger, NodeLedger>(bets[account][epoch])\r\n}\r\n\r\nexport const useGetIsClaimable = (epoch) => {\r\n  const claimableStatuses = useSelector((state: State) => state.predictions.claimableStatuses)\r\n  return claimableStatuses[epoch] || false\r\n}\r\n\r\n/**\r\n * Used to get the range of rounds to poll for\r\n */\r\nexport const useGetEarliestEpoch = () => {\r\n  return useSelector((state: State) => {\r\n    const earliestRound = minBy(Object.values(state.predictions.rounds), 'epoch')\r\n    return earliestRound?.epoch\r\n  })\r\n}\r\n\r\nexport const useIsHistoryPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isHistoryPaneOpen)\r\n}\r\n\r\nexport const useIsChartPaneOpen = () => {\r\n  return useSelector((state: State) => state.predictions.isChartPaneOpen)\r\n}\r\n\r\nexport const useGetCurrentEpoch = () => {\r\n  return useSelector((state: State) => state.predictions.currentEpoch)\r\n}\r\n\r\nexport const useGetIntervalSeconds = () => {\r\n  return useSelector((state: State) => state.predictions.intervalSeconds)\r\n}\r\n\r\nexport const useGetCurrentRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetRounds()\r\n  return rounds[currentEpoch]\r\n}\r\n\r\nexport const useGetPredictionsStatus = () => {\r\n  return useSelector((state: State) => state.predictions.status)\r\n}\r\n\r\nexport const useGetHistoryFilter = () => {\r\n  return useSelector((state: State) => state.predictions.historyFilter)\r\n}\r\n\r\nexport const useGetMinBetAmount = () => {\r\n  const minBetAmount = useSelector((state: State) => state.predictions.minBetAmount)\r\n  return useMemo(() => ethers.BigNumber.from(minBetAmount), [minBetAmount])\r\n}\r\n\r\nexport const useGetBufferSeconds = () => {\r\n  return useSelector((state: State) => state.predictions.bufferSeconds)\r\n}\r\n\r\nexport const useGetIsFetchingHistory = () => {\r\n  return useSelector((state: State) => state.predictions.isFetchingHistory)\r\n}\r\n\r\nexport const useGetHistory = () => {\r\n  return useSelector((state: State) => state.predictions.history)\r\n}\r\n\r\nexport const useGetHistoryByAccount = (account: string) => {\r\n  const bets = useGetHistory()\r\n  return bets ? bets[account] : []\r\n}\r\n\r\nexport const useGetLastOraclePrice = () => {\r\n  const lastOraclePrice = useSelector((state: State) => state.predictions.lastOraclePrice)\r\n  return useMemo(() => {\r\n    return ethers.BigNumber.from(lastOraclePrice)\r\n  }, [lastOraclePrice])\r\n}\r\n\r\n/**\r\n * The current round's lock timestamp will not be set immediately so we return an estimate until then\r\n */\r\nexport const useGetCurrentRoundLockTimestamp = () => {\r\n  const currentRound = useGetCurrentRound()\r\n  const intervalSeconds = useGetIntervalSeconds()\r\n\r\n  if (!currentRound.lockTimestamp) {\r\n    return currentRound.startTimestamp + intervalSeconds\r\n  }\r\n\r\n  return currentRound.lockTimestamp\r\n}\r\n","import { useEffect, useState } from 'react'\r\nimport { ethers } from 'ethers'\r\nimport useLastUpdated from 'hooks/useLastUpdated'\r\nimport { getChainlinkOracleContract } from 'utils/contractHelpers'\r\n\r\nconst useGetLatestOraclePrice = () => {\r\n  const [price, setPrice] = useState(ethers.BigNumber.from(0))\r\n  const { lastUpdated, setLastUpdated: refresh } = useLastUpdated()\r\n\r\n  useEffect(() => {\r\n    const fetchPrice = async () => {\r\n      const contract = getChainlinkOracleContract()\r\n      const response = await contract.latestAnswer()\r\n      setPrice(response)\r\n    }\r\n\r\n    fetchPrice()\r\n  }, [lastUpdated, setPrice])\r\n\r\n  return { price, lastUpdated, refresh }\r\n}\r\n\r\nexport default useGetLatestOraclePrice\r\n","import { useEffect } from 'react'\r\nimport { useAppDispatch } from 'state'\r\nimport { setLastOraclePrice } from 'state/predictions'\r\nimport useGetLatestOraclePrice from './useGetLatestOraclePrice'\r\n\r\nconst usePollOraclePrice = (seconds = 10) => {\r\n  const { price, refresh } = useGetLatestOraclePrice()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Poll for the oracle price\r\n  useEffect(() => {\r\n    refresh()\r\n    const timer = setInterval(() => {\r\n      refresh()\r\n    }, seconds * 1000)\r\n\r\n    return () => {\r\n      clearInterval(timer)\r\n    }\r\n  }, [seconds, refresh])\r\n\r\n  // If the price changed update global state\r\n  useEffect(() => {\r\n    dispatch(setLastOraclePrice(price.toJSON()))\r\n  }, [price, dispatch])\r\n}\r\n\r\nexport default usePollOraclePrice\r\n","import { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetEarliestEpoch, useGetPredictionsStatus } from 'state/predictions/hooks'\r\nimport { fetchClaimableStatuses, fetchLedgerData, fetchMarketData, fetchRounds } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { range } from 'lodash'\r\n\r\nconst POLL_TIME_IN_SECONDS = 10\r\n\r\nconst usePollPredictions = () => {\r\n  const timer = useRef<NodeJS.Timeout>(null)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const earliestEpoch = useGetEarliestEpoch()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  useEffect(() => {\r\n    // Clear old timer\r\n    if (timer.current) {\r\n      clearInterval(timer.current)\r\n    }\r\n\r\n    if (status !== PredictionStatus.INITIAL) {\r\n      timer.current = setInterval(async () => {\r\n        const liveCurrentAndRecent = [currentEpoch, currentEpoch - 1, currentEpoch - 2]\r\n\r\n        dispatch(fetchRounds(liveCurrentAndRecent))\r\n        dispatch(fetchMarketData())\r\n\r\n        if (account) {\r\n          const epochRange = range(earliestEpoch, currentEpoch + 1)\r\n          dispatch(fetchLedgerData({ account, epochs: epochRange }))\r\n          dispatch(fetchClaimableStatuses({ account, epochs: epochRange }))\r\n        }\r\n      }, POLL_TIME_IN_SECONDS * 1000)\r\n    }\r\n\r\n    return () => {\r\n      if (timer.current) {\r\n        clearInterval(timer.current)\r\n      }\r\n    }\r\n  }, [timer, account, status, currentEpoch, earliestEpoch, dispatch])\r\n}\r\n\r\nexport default usePollPredictions\r\n","import styled from 'styled-components'\r\n\r\nconst Container = styled.div`\r\n  background: ${({ theme }) => theme.colors.gradients.violetAlt};\r\n  height: calc(100vh - 64px);\r\n  min-height: calc(100vh - 64px);\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nexport default Container\r\n","import React, { useEffect, useRef, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled, { css, keyframes } from 'styled-components'\r\nimport { Button, CloseIcon, IconButton, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { CSSTransition } from 'react-transition-group'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBetHistory } from 'state/predictions/helpers'\r\nimport { useGetPredictionsStatus, useIsHistoryPaneOpen } from 'state/predictions/hooks'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\n\r\n/**\r\n * @see https://github.com/animate-css/animate.css/tree/main/source\r\n */\r\nconst bounceInKeyframe = keyframes`\r\n  from,\r\n  60%,\r\n  75%,\r\n  90%,\r\n  to {\r\n    animation-timing-function: cubic-bezier(0.215, 0.61, 0.355, 1);\r\n  }\r\n\r\n  from {\r\n    opacity: 0;\r\n    transform: translate3d(0, 3000px, 0) scaleY(5);\r\n  }\r\n\r\n  60% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  75% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.95);\r\n  }\r\n\r\n  90% {\r\n    transform: translate3d(0, -5px, 0) scaleY(0.985);\r\n  }\r\n\r\n  to {\r\n    transform: translate3d(0, 0, 0);\r\n  }\r\n`\r\n\r\nconst bounceOutKeyframe = keyframes`\r\n  20% {\r\n    transform: translate3d(0, 10px, 0) scaleY(0.985);\r\n  }\r\n\r\n  40%,\r\n  45% {\r\n    opacity: 1;\r\n    transform: translate3d(0, -20px, 0) scaleY(0.9);\r\n  }\r\n\r\n  to {\r\n    opacity: 0;\r\n    transform: translate3d(0, 2000px, 0) scaleY(3);\r\n  }\r\n`\r\n\r\nconst bounceInAnimation = css`\r\n  animation: ${bounceInKeyframe} 1s;\r\n`\r\n\r\nconst bounceOutAnimation = css`\r\n  animation: ${bounceOutKeyframe} 1s;\r\n`\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  bottom: 72px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  justify-content: center;\r\n  left: 0;\r\n  padding-left: 16px;\r\n  padding-right: 16px;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 50;\r\n\r\n  &.popup-enter-active {\r\n    ${bounceInAnimation}\r\n  }\r\n\r\n  &.popup-enter-done {\r\n    bottom: 72px;\r\n  }\r\n\r\n  &.popup-exit-done {\r\n    bottom: -2000px;\r\n  }\r\n\r\n  &.popup-exit-active {\r\n    ${bounceOutAnimation}\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.md} {\r\n    bottom: 16px;\r\n    justify-content: flex-end;\r\n\r\n    &.popup-enter-done {\r\n      bottom: 16px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Popup = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  border-radius: 32px;\r\n  color: #ffffff;\r\n  display: flex;\r\n  max-width: 320px;\r\n  padding: 16px 8px;\r\n`\r\n\r\nconst CollectWinningsPopup = () => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { t } = useTranslation()\r\n  const ref = useRef(null)\r\n  const timer = useRef(null)\r\n  const { account } = useWeb3React()\r\n  const predictionStatus = useGetPredictionsStatus()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  const handleClick = () => {\r\n    setIsOpen(false)\r\n    clearInterval(timer.current)\r\n  }\r\n\r\n  // Check user's history for unclaimed winners\r\n  useEffect(() => {\r\n    let isCancelled = false\r\n    if (account) {\r\n      timer.current = setInterval(async () => {\r\n        const bets = await getBetHistory({ user: account.toLowerCase(), claimed: false })\r\n\r\n        if (!isCancelled) {\r\n          // Filter out bets that were not winners\r\n          const winnerBets = bets.filter((bet) => {\r\n            return bet.position === bet.round.position\r\n          })\r\n\r\n          if (!isHistoryPaneOpen) {\r\n            setIsOpen(winnerBets.length > 0)\r\n          }\r\n        }\r\n      }, 30000)\r\n    }\r\n\r\n    return () => {\r\n      clearInterval(timer.current)\r\n      isCancelled = true\r\n    }\r\n  }, [account, timer, predictionStatus, setIsOpen, isHistoryPaneOpen])\r\n\r\n  // Any time the history pane is open make sure the popup closes\r\n  useEffect(() => {\r\n    if (isHistoryPaneOpen) {\r\n      setIsOpen(false)\r\n    }\r\n  }, [isHistoryPaneOpen, setIsOpen])\r\n\r\n  return (\r\n    <CSSTransition in={isOpen} unmountOnExit nodeRef={ref} timeout={1000} classNames=\"popup\">\r\n      <Wrapper ref={ref}>\r\n        <Popup>\r\n          <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n          <Button style={{ flex: 1 }} onClick={handleOpenHistory}>\r\n            {t('Collect Winnings')}\r\n          </Button>\r\n          <IconButton variant=\"text\" onClick={handleClick}>\r\n            <CloseIcon color=\"primary\" width=\"24px\" />\r\n          </IconButton>\r\n        </Popup>\r\n      </Wrapper>\r\n    </CSSTransition>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsPopup\r\n","import React, { createContext, Dispatch, useState } from 'react'\r\nimport SwiperCore from 'swiper'\r\n\r\ninterface Context {\r\n  swiper: SwiperCore\r\n  setSwiper: Dispatch<React.SetStateAction<SwiperCore>>\r\n  destroySwiper: () => void\r\n}\r\n\r\nexport const SwiperContext = createContext<Context>(undefined)\r\n\r\nconst SwiperProvider = ({ children }) => {\r\n  const [swiper, setSwiper] = useState<SwiperCore>(null)\r\n\r\n  const destroySwiper = () => {\r\n    if (swiper) {\r\n      swiper.destroy()\r\n      setSwiper(null)\r\n    }\r\n  }\r\n\r\n  return <SwiperContext.Provider value={{ swiper, setSwiper, destroySwiper }}>{children}</SwiperContext.Provider>\r\n}\r\n\r\nexport default SwiperProvider\r\n","import React, { useEffect } from 'react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { DefaultTheme, useTheme } from 'styled-components'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\n/**\r\n * When the script tag is injected the TradingView object is not immediately\r\n * available on the window. So we listen for when it gets set\r\n */\r\nconst tradingViewListener = async () =>\r\n  new Promise<void>((resolve) =>\r\n    Object.defineProperty(window, 'TradingView', {\r\n      configurable: true,\r\n      set(value) {\r\n        this.tv = value\r\n        resolve(value)\r\n      },\r\n    }),\r\n  )\r\n\r\nconst initializeTradingView = (TradingViewObj: any, theme: DefaultTheme, localeCode: string) => {\r\n  /* eslint-disable new-cap */\r\n  /* eslint-disable no-new */\r\n  // @ts-ignore\r\n  new TradingViewObj.widget({\r\n    autosize: true,\r\n    height: '100%',\r\n    symbol: 'BINANCE:BNBUSDT',\r\n    interval: '5',\r\n    timezone: 'Etc/UTC',\r\n    theme: theme.isDark ? 'dark' : 'light',\r\n    style: '1',\r\n    locale: localeCode,\r\n    toolbar_bg: '#f1f3f6',\r\n    enable_publishing: false,\r\n    allow_symbol_change: true,\r\n    container_id: 'tradingview_b239c',\r\n  })\r\n}\r\n\r\nconst TradingView = () => {\r\n  const { currentLanguage } = useTranslation()\r\n  const theme = useTheme()\r\n\r\n  useEffect(() => {\r\n    // @ts-ignore\r\n    if (window.TradingView) {\r\n      // @ts-ignore\r\n      initializeTradingView(window.TradingView, theme, currentLanguage.code)\r\n    } else {\r\n      tradingViewListener().then((tv) => {\r\n        initializeTradingView(tv, theme, currentLanguage.code)\r\n      })\r\n    }\r\n  }, [theme, currentLanguage])\r\n\r\n  return (\r\n    <Box overflow=\"hidden\" className=\"tradingview_container\">\r\n      <div id=\"tradingview_b239c\" />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default TradingView\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Card, CardBody, Heading } from '@pancakeswap/uikit'\r\n\r\ninterface NotificationProps {\r\n  title: string\r\n}\r\n\r\n// const BunnyDecoration = styled.div`\r\n//   position: absolute;\r\n//   top: -130px; // line up bunny at the top of the modal\r\n//   left: 0px;\r\n//   text-align: center;\r\n//   width: 100%;\r\n// `\r\n\r\nconst Wrapper = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex: 1;\r\n  height: 100%;\r\n  justify-content: center;\r\n`\r\n\r\nconst CardWrapper = styled.div`\r\n  position: relative;\r\n  width: 320px;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -130px;\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n  z-index: 5;\r\n`\r\n\r\nconst Notification: React.FC<NotificationProps> = ({ title, children }) => {\r\n  return (\r\n    <Wrapper>\r\n      <CardWrapper>\r\n        <BunnyDecoration>\r\n          <img src=\"/images/decorations/hiccup-bunny.png\" alt=\"bunny decoration\" height=\"121px\" width=\"130px\" />\r\n        </BunnyDecoration>\r\n        <Card>\r\n          <CardBody>\r\n            <Heading mb=\"24px\">{title}</Heading>\r\n            {children}\r\n          </CardBody>\r\n        </Card>\r\n      </CardWrapper>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default Notification\r\n","import React from 'react'\r\nimport { Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst ErrorNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n  return (\r\n    <Notification title={t('Error')}>\r\n      <Text as=\"p\" mb=\"24px\">\r\n        {t('This page can’t be displayed right now due to an error. Please check back soon.')}\r\n      </Text>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default ErrorNotification\r\n","import React from 'react'\r\nimport { Box, Button, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport Notification from './Notification'\r\n\r\nconst PauseNotification = () => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n\r\n  const handleOpenHistory = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <Notification title={t('Markets Paused')}>\r\n      <Box mb=\"24px\">\r\n        <Text as=\"p\">{t('Prediction markets have been paused due to an error.')}</Text>\r\n        <Text as=\"p\">{t('All open positions have been canceled.')}</Text>\r\n        <Text as=\"p\">\r\n          {t('You can reclaim any funds entered into existing positions via the History tab on this page.')}\r\n        </Text>\r\n      </Box>\r\n      <Button variant=\"primary\" width=\"100%\" onClick={handleOpenHistory}>\r\n        {t('Show History')}\r\n      </Button>\r\n    </Notification>\r\n  )\r\n}\r\n\r\nexport default PauseNotification\r\n","import { Bet, BetPosition } from 'state/types'\r\nimport { formatNumber } from 'utils/formatBalance'\r\n\r\nexport const formatUsd = (usd: number) => {\r\n  return `$${formatNumber(usd || 0, 3, 3)}`\r\n}\r\n\r\nexport const formatBnb = (bnb: number) => {\r\n  return bnb ? bnb.toLocaleString(undefined, { minimumFractionDigits: 3, maximumFractionDigits: 3 }) : '0'\r\n}\r\n\r\nexport const getMultiplier = (total: number, amount: number) => {\r\n  if (total === 0 || amount === 0) {\r\n    return 0\r\n  }\r\n\r\n  return total / amount\r\n}\r\n\r\n/**\r\n * Calculates the total payout given a bet\r\n */\r\nexport const getPayout = (bet: Bet, rewardRate = 1) => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const { bullAmount, bearAmount, totalAmount } = bet.round\r\n  const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n  return bet.amount * multiplier * rewardRate\r\n}\r\n\r\nexport const getNetPayout = (bet: Bet, rewardRate = 1): number => {\r\n  if (!bet || !bet.round) {\r\n    return 0\r\n  }\r\n\r\n  const payout = getPayout(bet, rewardRate)\r\n  return payout - bet.amount\r\n}\r\n","import React, { useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  ModalTitle,\r\n  ModalHeader,\r\n  InjectedModalProps,\r\n  Button,\r\n  AutoRenewIcon,\r\n  TrophyGoldIcon,\r\n  Text,\r\n  Flex,\r\n  Heading,\r\n  Box,\r\n  LinkExternal,\r\n  ModalCloseButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useAppDispatch } from 'state'\r\nimport { usePriceBnbBusd } from 'state/farms/hooks'\r\nimport { fetchClaimableStatuses } from 'state/predictions'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport useToast from 'hooks/useToast'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\n\r\ninterface CollectRoundWinningsModalProps extends InjectedModalProps {\r\n  payout: string\r\n  betAmount: string\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst Modal = styled(ModalContainer)`\r\n  overflow: visible;\r\n`\r\n\r\nconst BunnyDecoration = styled.div`\r\n  position: absolute;\r\n  top: -116px; // line up bunny at the top of the modal\r\n  left: 0px;\r\n  text-align: center;\r\n  width: 100%;\r\n`\r\n\r\nconst CollectRoundWinningsModal: React.FC<CollectRoundWinningsModalProps> = ({\r\n  payout,\r\n  betAmount,\r\n  epoch,\r\n  onDismiss,\r\n  onSuccess,\r\n}) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { account } = useWeb3React()\r\n  const { t } = useTranslation()\r\n  const { toastSuccess, toastError } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const predictionsContract = usePredictionsContract()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const dispatch = useAppDispatch()\r\n\r\n  // Convert payout to number for compatibility\r\n  const payoutAsFloat = parseFloat(payout)\r\n  const betAmountAsFloat = parseFloat(betAmount)\r\n\r\n  const handleClick = async () => {\r\n    try {\r\n      const tx = await callWithGasPrice(predictionsContract, 'claim', [[epoch]])\r\n      setIsPendingTx(true)\r\n      const receipt = await tx.wait()\r\n\r\n      if (onSuccess) {\r\n        await onSuccess()\r\n      }\r\n\r\n      await dispatch(fetchClaimableStatuses({ account, epochs: [epoch] }))\r\n      onDismiss()\r\n      setIsPendingTx(false)\r\n      toastSuccess(\r\n        t('Winnings collected!'),\r\n        <Box>\r\n          <Text as=\"p\" mb=\"8px\">\r\n            {t('Your prizes have been sent to your wallet')}\r\n          </Text>\r\n          {receipt.transactionHash && (\r\n            <LinkExternal href={getBscScanLink(receipt.transactionHash, 'transaction')}>\r\n              {t('View on BscScan')}\r\n            </LinkExternal>\r\n          )}\r\n        </Box>,\r\n      )\r\n    } catch (error) {\r\n      console.error('Unable to claim winnings', error)\r\n      toastError(\r\n        t('Error'),\r\n        error?.data?.message || t('Please try again. Confirm the transaction and make sure you are paying enough gas!'),\r\n      )\r\n    } finally {\r\n      setIsPendingTx(false)\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal minWidth=\"288px\" position=\"relative\" mt=\"124px\">\r\n      <BunnyDecoration>\r\n        <img src=\"/images/decorations/prize-bunny.png\" alt=\"bunny decoration\" height=\"124px\" width=\"168px\" />\r\n      </BunnyDecoration>\r\n      <ModalHeader>\r\n        <ModalTitle>\r\n          <Heading>{t('Collect Winnings')}</Heading>\r\n        </ModalTitle>\r\n        <ModalCloseButton onDismiss={onDismiss} />\r\n      </ModalHeader>\r\n      <ModalBody p=\"24px\">\r\n        <TrophyGoldIcon width=\"96px\" mx=\"auto\" mb=\"24px\" />\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text>{t('Your position')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text>{`${betAmountAsFloat.toFixed(4)} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${bnbBusdPrice.times(betAmountAsFloat).toFormat(2)}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\" mb=\"24px\">\r\n          <Text>{t('Your winnings')}</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text>{`${payout} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${bnbBusdPrice.times(payoutAsFloat).toFormat(2)}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        <Button\r\n          width=\"100%\"\r\n          mb=\"8px\"\r\n          onClick={handleClick}\r\n          isLoading={isPendingTx}\r\n          endIcon={isPendingTx ? <AutoRenewIcon spin color=\"currentColor\" /> : null}\r\n        >\r\n          {t('Confirm')}\r\n        </Button>\r\n      </ModalBody>\r\n    </Modal>\r\n  )\r\n}\r\n\r\nexport default CollectRoundWinningsModal\r\n","import React from 'react'\r\nimport { Button, ButtonProps, useModal } from '@pancakeswap/uikit'\r\nimport CollectRoundWinningsModal from './CollectRoundWinningsModal'\r\n\r\ninterface CollectWinningsButtonProps extends ButtonProps {\r\n  payout: string\r\n  betAmount: string\r\n  epoch: number\r\n  hasClaimed: boolean\r\n  onSuccess?: () => Promise<void>\r\n}\r\n\r\nconst CollectWinningsButton: React.FC<CollectWinningsButtonProps> = ({\r\n  payout,\r\n  betAmount,\r\n  epoch,\r\n  hasClaimed,\r\n  onSuccess,\r\n  children,\r\n  ...props\r\n}) => {\r\n  const [onPresentCollectWinningsModal] = useModal(\r\n    <CollectRoundWinningsModal payout={payout} betAmount={betAmount} epoch={epoch} onSuccess={onSuccess} />,\r\n    false,\r\n  )\r\n\r\n  return (\r\n    <Button onClick={onPresentCollectWinningsModal} disabled={hasClaimed} {...props}>\r\n      {children}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsButton\r\n","import React, { ReactNode, useState } from 'react'\r\nimport { AutoRenewIcon, Button, ButtonProps } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport useToast from 'hooks/useToast'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\n\r\ninterface ReclaimPositionButtonProps extends ButtonProps {\r\n  epoch: number\r\n  onSuccess?: () => Promise<void>\r\n  children?: ReactNode\r\n}\r\n\r\nconst ReclaimPositionButton: React.FC<ReclaimPositionButtonProps> = ({ epoch, onSuccess, children, ...props }) => {\r\n  const [isPendingTx, setIsPendingTx] = useState(false)\r\n  const { t } = useTranslation()\r\n  const predictionsContract = usePredictionsContract()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const { toastSuccess, toastError } = useToast()\r\n\r\n  const handleReclaim = async () => {\r\n    const tx = await callWithGasPrice(predictionsContract, 'claim', [[epoch]])\r\n    setIsPendingTx(true)\r\n\r\n    const receipt = await tx.wait()\r\n    if (receipt.status) {\r\n      if (onSuccess) {\r\n        await onSuccess()\r\n      }\r\n      setIsPendingTx(false)\r\n      toastSuccess(t('Position reclaimed!'))\r\n    } else {\r\n      setIsPendingTx(false)\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Button\r\n      onClick={handleReclaim}\r\n      isLoading={isPendingTx}\r\n      endIcon={isPendingTx ? <AutoRenewIcon spin color=\"white\" /> : null}\r\n      {...props}\r\n    >\r\n      {children || t('Reclaim Position')}\r\n    </Button>\r\n  )\r\n}\r\n\r\nexport default ReclaimPositionButton\r\n","import { ethers } from 'ethers'\r\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\r\nimport { formatBigNumber, formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport getTimePeriods from 'utils/getTimePeriods'\r\n\r\nexport const formatUsdv2 = (usd: ethers.BigNumber) => {\r\n  return `$${formatBigNumberToFixed(usd, 3, 8)}`\r\n}\r\n\r\nexport const formatBnbv2 = (bnb: ethers.BigNumber) => {\r\n  const value = bnb || ethers.BigNumber.from(0)\r\n  return formatBigNumberToFixed(value, 4)\r\n}\r\n\r\nexport const padTime = (num: number) => num.toString().padStart(2, '0')\r\n\r\nexport const formatRoundTime = (secondsBetweenBlocks: number) => {\r\n  const { hours, minutes, seconds } = getTimePeriods(secondsBetweenBlocks)\r\n  const minutesSeconds = `${padTime(minutes)}:${padTime(seconds)}`\r\n\r\n  if (hours > 0) {\r\n    return `${padTime(hours)}:${minutesSeconds}`\r\n  }\r\n\r\n  return minutesSeconds\r\n}\r\n\r\nexport const getHasRoundFailed = (round: NodeRound, buffer: number) => {\r\n  const closeTimestampMs = (round.closeTimestamp + buffer) * 1000\r\n  const now = Date.now()\r\n\r\n  if (closeTimestampMs !== null && now > closeTimestampMs && !round.oracleCalled) {\r\n    return true\r\n  }\r\n\r\n  return false\r\n}\r\n\r\nexport const getMultiplierv2 = (total: ethers.BigNumber, amount: ethers.BigNumber) => {\r\n  if (!total) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  if (total.eq(0) || amount.eq(0)) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const rewardAmountFixed = ethers.FixedNumber.from(total)\r\n  const multiplierAmountFixed = ethers.FixedNumber.from(amount)\r\n\r\n  return rewardAmountFixed.divUnsafe(multiplierAmountFixed)\r\n}\r\n\r\nexport const getPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\r\n  if (!ledger || !round) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const { bullAmount, bearAmount, rewardAmount } = round\r\n  const { amount, position } = ledger\r\n\r\n  const amountFixed = ethers.FixedNumber.from(formatBigNumber(amount))\r\n  const multiplier = getMultiplierv2(rewardAmount, position === BetPosition.BULL ? bullAmount : bearAmount)\r\n  return amountFixed.mulUnsafe(multiplier)\r\n}\r\n\r\nexport const getNetPayoutv2 = (ledger: NodeLedger, round: NodeRound) => {\r\n  if (!ledger || !round) {\r\n    return ethers.FixedNumber.from(0)\r\n  }\r\n\r\n  const payout = getPayoutv2(ledger, round)\r\n  const amount = ethers.FixedNumber.from(formatBigNumber(ledger.amount))\r\n\r\n  return payout.subUnsafe(amount)\r\n}\r\n\r\nexport const getPriceDifference = (price: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\r\n  if (!price || !lockPrice) {\r\n    return ethers.BigNumber.from(0)\r\n  }\r\n\r\n  return price.sub(lockPrice)\r\n}\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\nimport { ArrowUpIcon, ArrowDownIcon, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition } from 'state/types'\r\n\r\ninterface TagProps extends FlexProps {\r\n  bg?: string\r\n  startIcon?: ReactNode\r\n}\r\n\r\nconst StyledTag = styled(Flex)<{ bg: TagProps['bg'] }>`\r\n  background-color: ${({ bg, theme }) => theme.colors[bg]};\r\n  display: inline-flex;\r\n`\r\n\r\nexport const Tag: React.FC<TagProps> = ({ bg = 'success', startIcon, children, onClick, ...props }) => {\r\n  const icon = startIcon || <ArrowUpIcon color=\"white\" />\r\n\r\n  return (\r\n    <StyledTag\r\n      alignItems=\"center\"\r\n      justifyContent=\"center\"\r\n      borderRadius=\"4px\"\r\n      bg={bg}\r\n      py=\"4px\"\r\n      px=\"8px\"\r\n      onClick={onClick}\r\n      style={{ cursor: onClick ? 'pointer' : 'normal' }}\r\n      {...props}\r\n    >\r\n      {icon}\r\n      <Text textTransform=\"uppercase\" color=\"white\" ml=\"4px\">\r\n        {children}\r\n      </Text>\r\n    </StyledTag>\r\n  )\r\n}\r\n\r\ninterface PositionTagProps extends FlexProps {\r\n  betPosition: BetPosition\r\n}\r\n\r\nconst PositionTag: React.FC<PositionTagProps> = ({ betPosition, children, ...props }) => {\r\n  const isUpPosition = betPosition === BetPosition.BULL\r\n  const icon = isUpPosition ? <ArrowUpIcon color=\"white\" /> : <ArrowDownIcon color=\"white\" />\r\n\r\n  return (\r\n    <Tag bg={isUpPosition ? 'success' : 'failure'} startIcon={icon} {...props}>\r\n      {children}\r\n    </Tag>\r\n  )\r\n}\r\n\r\nexport default PositionTag\r\n","import React from 'react'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\nimport { Box, Flex, FlexProps, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition, NodeRound, Round } from 'state/types'\r\nimport { formatUsdv2, formatBnbv2 } from '../../helpers'\r\nimport { formatBnb, formatUsd } from '../History/helpers'\r\n\r\n// PrizePoolRow\r\ninterface PrizePoolRowProps extends FlexProps {\r\n  totalAmount: NodeRound['totalAmount']\r\n}\r\n\r\nconst getPrizePoolAmount = (totalAmount: PrizePoolRowProps['totalAmount']) => {\r\n  if (!totalAmount) {\r\n    return '0'\r\n  }\r\n\r\n  return formatBnbv2(totalAmount)\r\n}\r\n\r\nconst Row = ({ children, ...props }) => {\r\n  return (\r\n    <Flex alignItems=\"center\" justifyContent=\"space-between\" {...props}>\r\n      {children}\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport const PrizePoolRow: React.FC<PrizePoolRowProps> = ({ totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text bold>{t('Prize Pool')}:</Text>\r\n      <Text bold>{`${getPrizePoolAmount(totalAmount)} BNB`}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// Payout Row\r\ninterface PayoutRowProps extends FlexProps {\r\n  positionLabel: string\r\n  multiplier: number\r\n  amount: number\r\n}\r\n\r\nexport const PayoutRow: React.FC<PayoutRowProps> = ({ positionLabel, multiplier, amount, ...props }) => {\r\n  const { t } = useTranslation()\r\n  const formattedMultiplier = `${multiplier.toLocaleString(undefined, { maximumFractionDigits: 2 })}x`\r\n\r\n  return (\r\n    <Row height=\"18px\" {...props}>\r\n      <Text fontSize=\"12px\" textTransform=\"uppercase\">\r\n        {positionLabel}:\r\n      </Text>\r\n      <Flex alignItems=\"center\">\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\" bold>\r\n          {t('%multiplier% Payout', { multiplier: formattedMultiplier })}\r\n        </Text>\r\n        <Text mx=\"4px\">|</Text>\r\n        <Text fontSize=\"12px\" lineHeight=\"18px\">{`${formatBnb(amount)} BNB`}</Text>\r\n      </Flex>\r\n    </Row>\r\n  )\r\n}\r\n\r\ninterface LockPriceRowProps extends FlexProps {\r\n  lockPrice: NodeRound['lockPrice']\r\n}\r\n\r\nexport const LockPriceRow: React.FC<LockPriceRowProps> = ({ lockPrice, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\r\n      <Text fontSize=\"14px\">{formatUsdv2(lockPrice)}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\n// RoundResultBox\r\ninterface RoundResultBoxProps {\r\n  betPosition?: BetPosition\r\n  isNext?: boolean\r\n  isLive?: boolean\r\n  hasEntered?: boolean\r\n}\r\n\r\nconst getBackgroundColor = ({\r\n  theme,\r\n  betPosition,\r\n  isNext,\r\n  isLive,\r\n  hasEntered,\r\n}: RoundResultBoxProps & { theme: DefaultTheme }) => {\r\n  if (isNext) {\r\n    return 'linear-gradient(180deg, #53DEE9 0%, #7645D9 100%)'\r\n  }\r\n\r\n  if (hasEntered || isLive) {\r\n    return theme.colors.secondary\r\n  }\r\n\r\n  if (betPosition === BetPosition.BULL) {\r\n    return theme.colors.success\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return theme.colors.failure\r\n  }\r\n\r\n  return theme.colors.cardBorder\r\n}\r\n\r\nconst Background = styled(Box)<RoundResultBoxProps>`\r\n  background: ${getBackgroundColor};\r\n  border-radius: 16px;\r\n  padding: 2px;\r\n`\r\n\r\nconst StyledRoundResultBox = styled.div`\r\n  background: ${({ theme }) => theme.card.background};\r\n  border-radius: 14px;\r\n  padding: 16px;\r\n`\r\n\r\nexport const RoundResultBox: React.FC<RoundResultBoxProps> = ({\r\n  isNext = false,\r\n  hasEntered = false,\r\n  isLive = false,\r\n  children,\r\n  ...props\r\n}) => {\r\n  return (\r\n    <Background isNext={isNext} hasEntered={hasEntered} isLive={isLive} {...props}>\r\n      <StyledRoundResultBox>{children}</StyledRoundResultBox>\r\n    </Background>\r\n  )\r\n}\r\n\r\n/**\r\n * TODO: Remove\r\n *\r\n * This is a temporary function until we consolidate the data coming from the graph versus the node\r\n */\r\ninterface PrizePoolHistoryRowProps extends FlexProps {\r\n  totalAmount: number\r\n}\r\n\r\nconst getPrizePoolAmountHistory = (totalAmount: PrizePoolHistoryRowProps['totalAmount']) => {\r\n  if (!totalAmount) {\r\n    return '0'\r\n  }\r\n\r\n  return formatBnb(totalAmount)\r\n}\r\n\r\nexport const PrizePoolHistoryRow: React.FC<PrizePoolHistoryRowProps> = ({ totalAmount, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text bold>{t('Prize Pool')}:</Text>\r\n      <Text bold>{`${getPrizePoolAmountHistory(totalAmount)} BNB`}</Text>\r\n    </Row>\r\n  )\r\n}\r\n\r\ninterface LockPriceHistoryRowProps extends FlexProps {\r\n  lockPrice: Round['lockPrice']\r\n}\r\n\r\nexport const LockPriceHistoryRow: React.FC<LockPriceHistoryRowProps> = ({ lockPrice, ...props }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Row {...props}>\r\n      <Text fontSize=\"14px\">{t('Locked Price')}:</Text>\r\n      <Text fontSize=\"14px\">{formatUsd(lockPrice)}</Text>\r\n    </Row>\r\n  )\r\n}\r\n/**\r\n * END TEMPORARY COMPONENTS\r\n */\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { BoxProps, Flex, Skeleton, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition, NodeRound } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatUsdv2, getPriceDifference } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { LockPriceRow, PrizePoolRow, RoundResultBox } from './styles'\r\n\r\ninterface RoundResultProps extends BoxProps {\r\n  round: NodeRound\r\n  hasFailed?: boolean\r\n}\r\n\r\nconst getBetPosition = (closePrice: ethers.BigNumber, lockPrice: ethers.BigNumber) => {\r\n  if (!closePrice) {\r\n    return null\r\n  }\r\n\r\n  if (closePrice.eq(lockPrice)) {\r\n    return BetPosition.HOUSE\r\n  }\r\n\r\n  return closePrice.gt(lockPrice) ? BetPosition.BULL : BetPosition.BEAR\r\n}\r\n\r\nconst RoundResult: React.FC<RoundResultProps> = ({ round, hasFailed = false, children, ...props }) => {\r\n  const { lockPrice, closePrice, totalAmount } = round\r\n  const betPosition = getBetPosition(closePrice, lockPrice)\r\n  const isPositionUp = betPosition === BetPosition.BULL\r\n  const { t } = useTranslation()\r\n  const priceDifference = getPriceDifference(closePrice, lockPrice)\r\n\r\n  return (\r\n    <RoundResultBox betPosition={betPosition} {...props}>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n        {t('Closed Price')}\r\n      </Text>\r\n      {hasFailed ? (\r\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\r\n          {t('Canceled')}\r\n        </Text>\r\n      ) : (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          {closePrice ? (\r\n            <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\r\n              {formatUsdv2(closePrice)}\r\n            </Text>\r\n          ) : (\r\n            <Skeleton height=\"34px\" my=\"1px\" />\r\n          )}\r\n          <PositionTag betPosition={betPosition}>{formatUsdv2(priceDifference)}</PositionTag>\r\n        </Flex>\r\n      )}\r\n      {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n      <PrizePoolRow totalAmount={totalAmount} />\r\n      {children}\r\n    </RoundResultBox>\r\n  )\r\n}\r\n\r\nexport default RoundResult\r\n","import React from 'react'\r\nimport { BoxProps, Flex, Text } from '@pancakeswap/uikit'\r\nimport { BetPosition, Round } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatUsd } from '../History/helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { LockPriceHistoryRow, PrizePoolHistoryRow, RoundResultBox } from './styles'\r\n\r\ninterface RoundResultProps extends BoxProps {\r\n  round: Round\r\n}\r\n\r\nconst RoundResult: React.FC<RoundResultProps> = ({ round, children, ...props }) => {\r\n  const { lockPrice, closePrice, totalAmount } = round\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const isPositionUp = betPosition === BetPosition.BULL\r\n  const { t } = useTranslation()\r\n  const priceDifference = closePrice - lockPrice\r\n\r\n  return (\r\n    <RoundResultBox betPosition={betPosition} {...props}>\r\n      <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n        {t('Closed Price')}\r\n      </Text>\r\n      {round.failed ? (\r\n        <Text bold textTransform=\"uppercase\" color=\"textDisabled\" mb=\"16px\" fontSize=\"24px\">\r\n          {t('Canceled')}\r\n        </Text>\r\n      ) : (\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text color={isPositionUp ? 'success' : 'failure'} bold fontSize=\"24px\">\r\n            {formatUsd(closePrice)}\r\n          </Text>\r\n          <PositionTag betPosition={betPosition}>{formatUsd(priceDifference)}</PositionTag>\r\n        </Flex>\r\n      )}\r\n      {lockPrice && <LockPriceHistoryRow lockPrice={lockPrice} />}\r\n      <PrizePoolHistoryRow totalAmount={totalAmount} />\r\n      {children}\r\n    </RoundResultBox>\r\n  )\r\n}\r\n\r\nexport default RoundResult\r\n","import { useEffect, useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { getPredictionsContract } from 'utils/contractHelpers'\r\n\r\nconst useIsRefundable = (epoch: number) => {\r\n  const [isRefundable, setIsRefundable] = useState(false)\r\n  const { account } = useWeb3React()\r\n\r\n  useEffect(() => {\r\n    const fetchRefundableStatus = async () => {\r\n      const predictionsContract = getPredictionsContract()\r\n      const refundable = await predictionsContract.refundable(epoch, account)\r\n\r\n      if (refundable) {\r\n        // Double check they have not already claimed\r\n        const ledger = await predictionsContract.ledger(epoch, account)\r\n        setIsRefundable(ledger.claimed === false)\r\n      } else {\r\n        setIsRefundable(false)\r\n      }\r\n    }\r\n\r\n    if (account) {\r\n      fetchRefundableStatus()\r\n    }\r\n  }, [account, epoch, setIsRefundable])\r\n\r\n  return { isRefundable, setIsRefundable }\r\n}\r\n\r\nexport default useIsRefundable\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, PrizeIcon, BlockIcon, LinkExternal, useTooltip, InfoIcon } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useAppDispatch } from 'state'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePriceBnbBusd } from 'state/farms/hooks'\r\nimport { REWARD_RATE } from 'state/predictions/config'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { getBscScanLink } from 'utils'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { formatBnb, getNetPayout } from './helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport PositionTag from '../PositionTag'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\n\r\ninterface BetResultProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetResult = styled(Box)`\r\n  border: 2px solid ${({ theme }) => theme.colors.textDisabled};\r\n  border-radius: 16px;\r\n  margin-bottom: 24px;\r\n  padding: 16px;\r\n`\r\n\r\nconst Divider = styled.hr`\r\n  border: 1px solid ${({ theme }) => theme.colors.cardBorder};\r\n`\r\n\r\nconst BetResult: React.FC<BetResultProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n  const { isRefundable } = useIsRefundable(bet.round.epoch)\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n  const canClaim = !bet.claimed && bet.position === bet.round.position\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    <Text as=\"p\">{t('Includes your original position and your winnings, minus the %fee% fee.', { fee: '3%' })}</Text>,\r\n    { placement: 'auto' },\r\n  )\r\n\r\n  const isWinner = result === Result.WIN\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = isWinner ? getNetPayout(bet, REWARD_RATE) : bet.amount\r\n  const returned = payout + bet.amount\r\n\r\n  const getHeaderColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'warning'\r\n      case Result.LOSE:\r\n        return 'textSubtle'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getHeaderText = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return t('Win')\r\n      case Result.LOSE:\r\n        return t('Lose')\r\n      case Result.CANCELED:\r\n        return t('Canceled')\r\n      default:\r\n        return ''\r\n    }\r\n  }\r\n\r\n  const getHeaderIcon = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return <PrizeIcon color={getHeaderColor()} />\r\n      case Result.LOSE:\r\n      case Result.CANCELED:\r\n        return <BlockIcon color={getHeaderColor()} />\r\n      default:\r\n        return null\r\n    }\r\n  }\r\n\r\n  const getResultColor = () => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    // We have to mark the bet as claimed immediately because it does not update fast enough\r\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\r\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Heading>{t('Your History')}</Heading>\r\n        <Flex alignItems=\"center\">\r\n          <Heading as=\"h3\" color={getHeaderColor()} textTransform=\"uppercase\" bold mr=\"4px\">\r\n            {getHeaderText()}\r\n          </Heading>\r\n          {getHeaderIcon()}\r\n        </Flex>\r\n      </Flex>\r\n      <StyledBetResult>\r\n        {result === Result.WIN && !canClaim && (\r\n          <CollectWinningsButton\r\n            payout={formatBnb(payout)}\r\n            betAmount={bet.amount.toString()}\r\n            epoch={bet.round.epoch}\r\n            hasClaimed={!canClaim}\r\n            width=\"100%\"\r\n            mb=\"16px\"\r\n            onSuccess={handleSuccess}\r\n          >\r\n            {bet.claimed ? t('Already Collected') : t('Collect Winnings')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {bet.claimed && (\r\n          <Flex justifyContent=\"center\">\r\n            <LinkExternal href={getBscScanLink(bet.claimedHash, 'transaction')} mb=\"16px\">\r\n              {t('View on BscScan')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        )}\r\n        {result === Result.CANCELED && isRefundable && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} width=\"100%\" mb=\"16px\" />\r\n        )}\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your direction')}:</Text>\r\n          <PositionTag betPosition={bet.position}>\r\n            {bet.position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          <Text>{t('Your position')}</Text>\r\n          <Text>{`${formatBnb(bet.amount)} BNB`}</Text>\r\n        </Flex>\r\n        <Flex alignItems=\"start\" justifyContent=\"space-between\">\r\n          <Text bold>{isWinner ? t('Your winnings') : t('Your Result')}:</Text>\r\n          <Box style={{ textAlign: 'right' }}>\r\n            <Text bold color={getResultColor()}>{`${isWinner ? '+' : '-'}${formatBnb(payout)} BNB`}</Text>\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(payout).toNumber())}`}\r\n            </Text>\r\n          </Box>\r\n        </Flex>\r\n        {isWinner && (\r\n          <>\r\n            <Divider />\r\n            <Flex alignItems=\"start\" justifyContent=\"space-between\">\r\n              <Text fontSize=\"14px\" color=\"textSubtle\">\r\n                {t('Amount to collect')}:\r\n              </Text>\r\n              <Flex justifyContent=\"end\">\r\n                <Text fontSize=\"14px\" color=\"textSubtle\">{`${formatBnb(returned)} BNB`}</Text>\r\n                <span ref={targetRef}>\r\n                  <InfoIcon color=\"textSubtle\" ml=\"4px\" />\r\n                </span>\r\n              </Flex>\r\n              {tooltipVisible && tooltip}\r\n            </Flex>\r\n          </>\r\n        )}\r\n      </StyledBetResult>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default BetResult\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Bet } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getBscScanLink } from 'utils'\r\nimport { Flex, Text, Link, Heading } from '@pancakeswap/uikit'\r\nimport { Result } from 'state/predictions/helpers'\r\nimport { PayoutRow, RoundResultHistory } from '../RoundResult'\r\nimport BetResult from './BetResult'\r\nimport { getMultiplier } from './helpers'\r\n\r\ninterface BetDetailsProps {\r\n  bet: Bet\r\n  result: Result\r\n}\r\n\r\nconst StyledBetDetails = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.dropdown};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  padding: 24px;\r\n`\r\n\r\nconst BetDetails: React.FC<BetDetailsProps> = ({ bet, result }) => {\r\n  const { t } = useTranslation()\r\n  const { totalAmount, bullAmount, bearAmount } = bet.round\r\n  const bullMultiplier = getMultiplier(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplier(totalAmount, bearAmount)\r\n\r\n  return (\r\n    <StyledBetDetails>\r\n      {result === Result.CANCELED && (\r\n        <Text as=\"p\" color=\"failure\" mb=\"24px\">\r\n          {t(\r\n            'This round was automatically canceled due to an error. If you entered a position, please reclaim your funds below.',\r\n          )}\r\n        </Text>\r\n      )}\r\n      {result !== Result.LIVE && <BetResult bet={bet} result={result} />}\r\n      <Heading mb=\"8px\">{t('Round History')}</Heading>\r\n      <RoundResultHistory round={bet.round} mb=\"24px\">\r\n        <PayoutRow positionLabel={t('Up')} multiplier={bullMultiplier} amount={bullAmount} />\r\n        <PayoutRow positionLabel={t('Down')} multiplier={bearMultiplier} amount={bearAmount} />\r\n      </RoundResultHistory>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n        <Text>{t('Opening Block')}</Text>\r\n        <Link href={getBscScanLink(bet.round.lockBlock, 'block')} external>\r\n          {bet.round.lockBlock}\r\n        </Link>\r\n      </Flex>\r\n      <Flex alignItems=\"center\" justifyContent=\"space-between\">\r\n        <Text>{t('Closing Block')}</Text>\r\n        <Link href={getBscScanLink(bet.round.closeBlock, 'block')} external>\r\n          {bet.round.closeBlock}\r\n        </Link>\r\n      </Flex>\r\n    </StyledBetDetails>\r\n  )\r\n}\r\n\r\nexport default BetDetails\r\n","import React, { useState } from 'react'\r\nimport {\r\n  Box,\r\n  ChevronDownIcon,\r\n  ChevronUpIcon,\r\n  Flex,\r\n  IconButton,\r\n  PlayCircleOutlineIcon,\r\n  Text,\r\n  WaitIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport { useAppDispatch } from 'state'\r\nimport { Bet, PredictionStatus } from 'state/types'\r\nimport { REWARD_RATE } from 'state/predictions/config'\r\nimport { useGetCurrentEpoch, useGetPredictionsStatus } from 'state/predictions/hooks'\r\nimport { fetchLedgerData, markBetHistoryAsCollected } from 'state/predictions'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb, getNetPayout } from './helpers'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport BetDetails from './BetDetails'\r\n\r\ninterface BetProps {\r\n  bet: Bet\r\n}\r\n\r\nconst StyledBet = styled(Flex).attrs({ alignItems: 'center', p: '16px' })`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom: 2px solid ${({ theme }) => theme.colors.cardBorder};\r\n  cursor: pointer;\r\n`\r\n\r\nconst YourResult = styled(Box)`\r\n  flex: 1;\r\n`\r\n\r\nconst HistoricalBet: React.FC<BetProps> = ({ bet }) => {\r\n  const [isOpen, setIsOpen] = useState(false)\r\n  const { amount, round } = bet\r\n\r\n  const { t } = useTranslation()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const status = useGetPredictionsStatus()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const toggleOpen = () => setIsOpen(!isOpen)\r\n\r\n  const getRoundColor = (result) => {\r\n    switch (result) {\r\n      case Result.WIN:\r\n        return 'success'\r\n      case Result.LOSE:\r\n        return 'failure'\r\n      case Result.CANCELED:\r\n        return 'textDisabled'\r\n      default:\r\n        return 'text'\r\n    }\r\n  }\r\n\r\n  const getRoundPrefix = (result) => {\r\n    if (result === Result.LOSE) {\r\n      return '-'\r\n    }\r\n\r\n    if (result === Result.WIN) {\r\n      return '+'\r\n    }\r\n\r\n    return ''\r\n  }\r\n\r\n  const roundResult = getRoundResult(bet, currentEpoch)\r\n  const resultTextColor = getRoundColor(roundResult)\r\n  const resultTextPrefix = getRoundPrefix(roundResult)\r\n  const isOpenRound = round.epoch === currentEpoch\r\n  const isLiveRound = status === PredictionStatus.LIVE && round.epoch === currentEpoch - 1\r\n  const canClaim = !bet.claimed && bet.position === bet.round.position\r\n\r\n  // Winners get the payout, otherwise the claim what they put it if it was canceled\r\n  const payout = roundResult === Result.WIN ? getNetPayout(bet, REWARD_RATE) : amount\r\n\r\n  const renderBetLabel = () => {\r\n    if (isOpenRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <WaitIcon color=\"primary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"primary\" bold>\r\n            {t('Starting Soon')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    if (isLiveRound) {\r\n      return (\r\n        <Flex alignItems=\"center\">\r\n          <PlayCircleOutlineIcon color=\"secondary\" mr=\"6px\" width=\"24px\" />\r\n          <Text color=\"secondary\" bold>\r\n            {t('Live Now')}\r\n          </Text>\r\n        </Flex>\r\n      )\r\n    }\r\n\r\n    return (\r\n      <>\r\n        <Text fontSize=\"12px\" color=\"textSubtle\">\r\n          {t('Your Result')}\r\n        </Text>\r\n        <Text bold color={resultTextColor} lineHeight={1}>\r\n          {roundResult === Result.CANCELED ? t('Canceled') : `${resultTextPrefix}${formatBnb(payout)}`}\r\n        </Text>\r\n      </>\r\n    )\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    // We have to mark the bet as claimed immediately because it does not update fast enough\r\n    dispatch(markBetHistoryAsCollected({ account, betId: bet.id }))\r\n    dispatch(fetchLedgerData({ account, epochs: [bet.round.epoch] }))\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <StyledBet onClick={toggleOpen} role=\"button\">\r\n        <Box width=\"48px\">\r\n          <Text textAlign=\"center\">\r\n            <Text fontSize=\"12px\" color=\"textSubtle\">\r\n              {t('Round')}\r\n            </Text>\r\n            <Text bold lineHeight={1}>\r\n              {round.epoch.toLocaleString()}\r\n            </Text>\r\n          </Text>\r\n        </Box>\r\n        <YourResult px=\"24px\">{renderBetLabel()}</YourResult>\r\n        {roundResult === Result.WIN && canClaim && (\r\n          <CollectWinningsButton\r\n            hasClaimed={!canClaim}\r\n            epoch={bet.round.epoch}\r\n            payout={formatBnb(payout)}\r\n            onSuccess={handleSuccess}\r\n            betAmount={bet.amount.toString()}\r\n            scale=\"sm\"\r\n            mr=\"8px\"\r\n          >\r\n            {t('Collect')}\r\n          </CollectWinningsButton>\r\n        )}\r\n        {roundResult === Result.CANCELED && canClaim && (\r\n          <ReclaimPositionButton epoch={bet.round.epoch} scale=\"sm\" mr=\"8px\">\r\n            {t('Reclaim')}\r\n          </ReclaimPositionButton>\r\n        )}\r\n        {!isOpenRound && !isLiveRound && (\r\n          <IconButton variant=\"text\" scale=\"sm\">\r\n            {isOpen ? <ChevronUpIcon /> : <ChevronDownIcon />}\r\n          </IconButton>\r\n        )}\r\n      </StyledBet>\r\n      {isOpen && <BetDetails bet={bet} result={getRoundResult(bet, currentEpoch)} />}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default HistoricalBet\r\n","import React from 'react'\r\nimport { orderBy } from 'lodash'\r\nimport { Box, Heading, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Bet } from 'state/types'\r\nimport HistoricalBet from './HistoricalBet'\r\n\r\ninterface RoundsTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\nconst RoundsTab: React.FC<RoundsTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n\r\n  return hasBetHistory ? (\r\n    <>\r\n      {orderBy(bets, ['round.epoch'], ['desc']).map((bet) => (\r\n        <HistoricalBet key={bet.id} bet={bet} />\r\n      ))}\r\n    </>\r\n  ) : (\r\n    <Box p=\"24px\">\r\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n        {t('No prediction history available')}\r\n      </Heading>\r\n      <Text as=\"p\" textAlign=\"center\">\r\n        {t(\r\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n        )}\r\n      </Text>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default RoundsTab\r\n","// @ts-nocheck\r\n/**\r\n * There is ts-nocheck at the top of this file for the following reasons:\r\n * 1. You can't ignore block in TS at the moment https://stackoverflow.com/questions/51145180/how-to-use-ts-ignore-for-a-block\r\n * 2. Interpolations in keyframes are indeed supported and work fine https://github.com/styled-components/styled-components/issues/2263\r\n * But TypeScript definitions are not updated to reflect that - https://github.com/DefinitelyTyped/DefinitelyTyped/issues/48907\r\n * 3. Since this error is in the middle of a template string there is no way to add @ts-ignore on just that one line\r\n * without also messing prettier.\r\n *\r\n * I'll leave TODO: comment here to check back later if there is update to types\r\n *\r\n */\r\nimport styled, { keyframes } from 'styled-components'\r\n\r\ninterface SliceProps {\r\n  length: number\r\n  offset?: number\r\n}\r\n\r\nexport const DrawAnimation = keyframes`\r\n  from {\r\n    stroke-dasharray: 0, 339.292\r\n  }\r\n  to {\r\n    stroke-dasharray: ${({ length }: SliceProps) => length} 339.292;\r\n  }\r\n`\r\n\r\nexport const OffsetAnimation = keyframes`\r\n  from {\r\n    stroke-dashoffset: 0\r\n  }\r\n  to {\r\n    stroke-dashoffset: ${(props) => -props.offset};\r\n  }\r\n`\r\n\r\nexport const SVG = styled.svg`\r\n  width: 128px;\r\n  height: 128px;\r\n  transform: rotate(-90deg);\r\n`\r\n\r\nconst DefaultSlice = styled.circle<SliceProps>`\r\n  fill: none;\r\n  stroke-width: 16;\r\n  stroke-dasharray: ${(props) => `${props.length} 339.292`};\r\n`\r\n\r\nexport const LostSlice = styled(DefaultSlice)`\r\n  stroke: #ed4b9e;\r\n  animation: ${DrawAnimation} 1s ease;\r\n`\r\n\r\nexport const WonSlice = styled(DefaultSlice)`\r\n  stroke: #31d0aa;\r\n  stroke-dashoffset: ${(props) => -props.offset};\r\n  animation: ${DrawAnimation} 1s ease, ${OffsetAnimation} 1s ease;\r\n`\r\n\r\nexport const Wrapper = styled.div`\r\n  position: relative;\r\n  width: 128px;\r\n  height: 128px;\r\n`\r\n\r\nexport const Info = styled.div`\r\n  width: 128px;\r\n  height: 128px;\r\n  border-radius: 50%;\r\n  position: absolute;\r\n  left: 0;\r\n  top: 0;\r\n  z-index: 2;\r\n\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n`\r\n","import React from 'react'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { Text } from '@pancakeswap/uikit'\r\nimport { SVG, WonSlice, LostSlice, Wrapper, Info } from './PnlChartStyles'\r\n\r\n/**\r\n * Bare minimum chart that doesn't require any external dependencies\r\n * For details read here - https://www.smashingmagazine.com/2015/07/designing-simple-pie-charts-with-css/\r\n */\r\n\r\ninterface PnlChartProps {\r\n  won: number\r\n  lost: number\r\n}\r\n\r\n// 2 * Pi * R\r\nconst CIRCUMFERENCE = 339.292\r\n\r\nconst PnlChart: React.FC<PnlChartProps> = ({ lost, won }) => {\r\n  const { t } = useTranslation()\r\n  const percentageWon = ((won * 100) / (lost + won)).toFixed(2)\r\n  const paintLost = (lost / (won + lost)) * CIRCUMFERENCE\r\n  const paintWon = CIRCUMFERENCE - paintLost\r\n  return (\r\n    <Wrapper>\r\n      <SVG viewBox=\"0 0 128 128\">\r\n        <LostSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintLost} />\r\n        <WonSlice r=\"54\" cx=\"64\" cy=\"64\" length={paintWon} offset={paintLost} />\r\n      </SVG>\r\n      <Info>\r\n        <Text small lineHeight=\"1\">\r\n          {t('Won')}\r\n        </Text>\r\n        <Text bold fontSize=\"20px\" lineHeight=\"1\">\r\n          {won}/{won + lost}\r\n        </Text>\r\n        <Text small lineHeight=\"1\" color=\"textSubtle\">\r\n          {percentageWon}%\r\n        </Text>\r\n      </Info>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default PnlChart\r\n","import React from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnb } from '../helpers'\r\n\r\ntype SummaryType = 'won' | 'lost' | 'entered'\r\n\r\ninterface SummaryRowProps {\r\n  type: SummaryType\r\n  summary: any\r\n  bnbBusdPrice: BigNumber\r\n}\r\n\r\nconst summaryTypeColors = {\r\n  won: 'success',\r\n  lost: 'failure',\r\n  entered: 'text',\r\n}\r\n\r\nconst summaryTypeSigns = {\r\n  won: '+',\r\n  lost: '-',\r\n  entered: '',\r\n}\r\n\r\nconst SummaryRow: React.FC<SummaryRowProps> = ({ type, summary, bnbBusdPrice }) => {\r\n  const { t } = useTranslation()\r\n\r\n  const color = summaryTypeColors[type]\r\n  const { rounds, amount } = summary[type]\r\n  const totalRounds = summary.entered.rounds\r\n  const roundsInPercents = ((rounds * 100) / totalRounds).toFixed(2)\r\n  const typeTranslationKey = type.charAt(0).toUpperCase() + type.slice(1)\r\n  const displayAmount = type === 'won' ? summary[type].payout : amount\r\n\r\n  return (\r\n    <>\r\n      <Text mt=\"16px\" bold color=\"textSubtle\">\r\n        {t(typeTranslationKey)}\r\n      </Text>\r\n      <Flex>\r\n        <Flex flex=\"2\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {rounds} {t('Rounds').toLocaleLowerCase()}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {type === 'entered' ? t('Total').toLocaleLowerCase() : `${roundsInPercents}%`}\r\n          </Text>\r\n        </Flex>\r\n        <Flex flex=\"3\" flexDirection=\"column\">\r\n          <Text bold fontSize=\"20px\" color={color}>\r\n            {`${summaryTypeSigns[type]}${formatBnb(displayAmount)} BNB`}\r\n          </Text>\r\n          <Text fontSize=\"12px\" color=\"textSubtle\">\r\n            {`~$${formatBnb(bnbBusdPrice.times(displayAmount).toNumber())}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SummaryRow\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Box, Flex, Heading, Text, Button, Link, OpenNewIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { getRoundResult, Result } from 'state/predictions/helpers'\r\nimport { REWARD_RATE } from 'state/predictions/config'\r\nimport { getBscScanLink } from 'utils'\r\nimport { useGetCurrentEpoch } from 'state/predictions/hooks'\r\nimport { usePriceBnbBusd } from 'state/farms/hooks'\r\nimport { Bet, BetPosition } from 'state/types'\r\nimport { formatBnb, getMultiplier, getNetPayout } from '../helpers'\r\nimport PnlChart from './PnlChart'\r\nimport SummaryRow from './SummaryRow'\r\n\r\ninterface PnlTabProps {\r\n  hasBetHistory: boolean\r\n  bets: Bet[]\r\n}\r\n\r\ninterface PnlCategory {\r\n  rounds: number\r\n  amount: number\r\n}\r\n\r\ninterface PnlSummary {\r\n  won: PnlCategory & { payout: number; bestRound: { id: string; payout: number; multiplier: number } }\r\n  lost: PnlCategory\r\n  entered: PnlCategory\r\n}\r\n\r\nconst Divider = styled.div`\r\n  background-color: ${({ theme }) => theme.colors.backgroundDisabled};\r\n  height: 1px;\r\n  margin: 24px auto;\r\n  width: 100%;\r\n`\r\n\r\nconst initialPnlSummary: PnlSummary = {\r\n  won: {\r\n    rounds: 0,\r\n    amount: 0,\r\n    payout: 0, // net payout after all deductions\r\n    bestRound: {\r\n      id: '0',\r\n      payout: 0, // net payout after all deductions\r\n      multiplier: 0,\r\n    },\r\n  },\r\n  lost: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n  entered: {\r\n    rounds: 0,\r\n    amount: 0,\r\n  },\r\n}\r\n\r\nconst getPnlSummary = (bets: Bet[], currentEpoch: number): PnlSummary => {\r\n  return bets.reduce((summary: PnlSummary, bet) => {\r\n    const roundResult = getRoundResult(bet, currentEpoch)\r\n    if (roundResult === Result.WIN) {\r\n      const payout = getNetPayout(bet, REWARD_RATE)\r\n      let { bestRound } = summary.won\r\n      if (payout > bestRound.payout) {\r\n        const { bullAmount, bearAmount, totalAmount } = bet.round\r\n        const multiplier = getMultiplier(totalAmount, bet.position === BetPosition.BULL ? bullAmount : bearAmount)\r\n        bestRound = { id: bet.round.id, payout, multiplier }\r\n      }\r\n      return {\r\n        won: {\r\n          rounds: summary.won.rounds + 1,\r\n          amount: summary.won.amount + bet.amount,\r\n          payout: summary.won.payout + payout,\r\n          bestRound,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        lost: summary.lost,\r\n      }\r\n    }\r\n    if (roundResult === Result.LOSE) {\r\n      return {\r\n        lost: {\r\n          rounds: summary.lost.rounds + 1,\r\n          amount: summary.lost.amount + bet.amount,\r\n        },\r\n        entered: {\r\n          rounds: summary.entered.rounds + 1,\r\n          amount: summary.entered.amount + bet.amount,\r\n        },\r\n        won: summary.won,\r\n      }\r\n    }\r\n    // Ignore Canceled and Live rounds\r\n    return summary\r\n  }, initialPnlSummary)\r\n}\r\n\r\nconst PnlTab: React.FC<PnlTabProps> = ({ hasBetHistory, bets }) => {\r\n  const { t } = useTranslation()\r\n  const { account } = useWeb3React()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const bnbBusdPrice = usePriceBnbBusd()\r\n\r\n  const summary = getPnlSummary(bets, currentEpoch)\r\n  const netResultAmount = summary.won.payout - summary.lost.amount\r\n  const netResultIsPositive = netResultAmount > 0\r\n  const avgPositionEntered = summary.entered.amount / summary.entered.rounds\r\n  const avgBnbWonPerRound = netResultAmount / summary.entered.rounds\r\n  const avgBnbWonIsPositive = avgBnbWonPerRound > 0\r\n\r\n  // Guard in case user has only lost rounds\r\n  const hasBestRound = summary.won.bestRound.payout !== 0\r\n\r\n  return hasBetHistory ? (\r\n    <Box p=\"16px\">\r\n      <Text bold fontSize=\"24px\" color=\"secondary\" pb=\"24px\">\r\n        {t('Your history')}\r\n      </Text>\r\n      <Flex>\r\n        <PnlChart lost={summary.lost.rounds} won={summary.won.rounds} />\r\n        <Flex flexDirection=\"column\" justifyContent=\"center\" pl=\"24px\">\r\n          <Text bold color=\"textSubtle\">\r\n            {t('Net results')}\r\n          </Text>\r\n          <Text bold fontSize=\"24px\" lineHeight=\"1\" color={netResultIsPositive ? 'success' : 'failure'}>\r\n            {`${netResultIsPositive ? '+' : ''}${formatBnb(netResultAmount)} BNB`}\r\n          </Text>\r\n          <Text small color=\"textSubtle\">\r\n            {`~$${formatBnb(bnbBusdPrice.times(netResultAmount).toNumber())}`}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <Box pl=\"8px\">\r\n        <Text mt=\"24px\" bold color=\"textSubtle\">\r\n          {t('Average return / round')}\r\n        </Text>\r\n        <Text bold color={avgBnbWonIsPositive ? 'success' : 'failure'}>\r\n          {`${avgBnbWonIsPositive ? '+' : ''}${formatBnb(avgBnbWonPerRound)} BNB`}\r\n        </Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${formatBnb(bnbBusdPrice.times(avgBnbWonPerRound).toNumber())}`}\r\n        </Text>\r\n\r\n        {hasBestRound && (\r\n          <>\r\n            <Text mt=\"16px\" bold color=\"textSubtle\">\r\n              {t('Best round: #%roundId%', { roundId: summary.won.bestRound.id })}\r\n            </Text>\r\n            <Flex alignItems=\"flex-end\">\r\n              <Text bold color=\"success\">{`+${formatBnb(summary.won.bestRound.payout)} BNB`}</Text>\r\n              <Text ml=\"4px\" small color=\"textSubtle\">\r\n                ({summary.won.bestRound.multiplier.toFixed(2)}x)\r\n              </Text>\r\n            </Flex>\r\n            <Text small color=\"textSubtle\">\r\n              {`~$${formatBnb(bnbBusdPrice.times(summary.won.bestRound.payout).toNumber())}`}\r\n            </Text>\r\n          </>\r\n        )}\r\n\r\n        <Text mt=\"16px\" bold color=\"textSubtle\">\r\n          {t('Average position entered / round')}\r\n        </Text>\r\n        <Text bold>{`${formatBnb(avgPositionEntered)} BNB`}</Text>\r\n        <Text small color=\"textSubtle\">\r\n          {`~$${formatBnb(bnbBusdPrice.times(avgPositionEntered).toNumber())}`}\r\n        </Text>\r\n\r\n        <Divider />\r\n\r\n        <SummaryRow type=\"won\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"lost\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n        <SummaryRow type=\"entered\" summary={summary} bnbBusdPrice={bnbBusdPrice} />\r\n\r\n        <Flex justifyContent=\"center\" mt=\"24px\">\r\n          <Link href={`${getBscScanLink(account, 'address')}#internaltx`} mb=\"16px\" external>\r\n            <Button mt=\"8px\" width=\"100%\">\r\n              {t('View Reclaimed & Won')}\r\n              <OpenNewIcon color=\"white\" ml=\"4px\" />\r\n            </Button>\r\n          </Link>\r\n        </Flex>\r\n      </Box>\r\n    </Box>\r\n  ) : (\r\n    <Box p=\"24px\">\r\n      <Heading size=\"lg\" textAlign=\"center\" mb=\"8px\">\r\n        {t('No prediction history available')}\r\n      </Heading>\r\n      <Text as=\"p\" textAlign=\"center\">\r\n        {t(\r\n          'If you are sure you should see history here, make sure you’re connected to the correct wallet and try again.',\r\n        )}\r\n      </Text>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default PnlTab\r\n","import React, { useEffect, useState } from 'react'\r\nimport { Flex, Spinner, Text } from '@pancakeswap/uikit'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport styled from 'styled-components'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { fetchHistory } from 'state/predictions'\r\nimport { getUnclaimedWinningBets } from 'state/predictions/helpers'\r\nimport { HistoryFilter } from 'state/types'\r\nimport { useAppDispatch } from 'state'\r\nimport {\r\n  useGetCurrentEpoch,\r\n  useGetHistoryByAccount,\r\n  useGetHistoryFilter,\r\n  useGetIsFetchingHistory,\r\n  useIsHistoryPaneOpen,\r\n} from 'state/predictions/hooks'\r\nimport { Header, HistoryTabs } from './components/History'\r\nimport RoundsTab from './components/History/RoundsTab'\r\nimport PnlTab from './components/History/PnlTab/PnlTab'\r\n\r\nconst StyledHistory = styled.div`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`\r\n\r\nconst BetWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n  overflow-y: auto;\r\n  position: relative;\r\n`\r\n\r\nconst SpinnerWrapper = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst History = () => {\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const historyFilter = useGetHistoryFilter()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { t } = useTranslation()\r\n  const bets = useGetHistoryByAccount(account)\r\n  const [activeTab, setActiveTab] = useState(HistoryTabs.ROUNDS)\r\n\r\n  useEffect(() => {\r\n    if (account && isHistoryPaneOpen) {\r\n      dispatch(fetchHistory({ account }))\r\n    }\r\n  }, [account, currentEpoch, isHistoryPaneOpen, dispatch])\r\n\r\n  // Currently the api cannot filter by unclaimed AND won so we do it here\r\n  // when the user has selected Uncollected only include positions they won\r\n  const results = historyFilter === HistoryFilter.UNCOLLECTED ? getUnclaimedWinningBets(bets) : bets\r\n\r\n  const hasBetHistory = results && results.length > 0\r\n\r\n  let activeTabComponent = null\r\n\r\n  switch (activeTab) {\r\n    case HistoryTabs.PNL:\r\n      activeTabComponent = <PnlTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n    case HistoryTabs.ROUNDS:\r\n    default:\r\n      activeTabComponent = <RoundsTab hasBetHistory={hasBetHistory} bets={results} />\r\n      break\r\n  }\r\n\r\n  if (!account) {\r\n    activeTabComponent = (\r\n      <Flex justifyContent=\"center\" alignItems=\"center\" flexDirection=\"column\" mt=\"32px\">\r\n        <ConnectWalletButton />\r\n        <Text mt=\"8px\">{t('Connect your wallet to view your prediction history')}</Text>\r\n      </Flex>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <StyledHistory>\r\n      <Header activeTab={activeTab} setActiveTab={setActiveTab} />\r\n      <BetWrapper>\r\n        {isFetchingHistory ? (\r\n          <SpinnerWrapper>\r\n            <Spinner size={72} />\r\n          </SpinnerWrapper>\r\n        ) : (\r\n          activeTabComponent\r\n        )}\r\n      </BetWrapper>\r\n    </StyledHistory>\r\n  )\r\n}\r\n\r\nexport default History\r\n","import React from 'react'\r\nimport { useTheme } from 'styled-components'\r\nimport { Svg, SvgProps } from '@pancakeswap/uikit'\r\n\r\ninterface MultiplierProps extends SvgProps {\r\n  isActive: boolean\r\n}\r\n\r\nexport const RoundMultiplierDownArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'failure' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 15.7243L10.0003 1H234L234 15.7247C234 22.4864 229.749 28.5181 223.381 30.7923L138.48 61.1141C127.823 64.9203 116.177 64.9203 105.519 61.1141L20.6188 30.7924C14.2508 28.5181 10.0001 22.4862 10.0001 15.7243Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n\r\nexport const RoundMultiplierUpArrow: React.FC<MultiplierProps> = ({ isActive, ...props }) => {\r\n  const theme = useTheme()\r\n  const fill = theme.colors[isActive ? 'success' : 'tertiary']\r\n\r\n  return (\r\n    <Svg height=\"65px\" width=\"240px\" viewBox=\"0 0 240 65\" {...props}>\r\n      <g filter=\"url(#filter0_i)\">\r\n        <path\r\n          d=\"M10.0001 49.2757L10.0003 64H234L234 49.2753C234 42.5136 229.749 36.4819 223.381 34.2077L138.48 3.8859C127.823 0.0796983 116.177 0.0796931 105.519 3.8859L20.6188 34.2076C14.2508 36.4819 10.0001 42.5138 10.0001 49.2757Z\"\r\n          fill={fill}\r\n        />\r\n      </g>\r\n      <defs>\r\n        <filter\r\n          id=\"filter0_i\"\r\n          x=\"10.0001\"\r\n          y=\"1.03125\"\r\n          width=\"224\"\r\n          height=\"62.9688\"\r\n          filterUnits=\"userSpaceOnUse\"\r\n          colorInterpolationFilters=\"sRGB\"\r\n        >\r\n          <feFlood floodOpacity=\"0\" result=\"BackgroundImageFix\" />\r\n          <feBlend mode=\"normal\" in=\"SourceGraphic\" in2=\"BackgroundImageFix\" result=\"shape\" />\r\n          <feColorMatrix\r\n            in=\"SourceAlpha\"\r\n            type=\"matrix\"\r\n            values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 127 0\"\r\n            result=\"hardAlpha\"\r\n          />\r\n          <feOffset />\r\n          <feGaussianBlur stdDeviation=\"1\" />\r\n          <feComposite in2=\"hardAlpha\" operator=\"arithmetic\" k2=\"-1\" k3=\"1\" />\r\n          <feColorMatrix type=\"matrix\" values=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0.15 0\" />\r\n          <feBlend mode=\"normal\" in2=\"shape\" result=\"effect1_innerShadow\" />\r\n        </filter>\r\n      </defs>\r\n    </Svg>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport { CheckmarkCircleIcon, CheckmarkCircleFillIcon, Tag, useTooltip } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatBnbv2 } from '../../helpers'\r\n\r\ninterface EnteredTagProps {\r\n  amount?: ethers.BigNumber\r\n  hasClaimed?: boolean\r\n}\r\n\r\nconst EnteredTag: React.FC<EnteredTagProps> = ({ amount, hasClaimed = false }) => {\r\n  const { t } = useTranslation()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(amount)} BNB`}</div>,\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <span ref={targetRef}>\r\n        <Tag\r\n          variant=\"secondary\"\r\n          fontWeight=\"bold\"\r\n          textTransform=\"uppercase\"\r\n          outline={!hasClaimed}\r\n          startIcon={hasClaimed ? <CheckmarkCircleFillIcon width=\"18px\" /> : <CheckmarkCircleIcon width=\"18px\" />}\r\n        >\r\n          {hasClaimed ? t('Claimed') : t('Entered')}\r\n        </Tag>{' '}\r\n      </span>{' '}\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default EnteredTag\r\n","import React from 'react'\r\nimport { ethers } from 'ethers'\r\nimport styled, { CSSProperties } from 'styled-components'\r\nimport { Box, Flex, Text } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { BetPosition } from 'state/types'\r\nimport { RoundMultiplierDownArrow, RoundMultiplierUpArrow } from '../../RoundMultiplierArrows'\r\nimport EnteredTag from './EnteredTag'\r\n\r\ninterface MultiplierArrowProps {\r\n  betAmount?: ethers.BigNumber\r\n  multiplier?: string\r\n  hasEntered?: boolean\r\n  hasClaimed?: boolean\r\n  betPosition?: BetPosition\r\n  isDisabled?: boolean\r\n  isActive?: boolean\r\n}\r\n\r\nconst ArrowWrapper = styled.div`\r\n  height: 65px;\r\n  margin: 0 auto;\r\n  width: 240px;\r\n`\r\n\r\nconst Content = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  flex-direction: column;\r\n  left: 0;\r\n  height: 100%;\r\n  justify-content: center;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n`\r\n\r\nconst EnteredTagWrapper = styled.div`\r\n  position: absolute;\r\n  z-index: 10;\r\n`\r\n\r\nconst getTextColor =\r\n  (fallback = 'textSubtle') =>\r\n  (isActive: boolean, isDisabled: boolean) => {\r\n    if (isDisabled) {\r\n      return 'textDisabled'\r\n    }\r\n\r\n    if (isActive) {\r\n      return 'white'\r\n    }\r\n\r\n    return fallback\r\n  }\r\n\r\nconst MultiplierArrow: React.FC<MultiplierArrowProps> = ({\r\n  betAmount,\r\n  multiplier,\r\n  hasEntered = false,\r\n  hasClaimed = false,\r\n  betPosition = BetPosition.BULL,\r\n  isDisabled = false,\r\n  isActive = false,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const upColor = getTextColor('success')(isActive, isDisabled)\r\n  const downColor = getTextColor('failure')(isActive, isDisabled)\r\n  const textColor = getTextColor()(isActive, isDisabled)\r\n  const multiplierText = (\r\n    <Box>\r\n      <Flex justifyContent=\"center\" height=\"14px\">\r\n        <Text fontSize=\"14px\" color={textColor} bold lineHeight=\"14x\">\r\n          {multiplier !== undefined ? `${multiplier}x` : '-'}\r\n        </Text>\r\n        <Text fontSize=\"14px\" color={textColor} lineHeight=\"14x\" ml=\"4px\">\r\n          {t('Payout')}\r\n        </Text>\r\n      </Flex>\r\n    </Box>\r\n  )\r\n\r\n  const getEnteredTag = (position: CSSProperties) => {\r\n    if (!hasEntered) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <EnteredTagWrapper style={position}>\r\n        <EnteredTag amount={betAmount} hasClaimed={hasClaimed} />\r\n      </EnteredTagWrapper>\r\n    )\r\n  }\r\n\r\n  if (betPosition === BetPosition.BEAR) {\r\n    return (\r\n      <Box mt=\"-1px\" position=\"relative\">\r\n        <ArrowWrapper>\r\n          <RoundMultiplierDownArrow isActive={isActive} />\r\n          {getEnteredTag({ bottom: 0, right: 0 })}\r\n          <Content>\r\n            {!isDisabled && multiplierText}\r\n            <Text bold fontSize=\"20px\" mb=\"8px\" color={downColor} textTransform=\"uppercase\">\r\n              {t('Down')}\r\n            </Text>\r\n          </Content>\r\n        </ArrowWrapper>\r\n      </Box>\r\n    )\r\n  }\r\n\r\n  return (\r\n    <Box mb=\"-1px\" position=\"relative\">\r\n      <ArrowWrapper>\r\n        <RoundMultiplierUpArrow isActive={isActive} />\r\n        {getEnteredTag({ top: 0, left: 0 })}\r\n        <Content>\r\n          <Text bold fontSize=\"20px\" lineHeight=\"21px\" color={upColor} textTransform=\"uppercase\">\r\n            {t('Up')}\r\n          </Text>\r\n          {!isDisabled && multiplierText}\r\n        </Content>\r\n      </ArrowWrapper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default MultiplierArrow\r\n","import React, { ReactElement } from 'react'\r\nimport { Flex, Text } from '@pancakeswap/uikit'\r\nimport styled, { DefaultTheme } from 'styled-components'\r\n\r\ntype Status = 'expired' | 'live' | 'next' | 'soon' | 'canceled' | 'calculating'\r\n\r\ninterface CardHeaderProps {\r\n  status: Status\r\n  title: string\r\n  epoch: number\r\n  icon?: ReactElement\r\n}\r\n\r\nconst HEADER_HEIGHT = '37px'\r\n\r\n// Used to get the gradient for the card border, which depends on the header color to create the illusion\r\n// that header is overlapping the 1px card border.\r\n// 'live' is not included into the switch case because it has isActive border style\r\nexport const getBorderBackground = (theme: DefaultTheme, status: Status) => {\r\n  const gradientStopPoint = `calc(${HEADER_HEIGHT} + 1px)`\r\n  switch (status) {\r\n    case 'calculating':\r\n      return `linear-gradient(transparent ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint}), ${theme.colors.gradients.cardHeader}`\r\n    case 'canceled':\r\n      return `linear-gradient(${theme.colors.warning} ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint})`\r\n    case 'next':\r\n      return `linear-gradient(${theme.colors.secondary} ${gradientStopPoint}, ${theme.colors.cardBorder} ${gradientStopPoint})`\r\n    case 'expired':\r\n    case 'soon':\r\n    default:\r\n      return theme.colors.cardBorder\r\n  }\r\n}\r\n\r\nconst getBackgroundColor = (theme: DefaultTheme, status: Status) => {\r\n  switch (status) {\r\n    case 'calculating':\r\n      return theme.colors.gradients.cardHeader\r\n    case 'live':\r\n      return 'transparent'\r\n    case 'canceled':\r\n      return theme.colors.warning\r\n    case 'next':\r\n      return theme.colors.secondary\r\n    case 'expired':\r\n    case 'soon':\r\n    default:\r\n      return theme.colors.cardBorder\r\n  }\r\n}\r\n\r\ntype TextColor = 'textDisabled' | 'white' | 'secondary' | 'text' | 'textSubtle'\r\ntype FallbackColor = 'text' | 'textSubtle'\r\n\r\nconst getTextColorByStatus = (status: Status, fallback: FallbackColor): TextColor => {\r\n  switch (status) {\r\n    case 'expired':\r\n      return 'textDisabled'\r\n    case 'next':\r\n      return 'white'\r\n    case 'live':\r\n      return 'secondary'\r\n    case 'canceled':\r\n    case 'calculating':\r\n      return 'text'\r\n    default:\r\n      return fallback\r\n  }\r\n}\r\n\r\nconst StyledCardHeader = styled.div<{ status: Status }>`\r\n  align-items: center;\r\n  background: ${({ theme, status }) => getBackgroundColor(theme, status)};\r\n  display: flex;\r\n  justify-content: space-between;\r\n  height: ${HEADER_HEIGHT};\r\n  padding: ${({ status }) => (status === 'live' ? '16px' : '8px')};\r\n`\r\n\r\nconst Round = styled.div`\r\n  justify-self: center;\r\n`\r\n\r\nconst CardHeader: React.FC<CardHeaderProps> = ({ status, title, epoch, icon }) => {\r\n  const textColor = getTextColorByStatus(status, 'text')\r\n  const isLive = status === 'live'\r\n\r\n  return (\r\n    <StyledCardHeader status={status}>\r\n      <Flex alignItems=\"center\">\r\n        {icon}\r\n        <Text color={textColor} bold={isLive} textTransform={isLive ? 'uppercase' : 'capitalize'} lineHeight=\"21px\">\r\n          {title}\r\n        </Text>\r\n      </Flex>\r\n      <Round>\r\n        <Text fontSize={isLive ? '14px' : '12px'} color={getTextColorByStatus(status, 'textSubtle')} textAlign=\"center\">\r\n          {`#${epoch}`}\r\n        </Text>\r\n      </Round>\r\n    </StyledCardHeader>\r\n  )\r\n}\r\n\r\nexport default CardHeader\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, TrophyGoldIcon } from '@pancakeswap/uikit'\r\nimport { useGetIsClaimable } from 'state/predictions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport CollectWinningsButton from '../CollectWinningsButton'\r\n\r\ninterface CollectWinningsOverlayProps {\r\n  epoch: number\r\n  payout: string\r\n  betAmount: string\r\n  isBottom?: boolean\r\n}\r\n\r\nconst Wrapper = styled(Flex)<{ isBottom: CollectWinningsOverlayProps['isBottom'] }>`\r\n  background-color: ${({ theme }) => theme.colors.secondary};\r\n  left: 0;\r\n  position: absolute;\r\n  width: 100%;\r\n  z-index: 30;\r\n\r\n  ${({ isBottom }) => {\r\n    return isBottom\r\n      ? `\r\n      border-radius: 0 0 16px 16px;\r\n      bottom: 0;\r\n    `\r\n      : `\r\n      top: 37px; // Card header height\r\n    `\r\n  }}\r\n`\r\n\r\nconst CollectWinningsOverlay: React.FC<CollectWinningsOverlayProps> = ({\r\n  epoch,\r\n  payout,\r\n  betAmount,\r\n  isBottom = false,\r\n  ...props\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const isClaimable = useGetIsClaimable(epoch)\r\n\r\n  if (!isClaimable) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <Wrapper alignItems=\"center\" p=\"16px\" isBottom={isBottom} {...props}>\r\n      <TrophyGoldIcon width=\"64px\" style={{ flex: 'none' }} mr=\"8px\" />\r\n      <CollectWinningsButton payout={payout} betAmount={betAmount} epoch={epoch} hasClaimed={false} width=\"100%\">\r\n        {t('Collect Winnings')}\r\n      </CollectWinningsButton>\r\n    </Wrapper>\r\n  )\r\n}\r\n\r\nexport default CollectWinningsOverlay\r\n","import React from 'react'\r\nimport { Card, CardBody, Text, Flex, BlockIcon, LinkExternal } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport useTheme from 'hooks/useTheme'\r\nimport ReclaimPositionButton from '../ReclaimPositionButton'\r\nimport useIsRefundable from '../../hooks/useIsRefundable'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader, { getBorderBackground } from './CardHeader'\r\n\r\ninterface CanceledRoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst CanceledRoundCard: React.FC<CanceledRoundCardProps> = ({ round }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { isRefundable, setIsRefundable } = useIsRefundable(round.epoch)\r\n  const { epoch } = round\r\n\r\n  const handleSuccess = async () => {\r\n    setIsRefundable(false)\r\n  }\r\n\r\n  return (\r\n    <Card borderBackground={getBorderBackground(theme, 'canceled')}>\r\n      <CardHeader\r\n        status=\"canceled\"\r\n        icon={<BlockIcon mr=\"4px\" width=\"21px\" />}\r\n        title={t('Canceled')}\r\n        epoch={round.epoch}\r\n      />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Flex flexDirection=\"column\" alignItems=\"center\">\r\n            <Text bold color={isRefundable ? 'text' : 'textDisabled'}>\r\n              {t('Round Canceled')}\r\n            </Text>\r\n            {isRefundable && <ReclaimPositionButton epoch={epoch} onSuccess={handleSuccess} width=\"100%\" my=\"8px\" />}\r\n            <LinkExternal href=\"https://docs.pancakeswap.finance/products/prediction\" external>\r\n              {t('Learn More')}\r\n            </LinkExternal>\r\n          </Flex>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default CanceledRoundCard\r\n","import React from 'react'\r\nimport { Card, CardBody, Flex, Spinner, WaitIcon, TooltipText, useTooltip, InfoIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader, { getBorderBackground } from './CardHeader'\r\n\r\ninterface CalculatingCardProps {\r\n  round: NodeRound\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n}\r\n\r\nconst CalculatingCard: React.FC<CalculatingCardProps> = ({ round, hasEnteredUp, hasEnteredDown }) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(\r\n    t('This round’s closing transaction has been submitted to the blockchain, and is awaiting confirmation.'),\r\n    { placement: 'bottom' },\r\n  )\r\n\r\n  return (\r\n    <>\r\n      <Card borderBackground={getBorderBackground(theme, 'calculating')}>\r\n        <CardHeader\r\n          status=\"calculating\"\r\n          icon={<WaitIcon mr=\"4px\" width=\"21px\" />}\r\n          title={t('Calculating')}\r\n          epoch={round.epoch}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow isDisabled hasEntered={hasEnteredUp} />\r\n          <RoundResultBox>\r\n            <Flex alignItems=\"center\" justifyContent=\"center\" flexDirection=\"column\">\r\n              <Spinner size={96} />\r\n              <Flex mt=\"8px\" ref={targetRef}>\r\n                <TooltipText>{t('Calculating')}</TooltipText>\r\n                <InfoIcon ml=\"4px\" />\r\n              </Flex>\r\n            </Flex>\r\n          </RoundResultBox>\r\n          <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled hasEntered={hasEnteredDown} />\r\n        </CardBody>\r\n      </Card>\r\n      {tooltipVisible && tooltip}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default CalculatingCard\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Card, Box, BlockIcon, CardBody } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition, NodeLedger } from 'state/types'\r\nimport { useGetBetByEpoch, useGetBufferSeconds } from 'state/predictions/hooks'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { getHasRoundFailed, getNetPayoutv2 } from '../../helpers'\r\nimport { RoundResult } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader, { getBorderBackground } from './CardHeader'\r\nimport CollectWinningsOverlay from './CollectWinningsOverlay'\r\nimport CanceledRoundCard from './CanceledRoundCard'\r\nimport CalculatingCard from './CalculatingCard'\r\n\r\ninterface ExpiredRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  hasClaimedUp: boolean\r\n  hasClaimedDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\nconst StyledExpiredRoundCard = styled(Card)`\r\n  opacity: 0.7;\r\n  transition: opacity 300ms;\r\n\r\n  &:hover {\r\n    opacity: 1;\r\n  }\r\n`\r\n\r\nconst ExpiredRoundCard: React.FC<ExpiredRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  hasClaimedUp,\r\n  hasClaimedDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { account } = useWeb3React()\r\n  const { epoch, lockPrice, closePrice } = round\r\n  const betPosition = closePrice > lockPrice ? BetPosition.BULL : BetPosition.BEAR\r\n  const ledger = useGetBetByEpoch(account, epoch)\r\n  const bufferSeconds = useGetBufferSeconds()\r\n  const payout = getNetPayoutv2(ledger, round)\r\n  const formattedPayout = payout.toUnsafeFloat().toFixed(4)\r\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\r\n\r\n  if (hasRoundFailed) {\r\n    return <CanceledRoundCard round={round} />\r\n  }\r\n\r\n  if (!closePrice) {\r\n    return <CalculatingCard round={round} hasEnteredDown={hasEnteredDown} hasEnteredUp={hasEnteredUp} />\r\n  }\r\n\r\n  return (\r\n    <Box position=\"relative\">\r\n      <StyledExpiredRoundCard borderBackground={getBorderBackground(theme, 'expired')}>\r\n        <CardHeader\r\n          status=\"expired\"\r\n          icon={<BlockIcon mr=\"4px\" width=\"21px\" color=\"textDisabled\" />}\r\n          title={t('Expired')}\r\n          epoch={round.epoch}\r\n        />\r\n        <CardBody p=\"16px\" style={{ position: 'relative' }}>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bullMultiplier}\r\n            isActive={betPosition === BetPosition.BULL}\r\n            hasEntered={hasEnteredUp}\r\n            hasClaimed={hasClaimedUp}\r\n          />\r\n          <RoundResult round={round} hasFailed={hasRoundFailed} />\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            isActive={betPosition === BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n            hasClaimed={hasClaimedDown}\r\n          />\r\n        </CardBody>\r\n      </StyledExpiredRoundCard>\r\n      <CollectWinningsOverlay\r\n        epoch={epoch}\r\n        payout={formattedPayout}\r\n        betAmount={betAmount ? formatBigNumberToFixed(betAmount, 4) : '0'}\r\n        isBottom={hasEnteredDown}\r\n      />\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default ExpiredRoundCard\r\n","import React from 'react'\r\nimport { Progress, ProgressProps } from '@pancakeswap/uikit'\r\n\r\ninterface RoundProgressProps extends ProgressProps {\r\n  lockTimestamp: number\r\n  closeTimestamp: number\r\n}\r\n\r\nconst RoundProgress: React.FC<RoundProgressProps> = ({ lockTimestamp, closeTimestamp, ...props }) => {\r\n  const startMs = lockTimestamp * 1000\r\n  const endMs = closeTimestamp * 1000\r\n  const now = Date.now()\r\n  const rawProgress = ((now - startMs) / (endMs - startMs)) * 100\r\n  const progress = rawProgress <= 100 ? rawProgress : 100\r\n\r\n  return <Progress primaryStep={progress} {...props} />\r\n}\r\n\r\nexport default RoundProgress\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  Flex,\r\n  PlayCircleOutlineIcon,\r\n  Skeleton,\r\n  Text,\r\n  TooltipText,\r\n  useTooltip,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, NodeLedger, BetPosition } from 'state/types'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { useGetLastOraclePrice, useGetBufferSeconds } from 'state/predictions/hooks'\r\nimport RoundProgress from 'components/RoundProgress'\r\nimport { formatUsdv2, getHasRoundFailed, getPriceDifference } from '../../helpers'\r\nimport PositionTag from '../PositionTag'\r\nimport { RoundResultBox, LockPriceRow, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader from './CardHeader'\r\nimport CanceledRoundCard from './CanceledRoundCard'\r\n\r\ninterface LiveRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\nconst LiveRoundCard: React.FC<LiveRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const { t } = useTranslation()\r\n  const { lockPrice, totalAmount, lockTimestamp, closeTimestamp } = round\r\n  const price = useGetLastOraclePrice()\r\n  const bufferSeconds = useGetBufferSeconds()\r\n\r\n  const isBull = lockPrice && price.gt(lockPrice)\r\n  const priceColor = isBull ? 'success' : 'failure'\r\n\r\n  const priceDifference = getPriceDifference(price, lockPrice)\r\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\r\n  const hasRoundFailed = getHasRoundFailed(round, bufferSeconds)\r\n\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: priceAsNumber,\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n  const { targetRef, tooltip, tooltipVisible } = useTooltip(t('Last price from Chainlink Oracle'), {\r\n    placement: 'bottom',\r\n  })\r\n\r\n  const updateRef = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateRef.current(priceAsNumber)\r\n  }, [priceAsNumber, updateRef])\r\n\r\n  if (hasRoundFailed) {\r\n    return <CanceledRoundCard round={round} />\r\n  }\r\n\r\n  return (\r\n    <Card isActive>\r\n      <CardHeader\r\n        status=\"live\"\r\n        icon={<PlayCircleOutlineIcon mr=\"4px\" width=\"24px\" color=\"secondary\" />}\r\n        title={t('Live')}\r\n        epoch={round.epoch}\r\n      />\r\n      <RoundProgress variant=\"flat\" scale=\"sm\" lockTimestamp={lockTimestamp} closeTimestamp={closeTimestamp} />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow\r\n          betAmount={betAmount}\r\n          multiplier={bullMultiplier}\r\n          hasEntered={hasEnteredUp}\r\n          isActive={isBull}\r\n        />\r\n        <RoundResultBox betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n          <Text color=\"textSubtle\" fontSize=\"12px\" bold textTransform=\"uppercase\" mb=\"8px\">\r\n            {t('Last Price')}\r\n          </Text>\r\n          <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\" height=\"36px\">\r\n            <div ref={targetRef}>\r\n              <TooltipText bold color={priceColor} fontSize=\"24px\" style={{ minHeight: '36px' }}>\r\n                {price.gt(0) ? `$${countUp}` : <Skeleton height=\"36px\" width=\"94px\" />}\r\n              </TooltipText>\r\n            </div>\r\n            <PositionTag betPosition={isBull ? BetPosition.BULL : BetPosition.BEAR}>\r\n              {formatUsdv2(priceDifference)}\r\n            </PositionTag>\r\n          </Flex>\r\n          {lockPrice && <LockPriceRow lockPrice={lockPrice} />}\r\n          <PrizePoolRow totalAmount={totalAmount} />\r\n        </RoundResultBox>\r\n        <MultiplierArrow\r\n          betAmount={betAmount}\r\n          multiplier={bearMultiplier}\r\n          betPosition={BetPosition.BEAR}\r\n          hasEntered={hasEnteredDown}\r\n          isActive={!isBull}\r\n        />\r\n      </CardBody>\r\n      {tooltipVisible && tooltip}\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default LiveRoundCard\r\n","import React, { ReactNode } from 'react'\r\nimport styled from 'styled-components'\r\n\r\ninterface CardFlipProps {\r\n  isFlipped: boolean\r\n  height: string\r\n  children: [ReactNode, ReactNode]\r\n}\r\n\r\nconst Front = styled.div`\r\n  align-items: center;\r\n  backface-visibility: hidden;\r\n  display: flex;\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  transition: z-index 600ms;\r\n  width: 100%;\r\n\r\n  & > div {\r\n    flex: 1;\r\n  }\r\n`\r\n\r\nconst Back = styled(Front)`\r\n  transform: rotateY(180deg);\r\n`\r\n\r\nconst Inner = styled.div<{ isFlipped: CardFlipProps['isFlipped'] }>`\r\n  height: 100%;\r\n  position: relative;\r\n  transform: rotateY(${({ isFlipped }) => (isFlipped ? 180 : 0)}deg);\r\n  transform-style: preserve-3d;\r\n  transition: transform 600ms;\r\n\r\n  ${Front} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 5 : 10)};\r\n  }\r\n\r\n  ${Back} {\r\n    z-index: ${({ isFlipped }) => (isFlipped ? 10 : 5)};\r\n  }\r\n`\r\n\r\nconst StyledCardFlip = styled.div`\r\n  perspective: 1000px;\r\n  z-index: auto;\r\n`\r\n\r\nconst getComponents = (children: CardFlipProps['children']) => {\r\n  if (children.length !== 2) {\r\n    throw new Error('CardFlip: Two children are required')\r\n  }\r\n\r\n  return children\r\n}\r\n\r\nconst CardFlip: React.FC<CardFlipProps> = ({ isFlipped, height, children }) => {\r\n  const [front, back] = getComponents(children)\r\n\r\n  return (\r\n    <StyledCardFlip style={{ height }}>\r\n      <Inner isFlipped={isFlipped}>\r\n        <Front>{front}</Front>\r\n        <Back>{back}</Back>\r\n      </Inner>\r\n    </StyledCardFlip>\r\n  )\r\n}\r\n\r\nexport default CardFlip\r\n","import { useContext } from 'react'\r\nimport { SwiperContext } from '../context/SwiperProvider'\r\n\r\nconst useSwiper = () => {\r\n  const swiperContext = useContext(SwiperContext)\r\n\r\n  if (swiperContext === undefined) {\r\n    throw new Error('Swiper not found')\r\n  }\r\n\r\n  return swiperContext\r\n}\r\n\r\nexport default useSwiper\r\n","import styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\n\r\nconst FlexRow = styled(Flex).attrs({ alignItems: 'center' })`\r\n  flex: 1;\r\n`\r\n\r\nexport default FlexRow\r\n","import React, { useEffect, useMemo, useState } from 'react'\r\nimport {\r\n  ArrowBackIcon,\r\n  Card,\r\n  CardBody,\r\n  CardHeader,\r\n  Flex,\r\n  Heading,\r\n  IconButton,\r\n  Button,\r\n  BinanceIcon,\r\n  Text,\r\n  BalanceInput,\r\n  Slider,\r\n  Box,\r\n  AutoRenewIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { ethers } from 'ethers'\r\nimport { parseUnits } from 'ethers/lib/utils'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetMinBetAmount } from 'state/predictions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { usePredictionsContract } from 'hooks/useContract'\r\nimport { useGetBnbBalance } from 'hooks/useTokenBalance'\r\nimport useToast from 'hooks/useToast'\r\nimport { useCallWithGasPrice } from 'hooks/useCallWithGasPrice'\r\nimport { BetPosition } from 'state/types'\r\nimport { formatBigNumber, formatFixedNumber } from 'utils/formatBalance'\r\nimport ConnectWalletButton from 'components/ConnectWalletButton'\r\nimport PositionTag from '../PositionTag'\r\nimport useSwiper from '../../hooks/useSwiper'\r\nimport FlexRow from '../FlexRow'\r\n\r\ninterface SetPositionCardProps {\r\n  position: BetPosition\r\n  togglePosition: () => void\r\n  epoch: number\r\n  onBack: () => void\r\n  onSuccess: (decimalValue: string, hash: string) => Promise<void>\r\n}\r\n\r\nconst dust = parseUnits('0.01', 18)\r\nconst percentShortcuts = [10, 25, 50, 75]\r\n\r\nconst getButtonProps = (\r\n  value: ethers.BigNumber,\r\n  bnbBalance: ethers.BigNumber,\r\n  minBetAmountBalance: ethers.BigNumber,\r\n) => {\r\n  const hasSufficientBalance = () => {\r\n    if (value.gt(0)) {\r\n      return value.lte(bnbBalance)\r\n    }\r\n    return bnbBalance.gt(0)\r\n  }\r\n\r\n  if (!hasSufficientBalance()) {\r\n    return { key: 'Insufficient BNB balance', disabled: true }\r\n  }\r\n\r\n  if (value.eq(0)) {\r\n    return { key: 'Enter an amount', disabled: true }\r\n  }\r\n\r\n  return { key: 'Confirm', disabled: value.lt(minBetAmountBalance) }\r\n}\r\n\r\nconst getValueAsEthersBn = (value: string) => {\r\n  const valueAsFloat = parseFloat(value)\r\n  return Number.isNaN(valueAsFloat) ? ethers.BigNumber.from(0) : parseUnits(value)\r\n}\r\n\r\nconst SetPositionCard: React.FC<SetPositionCardProps> = ({ position, togglePosition, epoch, onBack, onSuccess }) => {\r\n  const [value, setValue] = useState('')\r\n  const [isTxPending, setIsTxPending] = useState(false)\r\n  const [errorMessage, setErrorMessage] = useState(null)\r\n  const [percent, setPercent] = useState(0)\r\n\r\n  const { account } = useWeb3React()\r\n  const { swiper } = useSwiper()\r\n  const { balance: bnbBalance } = useGetBnbBalance()\r\n  const minBetAmount = useGetMinBetAmount()\r\n  const { t } = useTranslation()\r\n  const { toastError } = useToast()\r\n  const { callWithGasPrice } = useCallWithGasPrice()\r\n  const predictionsContract = usePredictionsContract()\r\n\r\n  // Convert bnb balance to ethers.BigNumber\r\n  const bnbBalanceAsBn = useMemo(() => {\r\n    return ethers.BigNumber.from(bnbBalance.toString())\r\n  }, [bnbBalance])\r\n  const maxBalance = useMemo(() => {\r\n    return bnbBalanceAsBn.gt(dust) ? bnbBalanceAsBn.sub(dust) : dust\r\n  }, [bnbBalanceAsBn])\r\n  const balanceDisplay = formatBigNumber(bnbBalanceAsBn)\r\n\r\n  const valueAsBn = getValueAsEthersBn(value)\r\n  const showFieldWarning = account && valueAsBn.gt(0) && errorMessage !== null\r\n\r\n  const handleInputChange = (input: string) => {\r\n    const inputAsBn = getValueAsEthersBn(input)\r\n\r\n    if (inputAsBn.eq(0)) {\r\n      setPercent(0)\r\n    } else {\r\n      const inputAsFn = ethers.FixedNumber.from(inputAsBn)\r\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\r\n      const hundredAsFn = ethers.FixedNumber.from(100)\r\n      const percentage = inputAsFn.divUnsafe(maxValueAsFn).mulUnsafe(hundredAsFn)\r\n      const percentageAsFloat = percentage.toUnsafeFloat()\r\n\r\n      setPercent(percentageAsFloat > 100 ? 100 : percentageAsFloat)\r\n    }\r\n    setValue(input)\r\n  }\r\n\r\n  const handlePercentChange = (sliderPercent: number) => {\r\n    if (sliderPercent > 0) {\r\n      const maxValueAsFn = ethers.FixedNumber.from(maxBalance)\r\n      const hundredAsFn = ethers.FixedNumber.from(100)\r\n      const sliderPercentAsFn = ethers.FixedNumber.from(sliderPercent.toFixed(18)).divUnsafe(hundredAsFn)\r\n      const balancePercentage = maxValueAsFn.mulUnsafe(sliderPercentAsFn)\r\n      setValue(formatFixedNumber(balancePercentage))\r\n    } else {\r\n      setValue('')\r\n    }\r\n    setPercent(sliderPercent)\r\n  }\r\n\r\n  // Clear value\r\n  const handleGoBack = () => {\r\n    setValue('')\r\n    setPercent(0)\r\n    onBack()\r\n  }\r\n\r\n  // Disable the swiper events to avoid conflicts\r\n  const handleMouseOver = () => {\r\n    swiper.keyboard.disable()\r\n    swiper.mousewheel.disable()\r\n    swiper.detachEvents()\r\n  }\r\n\r\n  const handleMouseOut = () => {\r\n    swiper.keyboard.enable()\r\n    swiper.mousewheel.enable()\r\n    swiper.attachEvents()\r\n  }\r\n\r\n  const { key, disabled } = getButtonProps(valueAsBn, maxBalance, minBetAmount)\r\n\r\n  const handleEnterPosition = async () => {\r\n    const betMethod = position === BetPosition.BULL ? 'betBull' : 'betBear'\r\n\r\n    try {\r\n      const tx = await callWithGasPrice(predictionsContract, betMethod, [epoch], { value: valueAsBn.toString() })\r\n      setIsTxPending(true)\r\n      const receipt = await tx.wait()\r\n      onSuccess(valueAsBn.toString(), receipt.transactionHash as string)\r\n    } catch {\r\n      toastError(t('Error'), t('Please try again. Confirm the transaction and make sure you are paying enough gas!'))\r\n    } finally {\r\n      setIsTxPending(false)\r\n    }\r\n  }\r\n\r\n  // Warnings\r\n  useEffect(() => {\r\n    const inputAmount = getValueAsEthersBn(value)\r\n    const hasSufficientBalance = inputAmount.gt(0) && inputAmount.lte(maxBalance)\r\n\r\n    if (!hasSufficientBalance) {\r\n      setErrorMessage({ key: 'Insufficient BNB balance' })\r\n    } else if (inputAmount.gt(0) && inputAmount.lt(minBetAmount)) {\r\n      setErrorMessage({\r\n        key: 'A minimum amount of %num% %token% is required',\r\n        data: { num: formatBigNumber(minBetAmount), token: 'BNB' },\r\n      })\r\n    } else {\r\n      setErrorMessage(null)\r\n    }\r\n  }, [value, maxBalance, minBetAmount, setErrorMessage])\r\n\r\n  return (\r\n    <Card onMouseOver={handleMouseOver} onMouseOut={handleMouseOut}>\r\n      <CardHeader p=\"16px\">\r\n        <Flex alignItems=\"center\">\r\n          <IconButton variant=\"text\" scale=\"sm\" onClick={handleGoBack} mr=\"8px\">\r\n            <ArrowBackIcon width=\"24px\" />\r\n          </IconButton>\r\n          <FlexRow>\r\n            <Heading scale=\"md\">{t('Set Position')}</Heading>\r\n          </FlexRow>\r\n          <PositionTag betPosition={position} onClick={togglePosition}>\r\n            {position === BetPosition.BULL ? t('Up') : t('Down')}\r\n          </PositionTag>\r\n        </Flex>\r\n      </CardHeader>\r\n      <CardBody py=\"16px\">\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"8px\">\r\n          <Text textAlign=\"right\" color=\"textSubtle\">\r\n            {t('Commit')}:\r\n          </Text>\r\n          <Flex alignItems=\"center\">\r\n            <BinanceIcon mr=\"4px  \" />\r\n            <Text bold textTransform=\"uppercase\">\r\n              BNB\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n        <BalanceInput\r\n          value={value}\r\n          onUserInput={handleInputChange}\r\n          isWarning={showFieldWarning}\r\n          inputProps={{ disabled: !account || isTxPending }}\r\n        />\r\n        {showFieldWarning && (\r\n          <Text color=\"failure\" fontSize=\"12px\" mt=\"4px\" textAlign=\"right\">\r\n            {t(errorMessage.key, errorMessage.data)}\r\n          </Text>\r\n        )}\r\n        <Text textAlign=\"right\" mb=\"16px\" color=\"textSubtle\" fontSize=\"12px\" style={{ height: '18px' }}>\r\n          {account && t('Balance: %balance%', { balance: balanceDisplay })}\r\n        </Text>\r\n        <Slider\r\n          name=\"balance\"\r\n          min={0}\r\n          max={100}\r\n          value={percent}\r\n          onValueChanged={handlePercentChange}\r\n          valueLabel={account ? `${percent.toFixed(percent > 0 ? 1 : 0)}%` : ''}\r\n          step={0.01}\r\n          disabled={!account || isTxPending}\r\n          mb=\"4px\"\r\n          className={!account || isTxPending ? '' : 'swiper-no-swiping'}\r\n        />\r\n        <Flex alignItems=\"center\" justifyContent=\"space-between\" mb=\"16px\">\r\n          {percentShortcuts.map((percentShortcut) => {\r\n            const handleClick = () => {\r\n              handlePercentChange(percentShortcut)\r\n            }\r\n\r\n            return (\r\n              <Button\r\n                key={percentShortcut}\r\n                scale=\"xs\"\r\n                variant=\"tertiary\"\r\n                onClick={handleClick}\r\n                disabled={!account || isTxPending}\r\n                style={{ flex: 1 }}\r\n              >\r\n                {`${percentShortcut}%`}\r\n              </Button>\r\n            )\r\n          })}\r\n          <Button\r\n            scale=\"xs\"\r\n            variant=\"tertiary\"\r\n            onClick={() => handlePercentChange(100)}\r\n            disabled={!account || isTxPending}\r\n          >\r\n            {t('Max')}\r\n          </Button>\r\n        </Flex>\r\n        <Box mb=\"8px\">\r\n          {account ? (\r\n            <Button\r\n              width=\"100%\"\r\n              disabled={!account || disabled}\r\n              onClick={handleEnterPosition}\r\n              isLoading={isTxPending}\r\n              endIcon={isTxPending ? <AutoRenewIcon color=\"currentColor\" spin /> : null}\r\n            >\r\n              {t(key)}\r\n            </Button>\r\n          ) : (\r\n            <ConnectWalletButton width=\"100%\" />\r\n          )}\r\n        </Box>\r\n        <Text as=\"p\" fontSize=\"12px\" lineHeight={1} color=\"textSubtle\">\r\n          {t('You won’t be able to remove or change your position once you enter it.')}\r\n        </Text>\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SetPositionCard\r\n","import React, { useState } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  Card,\r\n  CardBody,\r\n  PlayCircleOutlineIcon,\r\n  Button,\r\n  useTooltip,\r\n  ArrowUpIcon,\r\n  ArrowDownIcon,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { useAppDispatch } from 'state'\r\nimport { BetPosition, NodeLedger, NodeRound } from 'state/types'\r\nimport { fetchLedgerData } from 'state/predictions'\r\nimport { ROUND_BUFFER } from 'state/predictions/config'\r\nimport useToast from 'hooks/useToast'\r\nimport useTheme from 'hooks/useTheme'\r\nimport CardFlip from '../CardFlip'\r\nimport { formatBnbv2 } from '../../helpers'\r\nimport { RoundResultBox, PrizePoolRow } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader, { getBorderBackground } from './CardHeader'\r\nimport SetPositionCard from './SetPositionCard'\r\n\r\ninterface OpenRoundCardProps {\r\n  round: NodeRound\r\n  betAmount?: NodeLedger['amount']\r\n  hasEnteredUp: boolean\r\n  hasEnteredDown: boolean\r\n  bullMultiplier: string\r\n  bearMultiplier: string\r\n}\r\n\r\ninterface State {\r\n  isSettingPosition: boolean\r\n  position: BetPosition\r\n}\r\n\r\nconst OpenRoundCard: React.FC<OpenRoundCardProps> = ({\r\n  round,\r\n  betAmount,\r\n  hasEnteredUp,\r\n  hasEnteredDown,\r\n  bullMultiplier,\r\n  bearMultiplier,\r\n}) => {\r\n  const [state, setState] = useState<State>({\r\n    isSettingPosition: false,\r\n    position: BetPosition.BULL,\r\n  })\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n  const { toastSuccess } = useToast()\r\n  const { account } = useWeb3React()\r\n  const dispatch = useAppDispatch()\r\n  const { isSettingPosition, position } = state\r\n  const isBufferPhase = Date.now() > (round.lockTimestamp + ROUND_BUFFER) * 1000\r\n  const positionDisplay = position === BetPosition.BULL ? t('Up').toUpperCase() : t('Down').toUpperCase()\r\n  const { targetRef, tooltipVisible, tooltip } = useTooltip(\r\n    <div style={{ whiteSpace: 'nowrap' }}>{`${formatBnbv2(betAmount)} BNB`}</div>,\r\n    { placement: 'top' },\r\n  )\r\n\r\n  const getHasEnteredPosition = () => {\r\n    if (hasEnteredUp || hasEnteredDown) {\r\n      return false\r\n    }\r\n\r\n    if (round.lockPrice !== null) {\r\n      return false\r\n    }\r\n\r\n    return true\r\n  }\r\n\r\n  const canEnterPosition = getHasEnteredPosition()\r\n\r\n  const handleBack = () =>\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: false,\r\n    }))\r\n\r\n  const handleSetPosition = (newPosition: BetPosition) => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      isSettingPosition: true,\r\n      position: newPosition,\r\n    }))\r\n  }\r\n\r\n  const togglePosition = () => {\r\n    setState((prevState) => ({\r\n      ...prevState,\r\n      position: prevState.position === BetPosition.BULL ? BetPosition.BEAR : BetPosition.BULL,\r\n    }))\r\n  }\r\n\r\n  const handleSuccess = async () => {\r\n    await dispatch(fetchLedgerData({ account, epochs: [round.epoch] }))\r\n\r\n    handleBack()\r\n\r\n    toastSuccess(\r\n      t('Success!'),\r\n      t('%position% position entered', {\r\n        position: positionDisplay,\r\n      }),\r\n    )\r\n  }\r\n\r\n  const getPositionEnteredIcon = () => {\r\n    return position === BetPosition.BULL ? <ArrowUpIcon color=\"currentColor\" /> : <ArrowDownIcon color=\"currentColor\" />\r\n  }\r\n\r\n  return (\r\n    <CardFlip isFlipped={isSettingPosition} height=\"404px\">\r\n      <Card borderBackground={getBorderBackground(theme, 'next')}>\r\n        <CardHeader\r\n          status=\"next\"\r\n          epoch={round.epoch}\r\n          icon={<PlayCircleOutlineIcon color=\"white\" mr=\"4px\" width=\"21px\" />}\r\n          title={t('Next')}\r\n        />\r\n        <CardBody p=\"16px\">\r\n          <MultiplierArrow betAmount={betAmount} multiplier={bullMultiplier} hasEntered={hasEnteredUp} />\r\n          <RoundResultBox isNext={canEnterPosition} isLive={!canEnterPosition}>\r\n            {canEnterPosition ? (\r\n              <>\r\n                <PrizePoolRow totalAmount={round.totalAmount} mb=\"8px\" />\r\n                <Button\r\n                  variant=\"success\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BULL)}\r\n                  mb=\"4px\"\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter UP')}\r\n                </Button>\r\n                <Button\r\n                  variant=\"danger\"\r\n                  width=\"100%\"\r\n                  onClick={() => handleSetPosition(BetPosition.BEAR)}\r\n                  disabled={!canEnterPosition || isBufferPhase}\r\n                >\r\n                  {t('Enter DOWN')}\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                <div ref={targetRef}>\r\n                  <Button disabled startIcon={getPositionEnteredIcon()} width=\"100%\" mb=\"8px\">\r\n                    {t('%position% Entered', { position: positionDisplay })}\r\n                  </Button>\r\n                </div>\r\n                <PrizePoolRow totalAmount={round.totalAmount} />\r\n                {tooltipVisible && tooltip}\r\n              </>\r\n            )}\r\n          </RoundResultBox>\r\n          <MultiplierArrow\r\n            betAmount={betAmount}\r\n            multiplier={bearMultiplier}\r\n            betPosition={BetPosition.BEAR}\r\n            hasEntered={hasEnteredDown}\r\n          />\r\n        </CardBody>\r\n      </Card>\r\n      <SetPositionCard\r\n        onBack={handleBack}\r\n        onSuccess={handleSuccess}\r\n        position={position}\r\n        togglePosition={togglePosition}\r\n        epoch={round.epoch}\r\n      />\r\n    </CardFlip>\r\n  )\r\n}\r\n\r\nexport default OpenRoundCard\r\n","import { useCallback, useEffect, useState } from 'react'\r\nimport useIsWindowVisible from 'hooks/useIsWindowVisible'\r\n\r\nconst getNow = () => Math.floor(Date.now() / 1000)\r\n\r\n/**\r\n * Consider this moving up to the global level\r\n */\r\nconst useCountdown = (timestamp: number) => {\r\n  const [secondsRemaining, setSecondsRemaining] = useState(() => {\r\n    return timestamp - getNow()\r\n  })\r\n  const [isPaused, setIsPaused] = useState(false)\r\n  const isWindowVisible = useIsWindowVisible()\r\n\r\n  const pause = useCallback(() => setIsPaused(true), [setIsPaused])\r\n  const unpause = useCallback(() => setIsPaused(false), [setIsPaused])\r\n\r\n  useEffect(() => {\r\n    let timer: ReturnType<typeof setTimeout>\r\n\r\n    if (!isPaused && secondsRemaining > 0) {\r\n      timer = setTimeout(() => {\r\n        setSecondsRemaining((prevSecondsRemaining) => prevSecondsRemaining - 1)\r\n      }, 1000)\r\n    }\r\n\r\n    return () => {\r\n      clearTimeout(timer)\r\n    }\r\n  }, [secondsRemaining, isPaused, setSecondsRemaining])\r\n\r\n  useEffect(() => {\r\n    setSecondsRemaining(timestamp - getNow())\r\n  }, [timestamp, setSecondsRemaining])\r\n\r\n  // Pause the timer if the tab becomes inactive to avoid it becoming out of sync\r\n  useEffect(() => {\r\n    if (isWindowVisible) {\r\n      setSecondsRemaining(timestamp - getNow())\r\n      unpause()\r\n    } else {\r\n      pause()\r\n    }\r\n  }, [pause, unpause, timestamp, setSecondsRemaining, isWindowVisible])\r\n\r\n  return { secondsRemaining, pause, unpause }\r\n}\r\n\r\nexport default useCountdown\r\n","import React from 'react'\r\nimport { Card, CardBody, Text, WaitIcon } from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { NodeRound, BetPosition } from 'state/types'\r\nimport useTheme from 'hooks/useTheme'\r\nimport { useGetIntervalSeconds } from 'state/predictions/hooks'\r\nimport { ROUND_BUFFER } from 'state/predictions/config'\r\nimport { formatRoundTime } from '../../helpers'\r\nimport useCountdown from '../../hooks/useCountdown'\r\nimport { RoundResultBox } from '../RoundResult'\r\nimport MultiplierArrow from './MultiplierArrow'\r\nimport CardHeader, { getBorderBackground } from './CardHeader'\r\n\r\ninterface SoonRoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst SoonRoundCard: React.FC<SoonRoundCardProps> = ({ round }) => {\r\n  const intervalSeconds = useGetIntervalSeconds()\r\n  const { secondsRemaining } = useCountdown(round.startTimestamp + intervalSeconds + ROUND_BUFFER)\r\n  const countdown = formatRoundTime(secondsRemaining)\r\n  const { t } = useTranslation()\r\n  const { theme } = useTheme()\r\n\r\n  return (\r\n    <Card borderBackground={getBorderBackground(theme, 'soon')}>\r\n      <CardHeader status=\"soon\" icon={<WaitIcon mr=\"4px\" width=\"21px\" />} title={t('Later')} epoch={round.epoch} />\r\n      <CardBody p=\"16px\">\r\n        <MultiplierArrow isDisabled />\r\n        <RoundResultBox>\r\n          <Text textAlign=\"center\">\r\n            <Text bold>{t('Entry starts')}</Text>\r\n            <Text fontSize=\"24px\" bold>\r\n              {`~${countdown}`}\r\n            </Text>\r\n          </Text>\r\n        </RoundResultBox>\r\n        <MultiplierArrow betPosition={BetPosition.BEAR} isDisabled />\r\n      </CardBody>\r\n    </Card>\r\n  )\r\n}\r\n\r\nexport default SoonRoundCard\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { useGetBetByEpoch, useGetCurrentEpoch } from 'state/predictions/hooks'\r\nimport { BetPosition, NodeRound } from 'state/types'\r\nimport { getMultiplierv2 } from '../../helpers'\r\nimport ExpiredRoundCard from './ExpiredRoundCard'\r\nimport LiveRoundCard from './LiveRoundCard'\r\nimport OpenRoundCard from './OpenRoundCard'\r\nimport SoonRoundCard from './SoonRoundCard'\r\n\r\ninterface RoundCardProps {\r\n  round: NodeRound\r\n}\r\n\r\nconst RoundCard: React.FC<RoundCardProps> = ({ round }) => {\r\n  const { epoch, lockPrice, closePrice, totalAmount, bullAmount, bearAmount } = round\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const { account } = useWeb3React()\r\n  const ledger = useGetBetByEpoch(account, epoch)\r\n  const hasEntered = ledger ? ledger.amount.gt(0) : false\r\n  const hasEnteredUp = hasEntered && ledger.position === BetPosition.BULL\r\n  const hasEnteredDown = hasEntered && ledger.position === BetPosition.BEAR\r\n  const hasClaimedUp = hasEntered && ledger.claimed && ledger.position === BetPosition.BULL\r\n  const hasClaimedDown = hasEntered && ledger.claimed && ledger.position === BetPosition.BEAR\r\n\r\n  const bullMultiplier = getMultiplierv2(totalAmount, bullAmount)\r\n  const bearMultiplier = getMultiplierv2(totalAmount, bearAmount)\r\n\r\n  const formattedBullMultiplier = bullMultiplier.toUnsafeFloat().toFixed(bullMultiplier.isZero() ? 0 : 2)\r\n  const formattedBearMultiplier = bearMultiplier.toUnsafeFloat().toFixed(bearMultiplier.isZero() ? 0 : 2)\r\n\r\n  // Next (open) round\r\n  if (epoch === currentEpoch && lockPrice === null) {\r\n    return (\r\n      <OpenRoundCard\r\n        round={round}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        betAmount={ledger?.amount}\r\n        bullMultiplier={formattedBullMultiplier}\r\n        bearMultiplier={formattedBearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Live round\r\n  if (closePrice === null && epoch === currentEpoch - 1) {\r\n    return (\r\n      <LiveRoundCard\r\n        betAmount={ledger?.amount}\r\n        hasEnteredDown={hasEnteredDown}\r\n        hasEnteredUp={hasEnteredUp}\r\n        round={round}\r\n        bullMultiplier={formattedBullMultiplier}\r\n        bearMultiplier={formattedBearMultiplier}\r\n      />\r\n    )\r\n  }\r\n\r\n  // Fake future rounds\r\n  if (epoch > currentEpoch) {\r\n    return <SoonRoundCard round={round} />\r\n  }\r\n\r\n  // Past rounds\r\n  return (\r\n    <ExpiredRoundCard\r\n      round={round}\r\n      hasEnteredDown={hasEnteredDown}\r\n      hasEnteredUp={hasEnteredUp}\r\n      hasClaimedDown={hasClaimedDown}\r\n      hasClaimedUp={hasClaimedUp}\r\n      betAmount={ledger?.amount}\r\n      bullMultiplier={formattedBullMultiplier}\r\n      bearMultiplier={formattedBearMultiplier}\r\n    />\r\n  )\r\n}\r\n\r\nexport default RoundCard\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useCountUp } from 'react-countup'\r\nimport styled from 'styled-components'\r\nimport { BnbUsdtPairTokenIcon, Box, Flex, PocketWatchIcon, Text } from '@pancakeswap/uikit'\r\nimport { ROUND_BUFFER } from 'state/predictions/config'\r\nimport { formatBigNumberToFixed } from 'utils/formatBalance'\r\nimport { useGetCurrentRoundLockTimestamp, useGetLastOraclePrice } from 'state/predictions/hooks'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport { formatRoundTime } from '../helpers'\r\nimport useCountdown from '../hooks/useCountdown'\r\n\r\nconst Token = styled(Box)`\r\n  margin-top: -24px;\r\n  position: absolute;\r\n  top: 50%;\r\n  z-index: 30;\r\n\r\n  & > svg {\r\n    height: 48px;\r\n    width: 48px;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    margin-top: -32px;\r\n\r\n    & > svg {\r\n      height: 64px;\r\n      width: 64px;\r\n    }\r\n  }\r\n`\r\n\r\nconst Title = styled(Text)`\r\n  font-size: 16px;\r\n  line-height: 21px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    font-size: 20px;\r\n    line-height: 22px;\r\n  }\r\n`\r\n\r\nconst Price = styled(Text)`\r\n  height: 18px;\r\n  justify-self: start;\r\n  width: 70px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n  }\r\n`\r\n\r\nconst Interval = styled(Text)`\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    text-align: center;\r\n    width: 32px;\r\n  }\r\n`\r\n\r\nconst Label = styled(Flex)<{ dir: 'left' | 'right' }>`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  box-shadow: ${({ theme }) => theme.shadows.level1};\r\n  align-items: ${({ dir }) => (dir === 'right' ? 'flex-end' : 'flex-start')};\r\n  border-radius: ${({ dir }) => (dir === 'right' ? '8px 8px 8px 24px' : '8px 8px 24px 8px')};\r\n  flex-direction: column;\r\n  overflow: initial;\r\n  padding: ${({ dir }) => (dir === 'right' ? '0 28px 0 8px' : '0 8px 0 24px')};\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    align-items: center;\r\n    border-radius: ${({ theme }) => theme.radii.card};\r\n    flex-direction: row;\r\n    padding: ${({ dir }) => (dir === 'right' ? '8px 40px 8px 8px' : '8px 8px 8px 40px')};\r\n  }\r\n`\r\n\r\nexport const PricePairLabel: React.FC = () => {\r\n  const price = useGetLastOraclePrice()\r\n  const priceAsNumber = parseFloat(formatBigNumberToFixed(price, 3, 8))\r\n  const { countUp, update } = useCountUp({\r\n    start: 0,\r\n    end: priceAsNumber,\r\n    duration: 1,\r\n    decimals: 3,\r\n  })\r\n\r\n  const updateRef = useRef(update)\r\n\r\n  useEffect(() => {\r\n    updateRef.current(priceAsNumber)\r\n  }, [priceAsNumber, updateRef])\r\n\r\n  return (\r\n    <Box pl=\"24px\" position=\"relative\" display=\"inline-block\">\r\n      <Token left={0}>\r\n        <BnbUsdtPairTokenIcon />\r\n      </Token>\r\n      <Label dir=\"left\">\r\n        <Title bold textTransform=\"uppercase\">\r\n          BNBUSDT\r\n        </Title>\r\n        <Price fontSize=\"12px\">{`$${countUp}`}</Price>\r\n      </Label>\r\n    </Box>\r\n  )\r\n}\r\n\r\ninterface TimerLabelProps {\r\n  interval: string\r\n  unit: 'm' | 'h' | 'd'\r\n}\r\n\r\nexport const TimerLabel: React.FC<TimerLabelProps> = ({ interval, unit }) => {\r\n  const currentRoundLockTimestamp = useGetCurrentRoundLockTimestamp()\r\n  const { secondsRemaining } = useCountdown(currentRoundLockTimestamp + ROUND_BUFFER)\r\n  const countdown = formatRoundTime(secondsRemaining)\r\n  const { t } = useTranslation()\r\n\r\n  return (\r\n    <Box pr=\"24px\" position=\"relative\">\r\n      <Label dir=\"right\">\r\n        <Title bold color=\"secondary\">\r\n          {secondsRemaining === 0 ? t('Closing') : countdown}\r\n        </Title>\r\n        <Interval fontSize=\"12px\">{`${interval}${t(unit)}`}</Interval>\r\n      </Label>\r\n      <Token right={0}>\r\n        <PocketWatchIcon />\r\n      </Token>\r\n    </Box>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { ArrowBackIcon, ArrowForwardIcon, BunnyCardsIcon, Flex, IconButton } from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst StyledPrevNextNav = styled(Flex)`\r\n  align-items: center;\r\n  display: none;\r\n  justify-content: space-between;\r\n  overflow: initial;\r\n  position: relative;\r\n  width: 128px;\r\n\r\n  box-shadow: ${({ theme }) => theme.shadows.level1};\r\n  border-radius: ${({ theme }) => theme.radii.default};\r\n  background-color: ${({ theme }) => theme.card.background};\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n  }\r\n`\r\n\r\nconst Icon = styled.div`\r\n  cursor: pointer;\r\n  left: 50%;\r\n  margin-left: -32px;\r\n  position: absolute;\r\n`\r\n\r\nconst PrevNextNav = () => {\r\n  const { swiper } = useSwiper()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n\r\n  const handlePrevSlide = () => {\r\n    swiper.slidePrev()\r\n  }\r\n\r\n  const handleNextSlide = () => {\r\n    swiper.slideNext()\r\n  }\r\n\r\n  const handleSlideToLive = () => {\r\n    const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n    swiper.slideTo(currentEpochIndex - 1)\r\n    swiper.update()\r\n  }\r\n\r\n  return (\r\n    <StyledPrevNextNav>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handlePrevSlide}>\r\n        <ArrowBackIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n      <Icon onClick={handleSlideToLive}>\r\n        <BunnyCardsIcon width=\"64px\" />\r\n      </Icon>\r\n      <IconButton variant=\"text\" scale=\"sm\" onClick={handleNextSlide}>\r\n        <ArrowForwardIcon color=\"primary\" width=\"24px\" />\r\n      </IconButton>\r\n    </StyledPrevNextNav>\r\n  )\r\n}\r\n\r\nexport default PrevNextNav\r\n","import React from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { AutoRenewIcon, HistoryIcon, IconButton } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { setHistoryPaneState } from 'state/predictions'\r\nimport { useGetIsFetchingHistory } from 'state/predictions/hooks'\r\n\r\nconst HistoryButton = () => {\r\n  const isFetchingHistory = useGetIsFetchingHistory()\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleClick = () => {\r\n    dispatch(setHistoryPaneState(true))\r\n  }\r\n\r\n  return (\r\n    <IconButton variant=\"subtle\" ml=\"8px\" onClick={handleClick} isLoading={isFetchingHistory} disabled={!account}>\r\n      {isFetchingHistory ? <AutoRenewIcon spin color=\"white\" /> : <HistoryIcon width=\"24px\" color=\"white\" />}\r\n    </IconButton>\r\n  )\r\n}\r\n\r\nexport default HistoryButton\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex, HelpIcon, IconButton } from '@pancakeswap/uikit'\r\nimport FlexRow from './FlexRow'\r\nimport { PricePairLabel, TimerLabel } from './Label'\r\nimport PrevNextNav from './PrevNextNav'\r\nimport HistoryButton from './HistoryButton'\r\n\r\nconst SetCol = styled.div`\r\n  flex: none;\r\n  width: auto;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    width: 270px;\r\n  }\r\n`\r\n\r\nconst HelpButtonWrapper = styled.div`\r\n  order: 1;\r\n  margin: 0 8px 0 0;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 2;\r\n    margin: 0 0 0 8px;\r\n  }\r\n`\r\n\r\nconst TimerLabelWrapper = styled.div`\r\n  order: 2;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    order: 1;\r\n  }\r\n`\r\n\r\nconst HistoryButtonWrapper = styled.div`\r\n  display: none;\r\n  order: 3;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: initial;\r\n  }\r\n`\r\n\r\nconst Menu = () => {\r\n  return (\r\n    <FlexRow alignItems=\"center\" p=\"16px\">\r\n      <SetCol>\r\n        <PricePairLabel />\r\n      </SetCol>\r\n      <FlexRow justifyContent=\"center\">\r\n        <PrevNextNav />\r\n      </FlexRow>\r\n      <SetCol>\r\n        <Flex alignItems=\"center\" justifyContent=\"flex-end\">\r\n          <TimerLabelWrapper>\r\n            <TimerLabel interval=\"5\" unit=\"m\" />\r\n          </TimerLabelWrapper>\r\n          <HelpButtonWrapper>\r\n            <IconButton\r\n              variant=\"subtle\"\r\n              as=\"a\"\r\n              href=\"https://docs.pancakeswap.finance/products/prediction\"\r\n              target=\"_blank\"\r\n              rel=\"noreferrer noopener\"\r\n            >\r\n              <HelpIcon width=\"24px\" color=\"white\" />\r\n            </IconButton>\r\n          </HelpButtonWrapper>\r\n          <HistoryButtonWrapper>\r\n            <HistoryButton />\r\n          </HistoryButtonWrapper>\r\n        </Flex>\r\n      </SetCol>\r\n    </FlexRow>\r\n  )\r\n}\r\n\r\nexport default Menu\r\n","import { useEffect } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport usePreviousValue from 'hooks/usePreviousValue'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\r\nimport useSwiper from './useSwiper'\r\n\r\n/**\r\n * Hooks for actions to be performed when the round changes\r\n */\r\nconst useOnNextRound = () => {\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const rounds = useGetSortedRounds()\r\n  const { account } = useWeb3React()\r\n  const previousEpoch = usePreviousValue(currentEpoch)\r\n  const { swiper } = useSwiper()\r\n  const dispatch = useAppDispatch()\r\n\r\n  useEffect(() => {\r\n    if (swiper && currentEpoch !== undefined && previousEpoch !== undefined && currentEpoch !== previousEpoch) {\r\n      const currentEpochIndex = rounds.findIndex((round) => round.epoch === currentEpoch)\r\n\r\n      // Slide to the current LIVE round which is always the one before the current round\r\n      swiper.slideTo(currentEpochIndex - 1)\r\n      swiper.update()\r\n    }\r\n  }, [previousEpoch, currentEpoch, rounds, swiper, account, dispatch])\r\n}\r\n\r\nexport default useOnNextRound\r\n","import { useEffect } from 'react'\r\nimport usePrevious from 'hooks/usePreviousValue'\r\nimport useSwiper from './useSwiper'\r\nimport { PageView } from '../types'\r\n\r\n/**\r\n * Hooks for actions to be performed when the view changes (mobile)\r\n */\r\nconst useOnViewChange = (liveSwiperIndex: number, view?: PageView) => {\r\n  const { swiper } = useSwiper()\r\n  const prevView = usePrevious(view)\r\n\r\n  useEffect(() => {\r\n    if (swiper && view !== prevView && swiper.activeIndex !== liveSwiperIndex) {\r\n      swiper.slideTo(liveSwiperIndex, 0.1)\r\n    }\r\n  }, [swiper, prevView, view, liveSwiperIndex])\r\n}\r\n\r\nexport default useOnViewChange\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport SwiperCore, { Keyboard, Mousewheel } from 'swiper'\r\nimport { Swiper, SwiperSlide } from 'swiper/react'\r\nimport { Box } from '@pancakeswap/uikit'\r\nimport { useGetCurrentEpoch, useGetSortedRounds } from 'state/predictions/hooks'\r\nimport 'swiper/swiper.min.css'\r\nimport RoundCard from './components/RoundCard'\r\nimport Menu from './components/Menu'\r\nimport useSwiper from './hooks/useSwiper'\r\nimport useOnNextRound from './hooks/useOnNextRound'\r\nimport useOnViewChange from './hooks/useOnViewChange'\r\nimport { PageView } from './types'\r\n\r\nSwiperCore.use([Keyboard, Mousewheel])\r\n\r\nconst StyledSwiper = styled.div`\r\n  .swiper-wrapper {\r\n    align-items: center;\r\n    display: flex;\r\n  }\r\n\r\n  .swiper-slide {\r\n    width: 320px;\r\n  }\r\n`\r\nconst Positions: React.FC<{ view?: PageView }> = ({ view }) => {\r\n  const { setSwiper } = useSwiper()\r\n  const rounds = useGetSortedRounds()\r\n  const currentEpoch = useGetCurrentEpoch()\r\n  const previousEpoch = currentEpoch > 0 ? currentEpoch - 1 : currentEpoch\r\n  const previousRound = rounds.find((round) => round.epoch === previousEpoch)\r\n  const swiperIndex = rounds.indexOf(previousRound)\r\n\r\n  useOnNextRound()\r\n  useOnViewChange(swiperIndex, view)\r\n\r\n  return (\r\n    <Box overflow=\"hidden\">\r\n      <Menu />\r\n      <StyledSwiper>\r\n        <Swiper\r\n          initialSlide={swiperIndex}\r\n          onSwiper={setSwiper}\r\n          spaceBetween={16}\r\n          slidesPerView=\"auto\"\r\n          freeMode\r\n          freeModeSticky\r\n          centeredSlides\r\n          freeModeMomentumRatio={0.25}\r\n          freeModeMomentumVelocityRatio={0.5}\r\n          mousewheel\r\n          keyboard\r\n          resizeObserver\r\n        >\r\n          {rounds.map((round) => (\r\n            <SwiperSlide key={round.epoch}>\r\n              <RoundCard round={round} />\r\n            </SwiperSlide>\r\n          ))}\r\n        </Swiper>\r\n      </StyledSwiper>\r\n    </Box>\r\n  )\r\n}\r\n\r\nexport default Positions\r\n","export enum PageView {\r\n  POSITIONS = 'positions',\r\n  HISTORY = 'history',\r\n  CHART = 'chart',\r\n}\r\n","import React, { useEffect, useRef } from 'react'\r\nimport styled from 'styled-components'\r\nimport Split from 'split-grid'\r\nimport { ArrowDownIcon, Button, ChartIcon } from '@pancakeswap/uikit'\r\nimport debounce from 'lodash/debounce'\r\nimport delay from 'lodash/delay'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\r\nimport { setChartPaneState } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport TradingView from './components/TradingView'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\n\r\n// The value to set the chart when the user clicks the chart tab at the bottom\r\nconst GRID_TEMPLATE_ROW = '1.2fr 12px .8fr'\r\n\r\nconst ExpandChartButton = styled(Button)`\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  border-bottom-left-radius: 0;\r\n  border-bottom-right-radius: 0;\r\n  bottom: 12px;\r\n  color: ${({ theme }) => theme.colors.text};\r\n  display: none;\r\n  left: 32px;\r\n  position: absolute;\r\n  z-index: 50;\r\n\r\n  &:hover:not(:disabled):not(.pancake-button--disabled):not(.pancake-button--disabled):not(:active) {\r\n    background-color: ${({ theme }) => theme.card.background};\r\n    opacity: 1;\r\n  }\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: inline-flex;\r\n  }\r\n`\r\n\r\nconst SplitWrapper = styled.div`\r\n  display: grid;\r\n  grid-template-columns: 1fr;\r\n  grid-template-rows: 1fr 12px 0;\r\n  flex: 1;\r\n  overflow: hidden;\r\n`\r\n\r\nconst ChartPane = styled.div`\r\n  overflow: hidden;\r\n  position: relative;\r\n`\r\n\r\nconst HistoryPane = styled.div<{ isHistoryPaneOpen: boolean }>`\r\n  flex: none;\r\n  overflow: hidden;\r\n  transition: width 200ms ease-in-out;\r\n  width: ${({ isHistoryPaneOpen }) => (isHistoryPaneOpen ? '384px' : 0)};\r\n`\r\n\r\nconst StyledDesktop = styled.div`\r\n  display: none;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: flex;\r\n    height: 100%;\r\n  }\r\n`\r\n\r\nconst PositionPane = styled.div`\r\n  align-items: center;\r\n  display: flex;\r\n  max-width: 100%;\r\n  overflow-y: auto;\r\n  overflow-x: hidden;\r\n\r\n  & > div {\r\n    flex: 1;\r\n    overflow: hidden;\r\n  }\r\n`\r\n\r\nconst Gutter = styled.div`\r\n  background: ${({ theme }) => theme.colors.dropdown};\r\n  cursor: row-resize;\r\n  height: 12px;\r\n  position: relative;\r\n\r\n  &:before {\r\n    background-color: ${({ theme }) => theme.colors.textSubtle};\r\n    border-radius: 8px;\r\n    content: '';\r\n    height: 4px;\r\n    left: 50%;\r\n    margin-left: -32px;\r\n    position: absolute;\r\n    top: 4px;\r\n    width: 64px;\r\n  }\r\n`\r\n\r\nconst Desktop: React.FC = () => {\r\n  const splitWrapperRef = useRef<HTMLDivElement>()\r\n  const chartRef = useRef<HTMLDivElement>()\r\n  const gutterRef = useRef<HTMLDivElement>()\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const { t } = useTranslation()\r\n  const status = useGetPredictionsStatus()\r\n\r\n  const toggleChartPane = () => {\r\n    const newChartPaneState = !isChartPaneOpen\r\n\r\n    if (newChartPaneState) {\r\n      splitWrapperRef.current.style.transition = 'grid-template-rows 150ms'\r\n      splitWrapperRef.current.style.gridTemplateRows = GRID_TEMPLATE_ROW\r\n\r\n      // Purely comedic: We only want to animate if we are clicking the open chart button\r\n      // If we keep the transition on the resizing becomes very choppy\r\n      delay(() => {\r\n        splitWrapperRef.current.style.transition = ''\r\n      }, 150)\r\n    }\r\n\r\n    dispatch(setChartPaneState(newChartPaneState))\r\n  }\r\n\r\n  useEffect(() => {\r\n    const threshold = 100\r\n    const handleDrag = debounce(() => {\r\n      const { height } = chartRef.current.getBoundingClientRect()\r\n\r\n      // If the height of the chart pane goes below the \"snapOffset\" threshold mark the chart pane as closed\r\n      dispatch(setChartPaneState(height > threshold))\r\n    }, 50)\r\n\r\n    const split = Split({\r\n      dragInterval: 1,\r\n      snapOffset: threshold,\r\n      onDrag: handleDrag,\r\n      rowGutters: [\r\n        {\r\n          track: 1,\r\n          element: gutterRef.current,\r\n        },\r\n      ],\r\n    })\r\n\r\n    return () => {\r\n      split.destroy()\r\n    }\r\n  }, [gutterRef, chartRef, dispatch])\r\n\r\n  return (\r\n    <>\r\n      {!isChartPaneOpen && (\r\n        <ExpandChartButton\r\n          variant=\"tertiary\"\r\n          scale=\"sm\"\r\n          startIcon={isChartPaneOpen ? <ArrowDownIcon /> : <ChartIcon />}\r\n          onClick={toggleChartPane}\r\n        >\r\n          {isChartPaneOpen ? t('Close') : t('Charts')}\r\n        </ExpandChartButton>\r\n      )}\r\n      <StyledDesktop>\r\n        <SplitWrapper ref={splitWrapperRef}>\r\n          <PositionPane>\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && <Positions />}\r\n          </PositionPane>\r\n          <Gutter ref={gutterRef} />\r\n          <ChartPane ref={chartRef}>\r\n            <TradingView />\r\n          </ChartPane>\r\n        </SplitWrapper>\r\n        <HistoryPane isHistoryPaneOpen={isHistoryPaneOpen}>\r\n          <History />\r\n        </HistoryPane>\r\n      </StyledDesktop>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Desktop\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport {\r\n  ArrowBackIcon,\r\n  ArrowForwardIcon,\r\n  ButtonMenu,\r\n  ButtonMenuItem,\r\n  Cards,\r\n  ChartIcon,\r\n  HistoryIcon,\r\n  IconButton,\r\n} from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { PredictionStatus } from 'state/types'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\r\nimport { setChartPaneState, setHistoryPaneState } from 'state/predictions'\r\nimport useSwiper from '../hooks/useSwiper'\r\n\r\nconst ButtonNav = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst TabNav = styled.div`\r\n  flex: 1;\r\n  text-align: center;\r\n`\r\n\r\nconst StyledMobileMenu = styled.div`\r\n  align-items: center;\r\n  background-color: ${({ theme }) => theme.card.background};\r\n  display: flex;\r\n  flex: none;\r\n  height: 64px;\r\n\r\n  ${({ theme }) => theme.mediaQueries.lg} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst getActiveIndex = (isHistoryOpen: boolean, isChartOpen: boolean) => {\r\n  if (isHistoryOpen) {\r\n    return 2\r\n  }\r\n\r\n  if (isChartOpen) {\r\n    return 1\r\n  }\r\n\r\n  return 0\r\n}\r\n\r\nconst MobileMenu = () => {\r\n  const { swiper } = useSwiper()\r\n  const isHistoryOpen = useIsHistoryPaneOpen()\r\n  const isChartOpen = useIsChartPaneOpen()\r\n  const status = useGetPredictionsStatus()\r\n  const activeIndex = getActiveIndex(isHistoryOpen, isChartOpen)\r\n  const dispatch = useAppDispatch()\r\n  const { account } = useWeb3React()\r\n\r\n  const handleItemClick = (index: number) => {\r\n    switch (index) {\r\n      case 2:\r\n        dispatch(setHistoryPaneState(true))\r\n        break\r\n      case 1:\r\n        dispatch(setChartPaneState(true))\r\n        dispatch(setHistoryPaneState(false))\r\n        break\r\n      case 0:\r\n      default:\r\n        dispatch(setHistoryPaneState(false))\r\n        dispatch(setChartPaneState(false))\r\n    }\r\n  }\r\n\r\n  return (\r\n    <StyledMobileMenu>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slidePrev()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowBackIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n      <TabNav>\r\n        <ButtonMenu activeIndex={activeIndex} scale=\"sm\" variant=\"subtle\" onItemClick={handleItemClick}>\r\n          <ButtonMenuItem>\r\n            <Cards color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem>\r\n            <ChartIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n          <ButtonMenuItem disabled={!account}>\r\n            <HistoryIcon color=\"currentColor\" />\r\n          </ButtonMenuItem>\r\n        </ButtonMenu>\r\n      </TabNav>\r\n      <ButtonNav>\r\n        <IconButton variant=\"text\" onClick={() => swiper.slideNext()} disabled={status !== PredictionStatus.LIVE}>\r\n          <ArrowForwardIcon width=\"24px\" color=\"primary\" />\r\n        </IconButton>\r\n      </ButtonNav>\r\n    </StyledMobileMenu>\r\n  )\r\n}\r\n\r\nexport default MobileMenu\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Flex } from '@pancakeswap/uikit'\r\nimport Menu from './components/Menu'\r\nimport TradingView from './components/TradingView'\r\n\r\nconst MenuWrapper = styled.div`\r\n  flex: none;\r\n`\r\n\r\nconst ChartWrapper = styled.div`\r\n  flex: 1;\r\n  height: 100%;\r\n`\r\n\r\nconst Chart = () => {\r\n  return (\r\n    <Flex flexDirection=\"column\" height=\"100%\">\r\n      <MenuWrapper>\r\n        <Menu />\r\n      </MenuWrapper>\r\n      <ChartWrapper>\r\n        <TradingView />\r\n      </ChartWrapper>\r\n    </Flex>\r\n  )\r\n}\r\n\r\nexport default Chart\r\n","import React from 'react'\r\nimport styled from 'styled-components'\r\nimport { Box, Flex } from '@pancakeswap/uikit'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen, useIsHistoryPaneOpen } from 'state/predictions/hooks'\r\nimport { PredictionStatus } from 'state/types'\r\nimport MobileMenu from './components/MobileMenu'\r\nimport History from './History'\r\nimport Positions from './Positions'\r\nimport Chart from './Chart'\r\nimport { ErrorNotification, PauseNotification } from './components/Notification'\r\nimport { PageView } from './types'\r\n\r\nconst StyledMobile = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  max-height: 100%;\r\n\r\n  ${({ theme }) => theme.mediaQueries.xl} {\r\n    display: none;\r\n  }\r\n`\r\n\r\nconst View = styled.div<{ isVisible: boolean }>`\r\n  height: 100%;\r\n  left: 0;\r\n  position: absolute;\r\n  top: 0;\r\n  width: 100%;\r\n  visibility: ${({ isVisible }) => (isVisible ? 'visible' : 'hidden')};\r\n`\r\n\r\nconst getView = (isHistoryPaneOpen: boolean, isChartPaneOpen: boolean): PageView => {\r\n  if (isHistoryPaneOpen) {\r\n    return PageView.HISTORY\r\n  }\r\n\r\n  if (isChartPaneOpen) {\r\n    return PageView.CHART\r\n  }\r\n\r\n  return PageView.POSITIONS\r\n}\r\n\r\nconst Mobile: React.FC = () => {\r\n  const isHistoryPaneOpen = useIsHistoryPaneOpen()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const view = getView(isHistoryPaneOpen, isChartPaneOpen)\r\n  const status = useGetPredictionsStatus()\r\n\r\n  return (\r\n    <StyledMobile>\r\n      <Box height=\"100%\" overflow=\"hidden\" position=\"relative\">\r\n        <View isVisible={view === PageView.POSITIONS}>\r\n          <Flex alignItems=\"center\" height=\"100%\">\r\n            {status === PredictionStatus.ERROR && <ErrorNotification />}\r\n            {status === PredictionStatus.PAUSED && <PauseNotification />}\r\n            {status === PredictionStatus.LIVE && <Positions view={view} />}\r\n          </Flex>\r\n        </View>\r\n        <View isVisible={view === PageView.CHART}>\r\n          <Chart />\r\n        </View>\r\n        <View isVisible={view === PageView.HISTORY}>\r\n          <History />\r\n        </View>\r\n      </Box>\r\n      <MobileMenu />\r\n    </StyledMobile>\r\n  )\r\n}\r\n\r\nexport default Mobile\r\n","import React, { useState } from 'react'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  Text,\r\n  Button,\r\n  Flex,\r\n  InjectedModalProps,\r\n  Checkbox,\r\n  ModalHeader,\r\n  ModalTitle,\r\n  Heading,\r\n  Box,\r\n} from '@pancakeswap/uikit'\r\nimport { useTranslation } from 'contexts/Localization'\r\nimport styled from 'styled-components'\r\n\r\ninterface RiskDisclaimerProps extends InjectedModalProps {\r\n  onSuccess: () => void\r\n}\r\n\r\nconst GradientModalHeader = styled(ModalHeader)`\r\n  background: ${({ theme }) => theme.colors.gradients.bubblegum};\r\n  padding-bottom: 24px;\r\n  padding-top: 24px;\r\n`\r\n\r\nconst RiskDisclaimer: React.FC<RiskDisclaimerProps> = ({ onSuccess, onDismiss }) => {\r\n  const [acknowledgeRisk, setAcknowledgeRisk] = useState(false)\r\n  const [acknowledgeBeta, setAcknowledgeBeta] = useState(false)\r\n  const { t } = useTranslation()\r\n\r\n  const handleSetAcknowledgeRisk = () => {\r\n    setAcknowledgeRisk(!acknowledgeRisk)\r\n  }\r\n\r\n  const handleSetAcknowledgeBeta = () => {\r\n    setAcknowledgeBeta(!acknowledgeBeta)\r\n  }\r\n\r\n  const handleConfirm = () => {\r\n    onSuccess()\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer title={t('Welcome!')} minWidth=\"320px\">\r\n      <GradientModalHeader>\r\n        <ModalTitle>\r\n          <Heading scale=\"lg\">{t('Welcome!')}</Heading>\r\n        </ModalTitle>\r\n      </GradientModalHeader>\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Box maxHeight=\"300px\" overflowY=\"auto\">\r\n          <Heading as=\"h3\" mb=\"24px\">\r\n            {t('This Product is in beta.')}\r\n          </Heading>\r\n\r\n          <Text as=\"p\" color=\"textSubtle\" mb=\"24px\">\r\n            {t('Once you enter a position, you cannot cancel or adjust it.')}\r\n          </Text>\r\n\r\n          <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox\" scale=\"sm\" checked={acknowledgeRisk} onChange={handleSetAcknowledgeRisk} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t(\r\n                  'I understand that I am using this product at my own risk. Any losses incurred due to my actions are my own responsibility.',\r\n                )}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n          <label htmlFor=\"checkbox1\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n            <Flex alignItems=\"center\">\r\n              <div style={{ flex: 'none' }}>\r\n                <Checkbox id=\"checkbox1\" scale=\"sm\" checked={acknowledgeBeta} onChange={handleSetAcknowledgeBeta} />\r\n              </div>\r\n              <Text ml=\"8px\">\r\n                {t('I understand that this product is still in beta. I am participating at my own risk')}\r\n              </Text>\r\n            </Flex>\r\n          </label>\r\n        </Box>\r\n        <Button width=\"100%\" onClick={handleConfirm} disabled={!acknowledgeRisk || !acknowledgeBeta}>\r\n          {t('Continue')}\r\n        </Button>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default RiskDisclaimer\r\n","import React from 'react'\r\nimport {\r\n  ModalContainer,\r\n  ModalBody,\r\n  Text,\r\n  Button,\r\n  InjectedModalProps,\r\n  LinkExternal,\r\n  Flex,\r\n  Image,\r\n  Heading,\r\n  Checkbox,\r\n  Box,\r\n} from '@pancakeswap/uikit'\r\nimport styled from 'styled-components'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport { useTranslation } from 'contexts/Localization'\r\n\r\nexport const CHART_LOCAL_STORAGE_KEY = 'pcs_chart_do_not_show'\r\n\r\nconst Ul = styled.ul`\r\n  color: ${({ theme }) => theme.colors.textSubtle};\r\n  list-style-position: outside;\r\n  margin-left: 16px;\r\n\r\n  & > li {\r\n    font-size: 14px;\r\n    line-height: 1.5;\r\n  }\r\n`\r\n\r\nconst ChartDisclaimer: React.FC<InjectedModalProps> = ({ onDismiss }) => {\r\n  const [doNotShow, setDoNowShow] = usePersistState(false, { localStorageKey: CHART_LOCAL_STORAGE_KEY })\r\n  const { t } = useTranslation()\r\n\r\n  const handleConfirm = () => {\r\n    onDismiss()\r\n  }\r\n\r\n  return (\r\n    <ModalContainer minWidth=\"320px\">\r\n      <ModalBody p=\"24px\" maxWidth=\"400px\">\r\n        <Flex justifyContent=\"center\" mb=\"32px\">\r\n          <Image src=\"/images/chartwarning.svg\" width={190} height={118} />\r\n        </Flex>\r\n        <Heading as=\"h3\" size=\"sm\">\r\n          {t('Warning')}:\r\n        </Heading>\r\n        <Heading as=\"h4\" size=\"sm\" mb=\"24px\">\r\n          {t('Prices shown on cards and charts are different')}:\r\n        </Heading>\r\n        <Text as=\"p\" fontSize=\"14px\" color=\"textSubtle\">\r\n          {t('The price you see come from difference places')}:\r\n        </Text>\r\n        <Ul>\r\n          <li>{t('Prices on cards come from Chainlink’s verifiable price oracle.')}</li>\r\n          <li>{t(\"Prices on charts come from Binance.com. Chart's are provided for your reference only.\")}</li>\r\n        </Ul>\r\n        <Text as=\"p\" mb=\"16px\" fontSize=\"14px\" color=\"textSubtle\">\r\n          {t(\"Only the price from Chainlink (shown on the cards) determines the round's result.\")}\r\n        </Text>\r\n        <LinkExternal\r\n          href=\"https://docs.pancakeswap.finance/products/prediction/prediction-faq#what-are-you-using-for-your-price-feed\"\r\n          external\r\n          mb=\"24px\"\r\n        >\r\n          {t('Learn More')}\r\n        </LinkExternal>\r\n        <Box>\r\n          <Button width=\"100%\" onClick={handleConfirm} mb=\"16px\">\r\n            {t('I understand')}\r\n          </Button>\r\n        </Box>\r\n        <label htmlFor=\"checkbox\" style={{ display: 'block', cursor: 'pointer', marginBottom: '24px' }}>\r\n          <Flex alignItems=\"center\">\r\n            <div style={{ flex: 'none' }}>\r\n              <Checkbox id=\"checkbox\" scale=\"sm\" checked={doNotShow} onChange={() => setDoNowShow(!doNotShow)} />\r\n            </div>\r\n            <Text ml=\"8px\">{t(\"Don't show this again\")}</Text>\r\n          </Flex>\r\n        </label>\r\n      </ModalBody>\r\n    </ModalContainer>\r\n  )\r\n}\r\n\r\nexport default ChartDisclaimer\r\n","import React, { useEffect, useRef } from 'react'\r\nimport { useWeb3React } from '@web3-react/core'\r\nimport { Helmet } from 'react-helmet-async'\r\nimport { useMatchBreakpoints, useModal } from '@pancakeswap/uikit'\r\nimport { useAppDispatch } from 'state'\r\nimport { useGetPredictionsStatus, useIsChartPaneOpen } from 'state/predictions/hooks'\r\nimport { useInitialBlock } from 'state/block/hooks'\r\nimport { initializePredictions } from 'state/predictions'\r\nimport { PredictionStatus } from 'state/types'\r\nimport usePersistState from 'hooks/usePersistState'\r\nimport PageLoader from 'components/Loader/PageLoader'\r\nimport usePollOraclePrice from './hooks/usePollOraclePrice'\r\nimport usePollPredictions from './hooks/usePollPredictions'\r\nimport Container from './components/Container'\r\nimport CollectWinningsPopup from './components/CollectWinningsPopup'\r\nimport SwiperProvider from './context/SwiperProvider'\r\nimport Desktop from './Desktop'\r\nimport Mobile from './Mobile'\r\nimport RiskDisclaimer from './components/RiskDisclaimer'\r\nimport ChartDisclaimer, { CHART_LOCAL_STORAGE_KEY } from './components/ChartDisclaimer'\r\n\r\nconst Predictions = () => {\r\n  const { isDesktop } = useMatchBreakpoints()\r\n  const [hasAcceptedRisk, setHasAcceptedRisk] = usePersistState(false, {\r\n    localStorageKey: 'pancake_predictions_accepted_risk-2',\r\n  })\r\n  const { account } = useWeb3React()\r\n  const status = useGetPredictionsStatus()\r\n  const isChartPaneOpen = useIsChartPaneOpen()\r\n  const dispatch = useAppDispatch()\r\n  const initialBlock = useInitialBlock()\r\n  const handleAcceptRiskSuccess = () => setHasAcceptedRisk(true)\r\n  const [onPresentRiskDisclaimer] = useModal(<RiskDisclaimer onSuccess={handleAcceptRiskSuccess} />, false)\r\n  const [onPresentChartDisclaimer] = useModal(<ChartDisclaimer />, false)\r\n\r\n  // TODO: memoize modal's handlers\r\n  const onPresentRiskDisclaimerRef = useRef(onPresentRiskDisclaimer)\r\n  const onPresentChartDisclaimerRef = useRef(onPresentChartDisclaimer)\r\n\r\n  // Disclaimer\r\n  useEffect(() => {\r\n    if (!hasAcceptedRisk) {\r\n      onPresentRiskDisclaimerRef.current()\r\n    }\r\n  }, [hasAcceptedRisk, onPresentRiskDisclaimerRef])\r\n\r\n  // Chart Disclaimer\r\n  useEffect(() => {\r\n    if (isChartPaneOpen) {\r\n      const showChartDisclaimer = JSON.parse(localStorage.getItem(CHART_LOCAL_STORAGE_KEY))\r\n\r\n      if (showChartDisclaimer !== true) {\r\n        onPresentChartDisclaimerRef.current()\r\n      }\r\n    }\r\n  }, [onPresentChartDisclaimerRef, isChartPaneOpen])\r\n\r\n  useEffect(() => {\r\n    if (initialBlock > 0) {\r\n      // Do not start initialization until the first block has been retrieved\r\n      dispatch(initializePredictions(account))\r\n    }\r\n  }, [initialBlock, dispatch, account])\r\n\r\n  usePollPredictions()\r\n  usePollOraclePrice()\r\n\r\n  if (status === PredictionStatus.INITIAL) {\r\n    return <PageLoader />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Helmet>\r\n        <script src=\"https://s3.tradingview.com/tv.js\" type=\"text/javascript\" id=\"tradingViewWidget\" />\r\n      </Helmet>\r\n      <SwiperProvider>\r\n        <Container>\r\n          {isDesktop ? <Desktop /> : <Mobile />}\r\n          <CollectWinningsPopup />\r\n        </Container>\r\n      </SwiperProvider>\r\n    </>\r\n  )\r\n}\r\n\r\nexport default Predictions\r\n"],"sourceRoot":""}